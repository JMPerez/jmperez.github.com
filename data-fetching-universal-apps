<!doctype html><html lang=en><head><meta charset=utf-8><meta content="ie=edge" http-equiv=x-ua-compatible><meta content="DPR, Viewport-Width, Width" http-equiv=Accept-CH><title>Some things I learned implementing Data Fetching for Universal Web Apps - José M. Pérez</title><link href=//res.cloudinary.com rel=dns-prefetch /><meta content="Webpack and Browserify generate large bundles if we include Node.JS code to be run on the browser. In this post you will learn how to prevent this issue." name=description><meta content="width=device-width,initial-scale=1,viewport-fit=cover" name=viewport><link href=https://plus.google.com/107456024651797783420 rel=author /><link href=https://jmperezperez.com/feed.xml rel=alternate title="Jose M. Perez" type=application/rss+xml><meta content=summary_large_image name=twitter:card><meta content=https://jmperezperez.com//data-fetching-universal-apps name=twitter:url property=og:url><meta content="Some things I learned implementing Data Fetching for Universal Web Apps" name=twitter:title property=og:title><meta content="Webpack and Browserify generate large bundles if we include Node.JS code to be run on the browser. In this post you will learn how to prevent this issue." name=twitter:description property=og:description><meta content=@jmperezperez name=twitter:site><meta content=https://jmperezperez.com/assets/images/posts/universal-data-fetching.png property=og:image><meta content=https://jmperezperez.com/assets/images/posts/universal-data-fetching.png name=twitter:image><meta content=1702266270006013 property=fb:app_id><meta content=1639848659664211 property=fb:pages /><link href=https://jmperezperez.com//data-fetching-universal-apps rel=canonical /><style>*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;border:none;font:inherit;margin:0;padding:0;vertical-align:baseline}button,input{background:0 0}html{font-size:18px}@media (max-width:768px){html{font-size:16px}}body{background:#fff;color:#555;font-family:Georgia,Times;font-weight:300;font-style:normal;line-height:1.5rem;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-text-size-adjust:100%}h1,h2,h3,h4,h5{color:#212121;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-weight:600;line-height:2rem;margin-bottom:1.5rem}#menu a,.button{font-size:1em;font-weight:400}.post ol,.post ul,amp-video,amp-vimeo,amp-youtube,iframe,p,video{margin:0;margin-bottom:1rem}twitterwidget{margin-bottom:1em!important}a{color:#2a7cb2;font-weight:inherit;text-decoration:none;transition:color .15s ease-out,border-bottom-color .15s ease-out}a:hover{color:#2a7cb2}abbr{border-bottom:1px dashed #ccc;text-decoration:none}p a{border-bottom:1px solid #eee}p a:hover{border-bottom-color:#212121}strong{font-weight:700}em{font-style:italic}h1{font-size:1.7rem}h2{color:#444;display:inline-block;font-size:1.6rem;font-weight:400;margin-top:1rem}h3{color:#666;display:inline-block;font-size:1.4rem;font-weight:400;margin-top:1rem}h4{font-size:1.18rem}h5{font-size:1rem}a h1,a h2,a h3,a h4,a h5{transition:color .15s ease-out}a:hover h1,a:hover h2,a:hover h3,a:hover h4,a:hover h5{color:#3498db}.quote{margin:0 0 15px 0}blockquote{border-left:2px solid #ccc;font-style:italic;margin:0 0 15px 0;padding-left:20px}ol,ul{margin:0 0 15px 0;padding-left:25px}ul{list-style:square}ol{list-style:decimal}hr{background:#eee;color:#eee;clear:both;display:block;height:2px;margin:30px auto;width:50%}code,pre{color:#333;font-family:Courier,Menlo,Monaco;font-size:.8em;letter-spacing:0;overflow-x:auto}pre{padding:.8em 1em;white-space:pre-wrap}code{margin:0}.post::after{display:block;clear:both;content:""}.main-header{background-color:#005689;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;overflow:hidden;margin-bottom:1.5rem;padding:1rem;position:relative;text-align:center;width:100%}#menu{display:inline-block;line-height:2rem}#menu a{color:#fff;font-size:.9rem;margin-left:1rem;padding:1rem .5rem;text-transform:uppercase}@media (max-width:500px){#menu a{margin-left:.5rem;padding:.5rem .25rem}}#menu a:first-child{margin-left:0}#menu a[aria-current]{font-weight:700}#page{margin:0 auto;max-width:41rem;padding-left:1.5rem;padding-right:1.5rem;position:relative}.videoWrapper{height:0;margin-bottom:1em;padding-bottom:56.25%;padding-top:25px;position:relative}.videoWrapper amp-youtube,.videoWrapper iframe{height:100%;left:0;position:absolute;top:0;width:100%}.wrapper{border-top:2px solid #eee;padding-top:2rem}.wrapper:first-child{border-top:none;padding-top:1rem}.posts-list h2{margin-top:0}.post{display:block;margin-bottom:2rem;width:100%}.post div[itemprop=articleBody]>p:first-child{color:#333}.post li{margin-bottom:.5rem}.post p+img{margin-bottom:1rem}.post p img{border:1px solid #eee;display:block;max-width:100%}.post img+.caption,.post img+figcaption{padding-top:.5rem}.post .svg-container{margin-bottom:5%;max-width:100%;text-align:center}figure{padding-bottom:1em}video{height:auto;max-width:100%}.post .svg-container object{width:100%}.tag-list{display:inline-block;list-style-type:none;margin:0;padding:0;padding-bottom:1rem}.tag-list-item{display:inline-block;margin-left:.8em}.pagination{padding-bottom:1rem;text-align:center}.pagination a{min-width:30px;max-height:30px;text-align:center}footer{border-top:1px dashed #ddd;padding:2em;text-align:center}.timing-stats{font-size:.7em;padding:.35em}.button{background-color:#fff;border:1px solid #555;border-radius:2rem;color:#555;display:inline-block;padding:.5rem 1rem;transition:background-color .15s ease-out}.button:hover{background-color:#3498db;border-color:transparent;color:#fff}.button.inactive{background-color:#ccc;color:#fff}.search-goog input{border:2px solid #ddd;padding:10px}.search-goog input[type=submit]{background-color:#ddd;cursor:pointer}@media (max-width:768px){#page,.wrapper{margin:0;max-width:100%;width:100%}.wrapper{padding-top:2rem}.wraper::after{clear:both;content:"";display:block}}.outscreen{height:1px;left:-1000px;overflow:hidden;position:absolute;top:auto;width:1px}.callout{border:1px solid #eee;border-left-color:#777;border-left-width:5px;border-radius:3px;font-size:.9rem;padding:20px;margin:20px 0}.author{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:.8rem;margin-bottom:1rem}.author .name{line-height:1rem;padding-top:.5rem}.bd,.media{overflow:hidden;zoom:1}.media .img{float:left}.avatar-img{border-radius:100%;height:3rem;margin-right:.5rem;width:3rem}code[class*=language-],pre[class*=language-]{color:#393a34;font-family:Consolas,"Bitstream Vera Sans Mono","Courier New",Courier,monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:.85em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}code[class*=language-] ::-moz-selection,code[class*=language-]::-moz-selection,pre[class*=language-] ::-moz-selection,pre[class*=language-]::-moz-selection{background:#b3d4fc}code[class*=language-] ::selection,code[class*=language-]::selection,pre[class*=language-] ::selection,pre[class*=language-]::selection{background:#b3d4fc}pre[class*=language-]{padding:1em;margin:.5em 0;overflow:auto;border:1px solid #ddd;background-color:#fff}:not(pre)>code[class*=language-]{padding:.2em;padding-top:1px;padding-bottom:1px;background:#f8f8f8;border:1px solid #ddd}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#998;font-style:italic}.token.namespace{opacity:.7}.token.attr-value,.token.string{color:#e3116c}.token.operator,.token.punctuation{color:#393a34}.token.boolean,.token.constant,.token.entity,.token.inserted,.token.number,.token.property,.token.regex,.token.symbol,.token.url,.token.variable{color:#005cc5}.token.keyword{color:#d73a49}.token.atrule,.token.attr-name{color:#6f42c1}.token.deleted,.token.function{color:#6f42c1}.token.selector{color:#00009f}.token.tag{color:#22863a}.token.class-name{color:#6f42c1}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.caption,figcaption{display:block;font-size:.8rem;text-align:center}.codepen-aspect-ratio>iframe{height:100%;position:absolute;width:100%}.twitter-tweet{margin-left:auto;margin-right:auto}.twitter-tweet::after{content:"";display:block;padding-bottom:20px;width:100%}.me{max-width:22rem;margin:0 auto 1rem;text-align:center}.me>div{height:8rem;margin:0 auto;position:relative;width:8rem}.me svg{border-radius:100%;height:100%;left:0;position:absolute;top:0;width:100%}.me img{border-radius:100%;height:100%;position:relative;width:100%}.me h1{font-size:1.7rem;line-height:2rem;margin-bottom:.5rem}.read-next{background-color:#fdf6ea;margin:2rem 0;padding:1em}@media (prefers-color-scheme:dark){body{background:#38444c;color:#eee}a{color:#9dcae8}a:hover{color:#fff}p a{border-bottom:1px solid #6d7a82}p a:hover{border-bottom:1px solid #fff}h1,h2,h3,h4,h5{color:#eee}a:hover h1,a:hover h2,a:hover h3,a:hover h4,a:hover h5{color:#4b89b1}.button:hover{background-color:#4b89b1}code,pre{color:#ddd}.main-header{background-color:#4b89b1}.read-next{background-color:#020915}}.amp-img-wrapper{position:absolute;height:100%;width:100%}</style><link href=/data-fetching-universal-appsamp/ rel=amphtml><link href=https://webmention.io/jmperezperez.com/webmention rel=webmention /><link href=https://webmention.io/jmperezperez.com/xmlrpc rel=pingback /><meta content=#005689 name=theme-color><link href=/manifest.json rel=manifest><meta content="Hexo 5.4.0" name=generator></head><body><header class=main-header><nav id=menu><a href=/ >Blog</a> <a href=/projects/ >Projects</a> <a href=/talks/ >Speaking</a> <a href=/about-me/ >About</a></nav></header><div id=page><article class=wrapper><div class=post><header><script type=application/ld+json>{
  "@context": "http://schema.org",
  "@type": "BlogPosting",
  "headline": "Some things I learned implementing Data Fetching for Universal Web Apps",
  
  "description": "Webpack and Browserify generate large bundles if we include Node.JS code to be run on the browser. In this post you will learn how to prevent this issue.",
  
  "mainEntityOfPage":{
      "@type":"WebPage",
      "@id":"https://jmperezperez.com//data-fetching-universal-apps"
  },
  "datePublished": "2016-07-16T15:40:00.000Z",
  "dateModified": "2018-12-16T17:51:46.000Z",
  
  "image": {
    "@type": "ImageObject",
    "url": "https://jmperezperez.com/assets/images/posts/universal-data-fetching.png",
    "width" : "540",
    "height" : "480"
  },
  
  "author": {
      "@type": "Person",
      "name": "Jose M. Perez",
      "url": "https://jmperezperez.com",
      "sameAs": [
        "http://www.linkedin.com/in/jmperezperez",
        "https://twitter.com/jmperezperez"
      ]
  },
  "publisher": {
      "@type": "Organization",
      "name": "Jose M. Perez's Blog"
      
      ,
      "logo": {
        "@type": "ImageObject",
        "url": "https://jmperezperez.com/assets/images/logo.png",
        "width": 600,
        "height": 60
      }
      
  }
}</script><div class="media author"><div class=img><a href="/about-me/?ref=post-header"><img alt="" src=https://res.cloudinary.com/jmperez/image/upload/w_120,f_auto,c_scale/v1519156883/profile_ysrm5y.jpg class=avatar-img height=53 sizes=53px width=53></a></div><div class=bd><address class=name itemprop=author itemscope itemtype=https://schema.org/Person><a href=/about-me/ itemprop=name>José M. Pérez</a></address><meta content=2016-07-16T15:40:00.000Z class=post-data itemprop=datePublished>July 16, 2016<span style="margin:0 .5rem;display:inline-block">|</span> Reading Time: ~<time>6 mins</time></div></div><h1>Some things I learned implementing Data Fetching for Universal Web Apps</h1></header><p>Javascript is not just a language for the browser. Node.JS is becoming popular as a platform to run JS on the server. We are learning how to build modular websites where business logic and state are not coupled with the markup. And finally we are getting the tools to build universal web apps. But what are universal apps, and why should we care about data fetching?</p><span id=more></span><h2 id=Universal-Isomorphic-apps><a href=#Universal-Isomorphic-apps class=headerlink title="Universal/Isomorphic apps"></a>Universal/Isomorphic apps</h2><p>The community hasn’t decided on what to call them yet, but for the sake of consistency I’ll be referring to them as <em>universal</em> web apps. These projects have 2 main features:</p><ul><li>The server runs JS</li><li>Most of the code of the project is shared between browser and server.</li></ul><p>For a long time we tangled business logic with markup. We would generate some HTML in the server and JS would run in the client to make AJAX requests and changes in the DOM.</p><p>This worked for most websites, but today lots of projects start as a SPA. Their state is managed in a single place and the server just provides the initial page and a set of endpoints that return data to the view. But this approach has caused <a href=https://blog.twitter.com/2012/improving-performance-on-twittercom rel=noopener target=_blank>long page load times</a> and bad SEO forced rethinking the web.</p><p>The best way to provide fast-loading pages is to server-side render them. Though service workers might help eventually, the initial request needs to reach the server. To compose the page, the server needs to identify the user, fetch some data and generate the markup through some template system. After the initial load, JS comes in and replaces full page loads with some data fetching and markup composition.</p><p>Here we can see that some code will be duplicated, especially in SPAs. A way to improve this is by running JS in the server and trying to write code that is decoupled from the DOM. Server-side rendering can be seen these days as an enhancement for SPAs.</p><h2 id=Data-fetching-in-universal-apps><a href=#Data-fetching-in-universal-apps class=headerlink title="Data fetching in universal apps"></a>Data fetching in universal apps</h2><p>In universal apps, most of the code can be shared between browser and server. One of the pieces that differs is data fetching. Node.JS has its own way to make requests, and neither <code>XMLHttpRequest</code> nor <code>fetch</code> is supported. <img alt="Universal request libraries abstract your code from how a request is made." src=/assets/images/posts/universal-data-fetching.png></p><p>There exists many libraries that will perform the async requests using the mechanism available in the platform running the code. Some of them try to polyfill <code>fetch</code> in Node, others polyfill <code>http</code> in the browser. In our code we <code>require</code>/<code>import</code> them, and then the code is included in the bundle served to the browser using browserify or webpack.</p><h3 id=Choosing-a-universal-request-package><a href=#Choosing-a-universal-request-package class=headerlink title="Choosing a universal request package"></a>Choosing a universal request package</h3><p>Regardless of which request library one you choose, <strong>be aware of how they contribute to the bundle size</strong>. Ideally, these libraries should represent a rather small chunk of the bundle, but I have been doing some tests and the results are pretty interesting.</p><p>I have used browserify to create a bundle just requiring each of there libraries separately, and then uglified the output. The size shown is minified, not gzipped:</p><ul><li><a href=https://github.com/jedmao/iso-http rel=noopener target=_blank>iso-http 0.0.5</a>: 4kB</li><li><a href=https://github.com/matthew-andrews/isomorphic-fetch rel=noopener target=_blank>isomorphic-fetch 2.2.1</a>: 9kB</li><li><a href=https://github.com/visionmedia/superagent rel=noopener target=_blank>superagent 2.0.0</a>: 9kB</li><li><a href=https://github.com/mzabriskie/axios rel=noopener target=_blank>axios 0.13.0</a>: 20kB</li><li><a href=https://registry.npmjs.org/isomorphic-request rel=noopener target=_blank>isomorphic-request 1.0.0</a>: 240kB</li><li><a href=https://github.com/bitinn/node-fetch rel=noopener target=_blank>node-fetch 1.5.3</a>: 489kB</li></ul><p>Note that these packages might not have the same features, and I haven’t tried most of them myself. In some cases it might be worth creating your custom request library accesses the endpoints you are using. But all in all these libraries should generate code that wraps <code>XMLHttpRequest</code> and its response.</p><p>Notice the big difference in size between them, all the way from 4kB to 489kB. How can that be? For that we need to understand what is going on when our code is bundled.</p><h3 id=Bundling-of-Node’s-APIs><a href=#Bundling-of-Node’s-APIs class=headerlink title="Bundling of Node’s APIs"></a>Bundling of Node’s APIs</h3><p>Something I learnt while creating those bundles is that it is very useful to double check the generated code. <strong>If the required code includes some feature only available in Node, the bundler will add the JS code for it in the output bundle.</strong></p><p>An example is <code>Buffer</code>, which <a href=https://github.com/thelinmichael/spotify-web-api-node/blob/cf9b5834b828b38b659afd82fb85ae742d5ea0eb/src/spotify-web-api.js#L1241 rel=noopener target=_blank>I was using in a wrapper for the Spotify Web API</a>. Since <code>Buffer</code> is not supported in the browser environment, which accounts to 44kB of JS (minified).</p><p>Same thing can happen with these request libraries when they include code that is supposed to be only run in Node.JS and not on the browser.</p><h3 id=The-browser-field><a href=#The-browser-field class=headerlink title="The browser field"></a>The <code>browser</code> field</h3><p>When you are bundling some JS code that is going to be run only on the server, do not include it in the bundle that is going to be run on the browser. This applies both if you are writing a site and if you are writing a library that will be used by another project.</p><p>For this, use the <a href=https://github.com/defunctzombie/package-browser-field-spec rel=noopener target=_blank><code>browser</code> field</a> in the <code>package.json</code> file. It is used, amongst others, to define what file needs to be replaced by other when bundling. When using webpack, make sure <a href=https://webpack.github.io/docs/configuration.html#target rel=noopener target=_blank><code>target</code></a> is not set or set to <code>&#39;web&#39;</code>.</p><p>You can see an example <a href=https://github.com/visionmedia/superagent/blob/83892f35fe15676a4567a0eb51eecd096939ad36/package.json#L54 rel=noopener target=_blank>in the superagent source code</a>:</p><pre class=language-js><code class=language-js><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"superagent"</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
  <span class="token string">"browser"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token string">"./lib/node/index.js"</span><span class="token punctuation">:</span> <span class="token string">"./lib/client.js"</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"./lib/node/index.js"</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre><p>or <a href=https://github.com/jedmao/iso-http/blob/33870ab0ee79d93e73ad55d787c99c5f5e07f936/package.json#L6 rel=noopener target=_blank>iso-http</a>:</p><pre class=language-js><code class=language-js><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"iso-http"</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"js/node/Http.js"</span><span class="token punctuation">,</span>
  <span class="token string">"browser"</span><span class="token punctuation">:</span> <span class="token string">"js/browser/Http.js"</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre><p>From the libraries I tested, 4 of them were using <code>browser</code> and 2 of them not. These 2 are precisely the ones that generate the largest bundle files.</p><h3 id=Getting-stats-about-a-bundle><a href=#Getting-stats-about-a-bundle class=headerlink title="Getting stats about a bundle"></a>Getting stats about a bundle</h3><p>It is not straightforward to know what modules are contributing the most size to the output bundle. One way you can try is by creating an entry JS file that only includes the module you are interested in, which is what I did when comparing request libraries. But if you are using webpack, a better way is to use <a href=https://github.com/chrisbateman/webpack-visualizer rel=noopener target=_blank>webpack-visualizer</a>.</p><p>This tool generates a pie chart with all the required dependencies and makes it straightforward to find the culprit. <img alt="iconv-lite and pako are the main contributors to node-fetch bundle size" src=/assets/images/posts/node-fetch-webpack-stats.png> <em>^ iconv-lite and pako are the main contributors to node-fetch bundle size</em></p><h3 id=One-more-thing-ES6-imports><a href=#One-more-thing-ES6-imports class=headerlink title="One more thing: ES6 imports"></a>One more thing: ES6 imports</h3><p>A great way to reduce the footprint of a library is by exporting it in pieces. Thanks to ES6 and tree-shaking, one can import a subset of functions and symbols from a library, which can reduce largely the size of the output bundle.</p><p>This is really useful if you are implementing a wrapper for your API endpoints. It is convenient to support all the endpoints, but an app might only be interesting in using a few of those.</p><p>I have started experimenting with this building <a href=https://github.com/JMPerez/spotify-web-api-js-poc rel=noopener target=_blank>a new wrapper for the Spotify Web API</a> that exposes each endpoint as an exported function, so that the unused endpoints are not part of the generated code.</p><h2 id=Conclusion><a href=#Conclusion class=headerlink title=Conclusion></a>Conclusion</h2><p>Universal apps are great, and so is sharing lots of code between server and client. As important as a fast rendering time is the time it takes the browser to download, parse and execute the JS that provides the client-side functionality. Keep an eye on your imports, and prevent including code that is not intended to be run on the browser.</p></div><hr/>Tags:<ul class=tag-list itemprop=keywords><li class=tag-list-item><a href=/tags/browserify/ rel=tag class=tag-list-link>browserify</a></li><li class=tag-list-item><a href=/tags/isomorphic/ rel=tag class=tag-list-link>isomorphic</a></li><li class=tag-list-item><a href=/tags/node/ rel=tag class=tag-list-link>node</a></li><li class=tag-list-item><a href=/tags/universal/ rel=tag class=tag-list-link>universal</a></li><li class=tag-list-item><a href=/tags/webpack/ rel=tag class=tag-list-link>webpack</a></li></ul></article></div><script>"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("/sw.js").then(function(n){}).catch(function(n){})})</script><footer><section class=links><a href=https://twitter.com/jmperezperez rel="me noopener" target=_blank>@jmperezperez</a> on Twitter · <a href=https://github.com/JMPerez rel="me noopener" target=_blank>GitHub</a> · <a href=https://www.linkedin.com/in/jmperezperez rel=noopener target=_blank>LinkedIn</a> · <a href=https://medium.com/@jmperezperez rel=noopener target=_blank>Medium</a></section><div class=timing-stats></div></footer><script>window.addEventListener("load",()=>{setTimeout(()=>{var e,r,t=window.performance&&performance.timing;function i(e){return Math.round(100*e)/100}t&&(e=document.querySelector(".timing-stats"),r="This page loaded in "+i((t.loadEventEnd-t.navigationStart)/1e3)+" seconds. ",performance.getEntriesByType("paint").forEach(function(e,t,n){var a=e.name;"first-paint"===a?a="<abbr title="+a+">FP</abbr>":"first-contentful-paint"===a&&(a="<abbr title="+a+">FCP</abbr>"),r+=a+" was "+i(e.startTime/1e3)+" seconds. "}),r+='<a href="https://jmperezperez.com/page-load-footer/">More info</a>.',e.innerHTML=r)},0)})</script><script async src=/quicklink.js></script><script async src=https://unpkg.com/turbolinks@5.2.0/dist/turbolinks.js data-turbolinks-suppress-warning></script></body></html>