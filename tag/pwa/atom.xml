<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jose M. Perez&#39;s Blog</title>
  <subtitle>Web development, performance, and some other good practices.</subtitle>
  <link href="/tag/pwa/atom.xml" rel="self"/>
  
  <link href="https://jmperezperez.com/"/>
  <updated>2021-12-14T07:52:53.543Z</updated>
  <id>https://jmperezperez.com/</id>
  
  <author>
    <name>Jose M. Perez</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What PWAs for Desktop means for Users and Developers</title>
    <link href="https://jmperezperez.com//pwas-on-desktop"/>
    <id>https://jmperezperez.com//pwas-on-desktop</id>
    <published>2019-03-19T07:15:00.000Z</published>
    <updated>2021-12-14T07:52:53.543Z</updated>
    
    <content type="html"><![CDATA[<p>As Progressive Web Apps make their way on desktop I wanted to talk about why I consider this is a breakthrough. I have talked in the past <a href="/shades-of-pwa/">about different uses cases for PWA</a>. In this post I want to focus on PWAs for desktop.</p>
<div style="position:relative;padding-bottom:76.47%;margin-bottom:1rem">
<img
    loading="lazy"
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1552998597/spotify-pwa-mac_szshj0.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1552998597/spotify-pwa-mac_szshj0.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1552998597/spotify-pwa-mac_szshj0.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1552998597/spotify-pwa-mac_szshj0.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1552998597/spotify-pwa-mac_szshj0.png"
    alt="A screenshot of Spotify's Web Player running as Progressive Web App" />
</div>

<p>The current version of Google Chrome stable is Chrome 73. This version <a href="https://twitter.com/rauschma/status/1105599978880331777">lets you install Progressive Web Apps natively on macOS</a>. You can find more information about the release on <a href="https://developers.google.com/web/updates/2019/03/nic73#pwas-everywhere">Pete LePage‚Äôs ‚ÄúNew in Chrome 73‚Äù notes</a>.</p>
<span id="more"></span>

<p>Wasn‚Äôt this possible before? Well, yes. On Chrome 72 the only option was to <a href="https://developers.google.com/web/fundamentals/app-install-banners/#listen_for_beforeinstallprompt">wait for a <code>beforeinstallprompt</code> event</a> to then show some button on your page to let the user install the website as a PWA. Since version 73 users can install the PWA directly from Chrome‚Äôs context menu.</p>
<p>Now, going back to why this is a milestone. <a href="https://twitter.com/jmperezperez/status/1107565909906997250">I recently tweeted about how to install Spotify‚Äôs web player as a PWA</a> using Chrome‚Äôs context menu.</p>
<p>I got this great question:</p>
<blockquote class="twitter-tweet" data-lang="en-gb"><p lang="en" dir="ltr">What benefit does this give you vs the regular downloaded desktop app? (Sorry for the ignorance üòÖ)</p>&mdash; Functor Flavius ùù∫ (@FlavioCorpa) <a href="https://twitter.com/FlavioCorpa/status/1107782132791947271?ref_src=twsrc%5Etfw">18 March 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="Understanding-What-to-Optimize-for"><a href="#Understanding-What-to-Optimize-for" class="headerlink" title="Understanding What to Optimize for"></a>Understanding What to Optimize for</h2><p>If you are working on a new website you will see that PWAs for desktop is a nice addition to your site. Users who want to run it as a desktop app can do it. This has some obvious benefits, nicely summarized on <a href="https://developers.google.com/web/progressive-web-apps/desktop">Pete LePage‚Äôs ‚ÄúDesktop Progressive Web Apps‚Äù article</a>:</p>
<blockquote>
<p>They‚Äôre fast. Feel integrated because they launched in the same way as other apps, and run in an app window, without an address bar or tabs. They‚Äôre reliable because service workers can cache all of the assets they need to run. And they create an engaging experience for users.</p>
</blockquote>
<p>If you have been working on a project that was a desktop app, the question can be the opposite: <strong>‚ÄúWhat benefit does a desktop app gives you vs the website?‚Äù</strong>. We have seen this battle over and over again on the mobile landscape, with apps vs mobile web. The main advantage of an app is its discoverability, through the Play Store / App Store, but more than that is the presence on your home screen. When you install the app on your phone it‚Äôs there on your grid of apps. You will see the icon easily and you will open it with just a tap. You might get notifications if you opt-in, which will be a good way for the app owner to let you re-engage with you. Doing this on the web is possible, but more difficult. The discoverability is less straightforward. Knowing that a web site can be installed is not that obvious.</p>
<p>Discoverability is great, but companies look at other important metrics that installable apps excel at against the web: <strong>retention and engagement</strong>. If you have a shortcut to an app on your home screen you will be more likely to use the app than if you don‚Äôt have it. Same thing if you get push notifications. And in the case of Spotify‚Äôs desktop application you will even get the app open automatically when you start your computer. It‚Äôs difficult not to engage with it.</p>
<p>For services with both app and website there is also another aspect that is usually disregarded. Users that have downloaded and installed your app have higher intention of using the app than those that only only the web version. It‚Äôs natural to think that the end goal is to take users to the platform that has better metrics, so the web is usually seen as a place to put banners and modals that beg the user to install the app.</p>
<p>What is ignored is that in the way towards the installable app <strong>there will be many users abandoning because they don‚Äôt want to, or can‚Äôt, download and install the app</strong>.</p>
<p>Retention and engagement was one of the reasons why Spotify keeps developing a desktop application, but also capabilities. A desktop application allowed performant music streaming in the days when network was the bottleneck. It also let premium users download music to be played offline. And it also had a much better integration with the operating system (eg adding custom buttons to the Touch Bar on MacOS, or custom taskbar buttons on Windows).</p>
<div style="position:relative;padding-bottom:75%;margin-bottom:1rem">
<img
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1552998304/spotify-mac-touch-bar_q7ywci.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1552998304/spotify-mac-touch-bar_q7ywci.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1552998304/spotify-mac-touch-bar_q7ywci.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1552998304/spotify-mac-touch-bar_q7ywci.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1552998304/spotify-mac-touch-bar_q7ywci.jpg"
    alt="Picture of a Macbook Pro running the Spotify app, with custom controls in the Touch Bar" />
</div>

<h2 id="What-the-Web-can-Do"><a href="#What-the-Web-can-Do" class="headerlink" title="What the Web can Do"></a>What the Web can Do</h2><p>The web has been ticking off most of these. Take for instance offline capabilities with encrypted content which <a href="https://www.youtube.com/watch?v=--KA2VrPDao">Paul Lewis explained how to implement two years ago</a>.</p>
<p>For companies that currently have 2 implementations of their service, one as an app and another as a website, the question should be ‚Äúis the cost of developing 2 different versions of the same thing worth it?‚Äù. And in most cases PWA for desktop means that, at least on desktop, there is no strong advantage in having the overhead of developing multiple versions. This is especially true in the case that the code base of these versions differs greatly, as in the case of Spotify‚Äôs desktop app and web player.</p>
<p>The web has also a couple of great benefits over a hybrid app on desktop. Push notifications encourage users to go back to your site even if it‚Äôs not open currently on a browser. And more importantly, the web makes it extremely easy to deliver feature updates and fixes (bug fixes, security fixes, code roll backs). No need to go through release cycles nor app store approvals. Having every user on the latest version is a great perk that should be more appreciated.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As I wanted to highlight, for the user the good news is that there are no news. They can install a PWA as a desktop application and won‚Äôt miss any ‚Äútruly desktop app‚Äù capabilities. For a company, though, this can save a lot of duplicated work, help their developers move faster and deliver the best experience for the user regardless of their device.</p>
<p>Because the web was always great for this.</p>
]]></content>
    
    <summary type="html">
    
      Progressive Web Apps for desktop fills an important gap for the web. Native apps might not be worth thanks to the new capabilities of the web
    
    </summary>
    
    
      <category term="pwa" scheme="https://jmperezperez.com/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>My 2018</title>
    <link href="https://jmperezperez.com//my-2018"/>
    <id>https://jmperezperez.com//my-2018</id>
    <published>2018-12-30T05:00:00.000Z</published>
    <updated>2021-12-14T07:52:53.538Z</updated>
    
    <content type="html"><![CDATA[<p>As I expected, this year I have dedicated more time to my family and less to side projects. I have been on parental leave for 7 months and it has been a great time to put things in perspective.</p>
<span id="more"></span>

<h2 id="Blogging"><a href="#Blogging" class="headerlink" title="Blogging"></a>Blogging</h2><p>During 2018 I wrote 8 blog posts. This is way lower than <a href="/my-2017/">last year</a>.</p>
<p>The main highlight was that I got to publish <a href="https://www.smashingmagazine.com/2018/02/progressive-image-loading-user-perceived-performance/">a post on Smashing Magazine on user perceived performance</a>. I enjoyed the experience a lot and their support helped me writing posts with a better structure. I also like seeing that it gets referenced in posts <a href="https://calendar.perfplanet.com/2018/improving-perceived-performance-web-app/">like this from Perfplanet‚Äôs Performance Calendar</a>.</p>
<h2 id="Side-projects"><a href="#Side-projects" class="headerlink" title="Side projects"></a>Side projects</h2><p>I started a project with <a href="https://twitter.com/nucliweb">Joan Le√≥n (aka @nucliweb)</a> to do performance reviews of web sites and explain our findings as videos. We both like talking about performance and realized that lots of developers don‚Äôt know where to start when improving it, and lots of stakeholders in general don‚Äôt give performance the importance it deserves.</p>
<p>The videos are in Spanish and we want to take it as an opportunity to make it easier for a huge community to access knowledge that exists mainly in English. If you are interested in having a look, check out <a href="https://www.youtube.com/channel/UCNoF5_1loBFvW2lZXPxp8ww">our channel on Youtube</a>.</p>
<h2 id="Conferences"><a href="#Conferences" class="headerlink" title="Conferences"></a>Conferences</h2><p>This year I spoke at <a href="/pitercss-2018/">PiterCSS in Saint Petersburg</a>, <a href="https://www.meetup.com/Stockholm-ReactJS-Meetup/events/253918039/">ReactJS in Stockholm</a>, <a href="https://www.meetup.com/Stockholm-Google-Developer-Group/events/255690962/">GDG in Stockholm</a>, and <a href="https://noti.st/jmperez/bSkEUc/better-performance-for-component-based-web-apps">Codemotion in Madrid</a>.</p>
<h2 id="Certifications"><a href="#Certifications" class="headerlink" title="Certifications"></a>Certifications</h2><p>I became a <a href="https://developers.google.com/experts/people/jose-manuel-perez-perez">Google Developer Expert in Web Technologies</a>, which got me in contact with an amazing community of developers who are pushing the web forward in different fronts. It‚Äôs also great to have contacts from Google at hand to know more about their web initiatives.</p>
<h2 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h2><p>Parental leave meant changes for me. I came to the conclusion that I wanted to make a professional move after 6+ years working at Spotify. I still don‚Äôt know if I just loved my work too much or became too attached to some projects I wanted to see succeed (which they did). Truth is that I woke up some day and realized I needed to push myself a bit enough out of my comfort zone, and that would bring positive experiences.</p>
<h2 id="What‚Äôs-next-in-2019"><a href="#What‚Äôs-next-in-2019" class="headerlink" title="What‚Äôs next in 2019?"></a>What‚Äôs next in 2019?</h2><p>In a few days I will start working at Facebook and I‚Äôm excited to take on new challenges. It will be a new role for me, taking a step back from the web, looking at a bigger picture to use technology to unlock business opportunities.</p>
<p>This is a big change for me and I‚Äôm looking forward to find out what the future looks like.</p>
]]></content>
    
    <summary type="html">
    
      Wrapping up 2018 - A summary of what I have done during this year.
    
    </summary>
    
    
      <category term="pwa" scheme="https://jmperezperez.com/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>The different shades of Progressive Web¬†Apps</title>
    <link href="https://jmperezperez.com//shades-of-pwa"/>
    <id>https://jmperezperez.com//shades-of-pwa</id>
    <published>2018-11-02T12:44:00.000Z</published>
    <updated>2021-12-14T07:52:53.536Z</updated>
    
    <content type="html"><![CDATA[<p>Implementing a PWA or adapting an existing site to ‚Äúbecome a PWA‚Äù can be daunting. There are many new technologies to learn about, but you don‚Äôt need to use all of them to improve your website performance and user experience greatly.</p>
<div style="position:relative;padding-bottom:66.6666%;margin-bottom:1rem">
<img
    loading="lazy"
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1541172389/shades-of-pwa/header.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1541172389/shades-of-pwa/header.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1541172389/shades-of-pwa/header.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1541172389/shades-of-pwa/header.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1541172389/shades-of-pwa/header.jpg"
    alt="" />
</div>

<p>On this post I will describe several use cases where Progressive Web Apps (PWA) can be useful to make your website achieve better performance and be more reliable.</p>
<span id="more"></span>

<h2 id="What-are-Progressive-Web-Apps"><a href="#What-are-Progressive-Web-Apps" class="headerlink" title="What are Progressive Web¬†Apps"></a>What are Progressive Web¬†Apps</h2><p>If you are a web developer you have probably heard about Progressive Web Apps (PWA). Web sites that load quick, are reliable, feel smooth and take advantage of modern APIs.</p>
<p>There is a lot of buzz about them, partly because Google coined the term and has been leading the implementation of the bits and pieces that composed it.</p>
<p>Implementing a PWA or adapting an existing site to ‚Äúbecome a PWA‚Äù looks like a big endeavor. The same powerful marketing that has made PWA known in the developer community can be a blessing and a curse. Developers might get the wrong idea that either they use everything and make installable offline-capable push notifications-enabled websites, or they bail out. After all, <strong>PWA is just a way to coin a set of recent browser APIs and techniques, not all or nothing</strong>.</p>
<p>Every website‚Äôs use case is different and that is alright. If installing your website as an app is not something a user would do for your site, you don‚Äôt need to build that capability. <strong>You can still take advantage of some of the technologies powering PWAs</strong>. The main requirement is that your site runs on HTTPS and, in most cases, creating a ServiceWorker, which is not more than a Javascript file.</p>
<p>I want to describe some of the typical scenarios where you can applied elements from PWAs.</p>
<h2 id="Common-Use-Cases-to-Apply-Service-Workers-and-other-PWA-related-functionality"><a href="#Common-Use-Cases-to-Apply-Service-Workers-and-other-PWA-related-functionality" class="headerlink" title="Common Use Cases to Apply Service Workers and other PWA-related functionality"></a>Common Use Cases to Apply Service Workers and other PWA-related functionality</h2><h3 id="Offline-mode-and-pre-caching"><a href="#Offline-mode-and-pre-caching" class="headerlink" title="Offline mode and pre-caching"></a>Offline mode and pre-caching</h3><p>To get your site to load without a connection, the user needs to visit it and the site needs to run a Service Worker (SW)that will make content available offline. The SW can follow different strategies (eg serving cache first, making a network request first, etc). You can find strategies on <a href="https://jakearchibald.com/2014/offline-cookbook/">Jake Archibald‚Äôs Offline Cookbook</a> and <a href="https://serviceworke.rs/">serviceworke.rs</a>.</p>
<div style="position:relative;padding-bottom:49%;margin-bottom:1rem">
<img
    style="max-width:100%; border: 0; position: absolute; top: 0; left: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1541172749/shades-of-pwa/stale-while-revalidate-sw.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1541172749/shades-of-pwa/stale-while-revalidate-sw.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1541172749/shades-of-pwa/stale-while-revalidate-sw.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1541172749/shades-of-pwa/stale-while-revalidate-sw.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1541172749/shades-of-pwa/stale-while-revalidate-sw.png"
    alt="Stale-while-revalidate‚Äù strategy, of the many explained on Jake Archibald‚Äôs Offline Cookbook" />
</div>

<p><small class="caption">‚ÄúStale-while-revalidate‚Äù strategy, of the many explained on <a href="https://jakearchibald.com/2014/offline-cookbook/">Jake Archibald‚Äôs Offline Cookbook</a>. If there‚Äôs a cached version available, use it, but fetch an update for next¬†time.</small></p>
<p>The strategies that check the cache first can be used to fetch and pre-cache top-level navigation routes and other critical resources. Thus, the user gets a faster loading and rendering experience as they click around the PWA.</p>
<p>Offline support is something that can be added pretty much to any site, big or small. I run <a href="https://jmperezperez.com/sw.js">a simple SW</a> <a href="https://jmperezperez.com/">on my blog</a> to download the main sections and the posts that the user reads.</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// the cache version gets updated every time there is a new deployment</span>
<span class="token keyword">const</span> CACHE_VERSION <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CURRENT_CACHE <span class="token operator">=</span> <span class="token template-string"><span class="token string">`main-$&amp;#123;CACHE_VERSION&amp;#125;`</span></span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// these are the routes we are going to cache for offline support</span>
<span class="token keyword">const</span> cacheFiles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'/about-me/'</span><span class="token punctuation">,</span> <span class="token string">'/projects/'</span><span class="token punctuation">,</span> <span class="token string">'/offline/'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// on activation we clean up the previously registered service workers</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'activate'</span><span class="token punctuation">,</span> evt <span class="token operator">=</span><span class="token operator">></span>
  evt<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>
    caches<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
        cacheNames<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cacheName <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheName <span class="token operator">!==</span> CURRENT_CACHE<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> caches<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// on install we download the routes we want to cache for offline</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'install'</span><span class="token punctuation">,</span> evt <span class="token operator">=</span><span class="token operator">></span>
  evt<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>
    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>CURRENT_CACHE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>cache <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cacheFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// fetch the resource from the network</span>
<span class="token keyword">const</span> fromNetwork <span class="token operator">=</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fulfill<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fulfill</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">update</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// fetch the resource from the browser cache</span>
<span class="token keyword">const</span> fromCache <span class="token operator">=</span> request <span class="token operator">=</span><span class="token operator">></span>
  caches
    <span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>CURRENT_CACHE<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>cache <span class="token operator">=</span><span class="token operator">></span>
      cache
        <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>matching <span class="token operator">=</span><span class="token operator">></span> matching <span class="token operator">||</span> cache<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'/offline/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// cache the current page to make it available for offline</span>
<span class="token keyword">const</span> update <span class="token operator">=</span> request <span class="token operator">=</span><span class="token operator">></span>
  caches
    <span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>CURRENT_CACHE<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>cache <span class="token operator">=</span><span class="token operator">></span>
      <span class="token function">fetch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// general strategy when making a request (eg if online try to fetch it</span>
<span class="token comment" spellcheck="true">// from the network with a timeout, if something fails serve from cache)</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'fetch'</span><span class="token punctuation">,</span> evt <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  evt<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>
    <span class="token function">fromNetwork</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fromCache</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  evt<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span><span class="token function">update</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>With great power comes great responsibility. Do not use SWs to abuse the user‚Äôs data connection, downloading content they will never need, just in case.</p>
<h3 id="Service-Workers-for-Multi-page-Applications"><a href="#Service-Workers-for-Multi-page-Applications" class="headerlink" title="Service Workers for Multi-page Applications"></a>Service Workers for Multi-page Applications</h3><p>In a multi-page app (MPA), every route that a user navigates to triggers a full request of the page, along with associated scripts and styles needed, to the server.</p>
<p>A good example is <a href="https://ele.me/">ele.me</a>, the biggest food ordering and delivery company in mainland China. They used a SW to precache the main routes from their site, and implemented skeleton screens that are immediately shown while loading routes that aren‚Äôt cached.</p>
<div>
<img
src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:350,f_auto,c_scale,w_600/v1541171672/shades-of-pwa/ele-me-skeleton-page.png"
sizes="(max-width: 768px) 50vw, 350px" alt="Processing a picture through Primitive using 10 shapes" style="width:48%;float:left;margin-right:2%;padding-bottom:10px" />
<img
src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:350,f_auto,c_scale,w_600/v1541171587/shades-of-pwa/ele-me-full-load.png"
sizes="(max-width: 768px) 50vw, 350px" alt="Processing a picturethrough Primitive using 100 shapes" style="width:48%;float:left;margin-right:2%;padding-bottom:10px" />
</div>

<p>You can read more about their approach on <a href="https://developers.google.com/web/showcase/2017/eleme">Google Developers site</a> and <a href="https://medium.com/elemefe/upgrading-ele-me-to-progressive-web-app-2a446832e509">this in-depth post</a>.</p>
<h3 id="Bridging-the-gap-between-SPAs-and-server-side-rendered-sites"><a href="#Bridging-the-gap-between-SPAs-and-server-side-rendered-sites" class="headerlink" title="Bridging the gap between SPAs and server-side rendered¬†sites"></a>Bridging the gap between SPAs and server-side rendered¬†sites</h3><p>Web development has gone through different stages</p>
<ol>
<li> Old sites used to be server-side rendered. Only minor interactions used Javascript in the client. Every page navigation meant a full page load.</li>
<li> Then we started creating more complex web experiences and moved all the logic (and templates) to client-side land. Everything was amazing as long as you waited a bit while staring at a blank page whose main purpose was to load a large JS bundle.</li>
<li> We realized that maybe we needed a hybrid solution. First request server-side rendered, then the rest happening client-side.</li>
</ol>
<p><strong>Reaching the third step involves doing server-side rendering.</strong> If you don‚Äôt want to duplicate templates and logic, the usual solution is to use NodeJS on the server. This is fun for web developers because we get to use the same language both on server and browser. In medium and large web projects it means rewriting existing working code from python/java/PHP/others to Javascript, and the typical nuances of adopting something different from the existing solution.</p>
<p>Server-side rendered sites have also a largely underestimated drawback. <strong>Putting content early on the screen is one thing. Making the content interactive is another.</strong> A page that renders quickly but then doesn‚Äôt respond to click/touch for seconds, while loads and executes the JS behemoth, results in frustration.</p>
<p>In web dev terms we are improving the <a href="https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint">First Meaningful Paint</a> (‚ÄòFMP‚Äô), but we aren‚Äôt making any improvement in the <a href="https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive">Time to Interactive</a> (‚ÄòTTI‚Äô).</p>
<p>This short version of Addy Osmani‚Äôs ‚ÄúThe cost of JavaScript‚Äú explains it very well:</p>
<div class="videoWrapper">
    <iframe width="1764" height="1080" src="https://www.youtube.com/embed/qUFA1pAMfj4" frameborder="0" allowfullscreen loading="lazy"></iframe>
</div>

<p><small class="caption">‚Äú<a href="https://www.youtube.com/watch?v=qUFA1pAMfj4">The cost of JavaScript</a>‚Äù by Addy Osmani. If you like it, there is also <a href="https://www.youtube.com/watch?v=63I-mEuSvGA">a longer version of the talk.</small></p>
<p>Paul Lewis also described the situation in his post ‚Äú<a href="https://aerotwist.com/blog/when-everything-is-important-nothing-is/">When everything is important nothing is</a>‚Äù, and describes it as the <em>Uncanny Valley.</em></p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1541171412/shades-of-pwa/uncanny-valley.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1541171412/shades-of-pwa/uncanny-valley.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1541171412/shades-of-pwa/uncanny-valley.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1541171412/shades-of-pwa/uncanny-valley.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1541171412/shades-of-pwa/uncanny-valley.jpg"
    alt="Spotify web player shows an offline page when there is no internet connection" />
<small class="caption">Rendering your app server-side. An image from ‚Äú<a href="https://aerotwist.com/blog/when-everything-is-important-nothing-is/">When everything is important nothing¬†is</a>‚Äù.</small></p>
<p>I have seen many cases when server-side rendering was proposed as the first step to improve the performance in a SPA. This left off the table ideas like bundle-splitting, which would have likely reduced both FMP and TTI.</p>
<blockquote>
<p>[‚Ä¶] <strong>you should avoid SSR if you don‚Äôt need it.</strong> Most modern web apps require sophisticated interaction with the UI that has to be driven by non-trivial amounts of JavaScript. If you need to write all of that JS anyway, and you <em>don‚Äôt</em> need the first page load benefits that SSR gives you, you‚Äôll be better off just building a <a href="https://developers.google.com/web/fundamentals/architecture/app-shell">static app shell</a> and avoiding the headaches of client-server code reuse, data re-hydration, and dynamic content cache invalidation.‚Ää‚Äî‚Ää<a href="https://blog.usejournal.com/when-should-i-server-side-render-c2a383ff2d0f">When should I Server-Side Render?</a> by <a href="https://blog.usejournal.com/@mbleigh">Michael Bleigh</a></p>
</blockquote>
<p>Single Page Applications that are not server-side rendered can take great advantage from using Service Workers. In most cases the browser requests some data and injects it in a JS template or component. This means that the browser can cache the JS code and the data independently.</p>
<p>The site can then follow different strategies. For instance, it can load immediately with stale data, similar to what usually happens with native apps. It can also decide to render a skeleton while the data is fetched. In any case, it makes an approach like <a href="https://developers.google.com/web/fundamentals/performance/prpl-pattern/">PRPL</a>, easy to implement.</p>
<h3 id="Installable-Website"><a href="#Installable-Website" class="headerlink" title="Installable Website"></a>Installable Website</h3><p>You might want to make your website installable, close to what everyone knows as an ‚Äúapp‚Äù. For this you don‚Äôt need many to use many capabilities from the web. As long as your site runs on HTTPS you just need a web manifest, an icon and a ServiceWorker. You can find documentation on <a href="https://developers.google.com/web/fundamentals/app-install-banners/">Google‚Äôs Developer site</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/Apps/Progressive/Installable_PWAs">MDN</a>.</p>
<p>Your site doesn‚Äôt need to be fully functional offline to make it installable. Take for instance Spotify‚Äôs Progressive Web App.</p>
<div class="videoWrapper">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/EvcjSldzQ1E" frameborder="0" allowfullscreen loading="lazy"></iframe>
</div>

<p><small class="caption">Spotify‚Äôs Web Player works as an installable PWA.</small></p>
<p>As you see, the PWA is installable, yet it doesn‚Äôt have support for offline navigation nor playback. When there is no connection, the PWA shows this custom page:</p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1541171689/shades-of-pwa/spotify-offline.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1541171689/shades-of-pwa/spotify-offline.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1541171689/shades-of-pwa/spotify-offline.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1541171689/shades-of-pwa/spotify-offline.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1541171689/shades-of-pwa/spotify-offline.png"
    alt="Spotify web player shows an offline page when there is no internet connection" /></p>
<p>Installable PWAs are not limited to mobile. They are already supported on <a href="https://developers.google.com/web/progressive-web-apps/desktop">ChromeOS, Windows and Linux</a>, and pretty soon on Mac too (Chrome 72+).</p>
<h4 id="More-features-enabled-by-Service-Workers"><a href="#More-features-enabled-by-Service-Workers" class="headerlink" title="More features enabled by Service¬†Workers"></a>More features enabled by Service¬†Workers</h4><p>I have only talked about some use cases for ServiceWorkers and other elements of PWAs, but there are more. Browsers can show <a href="https://developers.google.com/web/fundamentals/push-notifications/">push notifications</a> after the user has enabled it for a certain site, and the push notifications are delivered even when the site is not opened. This makes it ideal for reengage with users without having to wait for them to visit your site again.</p>
<p>You can also use <a href="https://developers.google.com/web/updates/2015/12/background-sync">background sync</a>, ideally for schedule data sending beyond the life of the page. Think of uploading pictures or sending chat messages even after the user leaves the page.</p>
<h3 id="More-Resources"><a href="#More-Resources" class="headerlink" title="More Resources"></a>More Resources</h3><p>I love reading about real sites that have adopted PWAs and have shared their findings. I particularly like <a href="https://www.youtube.com/watch?v=aCMbSyngXB4">Addy Osmani‚Äôs talk ‚ÄúProduction Progressive Web Apps With JavaScript Frameworks‚Äù</a>, showcasing some case studies from large web sites that have been integrating these technologies to improve their key metrics.</p>
<div class="videoWrapper">
    <iframe width="1764" height="1080" src="https://www.youtube.com/embed/aCMbSyngXB4" frameborder="0" allowfullscreen loading="lazy"></iframe>
</div>

<p>They are good examples to demonstrate that you don‚Äôt need to re-architecture an existing site to use PWA goodness, and that you can apply some of these concepts and see improvements in perceived performance very quickly.</p>
]]></content>
    
    <summary type="html">
    
      Taking advantage of PWA functionality on your site is easy. You don&#39;t need to go all-in using all the features. Just take what is needed for your use case.
    
    </summary>
    
    
      <category term="pwa" scheme="https://jmperezperez.com/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>Hablando sobre PWA en el podcast WeCodeSign</title>
    <link href="https://jmperezperez.com//wecodesign-pwa"/>
    <id>https://jmperezperez.com//wecodesign-pwa</id>
    <published>2017-10-03T16:00:00.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Esta semana se ha publicado <a href="http://wecodesignpodcast.com/2017/10/03/progressive-web-apps/">el podcast sobre Progressive Web Apps</a> que grab√© con Ignacio Villanueva y Carmen Ansio para WeCodeSign.</p>
<span id="more"></span>

<p>En √©l hablamos sobre qu√© son las PWA, c√≥mo se originaron y c√≥mo podemos implementarlas. Tambi√©n compartimos algunos recursos √∫tiles que nos har√°n m√°s f√°cil trabajar con Service Workers.</p>
<p><a href="http://wecodesignpodcast.com/2017/10/03/progressive-web-apps/"><img src="/assets/images/posts/wecodesign-pwa.jpg" alt="WeCodeSign Progressive Web Apps"></a></p>
<p><a href="http://wecodesignpodcast.com/">WeCodeSign</a> es uno de los podcasts l√≠deres sobre desarrollo y dise√±o en espa√±ol, y ha sido un honor formar parte de √©l. Pod√©is escucharlo desde su web, en <a href="https://itunes.apple.com/es/podcast/wecodesign-podcast/id1113501272">iTunes</a>, <a href="http://www.ivoox.com/escuchar-audios-wecodesign-podcast_al_5101204_1.html">iVoox</a>, <a href="http://www.spreaker.com/user/8737490">Spreaker</a> y <a href="https://www.podkas.com/directorio/weckdesign-podcast-de-httpstwitter-comwecodesign/">Podkas</a>.</p>
<hr>
<h2 id="Transcripcion"><a href="#Transcripcion" class="headerlink" title="Transcripci√≥n"></a>Transcripci√≥n</h2><p><strong>[Ignacio Villanueva] En el programa de hoy hablaremos sobre las Progressive Web Apps ,que es un t√©rmino que se acu√±a a una nueva generaci√≥n de aplicaciones que se basa en las nuevas tecnolog√≠as web para incrementar su funcionalidad. Tenemos el placer de contar con Jos√© Manuel P√©rez, desarrollador web en Spotify.</strong></p>
<p><strong>Os dejamos con la entrevista, esperamos que la disfrut√©is, y como siempre nos vemos al final.</strong></p>
<p><strong>Una vez m√°s traemos a un invitado nuevo como siempre. Esta vez es un desarrollador que no trabaja en Espa√±a y nos contar√° un poco acerca del tema y vamos a hablar sobre Progressive Web Apps.</strong></p>
<p>As√≠ que bienvenido, Jos√© Manuel.</p>
<p>[Jos√© M. P√©rez]
Hola, muchas gracias. Pues s√≠, soy un desarrollador web, llevo unos diez a√±os pr√°cticamente haciendo web. Estudi√© inform√°tica en la Universidad de Alicante. Por aquel entonces la web era un desconocido. Como parte del plan de estudios estudiabas c√≥mo hacer aplicaciones WAP. Pr√°cticamente hacer aplicaciones m√≥viles utilizando J2ME era lo √∫nico que hab√≠a y ten√≠as que luchar t√∫ un poquito para encontrar alguna asignatura optativa donde se utilizara web y, bueno, hoy en d√≠a la verdad es que la situaci√≥n ha cambiado bastante. Y nada, me alegro un mont√≥n de que la web sea mucho m√°s importante que antes. Llevo cinco a√±os trabajando en Spotify en Estocolmo trabajando haciendo web h√≠brida para m√≥vil, aplic√°ndolo a la aplicaci√≥n de m√≥vil aplicando web tambi√©n a la aplicaci√≥n h√≠brida de escritorio, utilizando web para implementar la aplicaci√≥n para televisi√≥n y para PlayStation y √∫ltimamente estoy trabajando en el reproductor web. As√≠ que nada, est√° s√∫perbien porque te das cuenta de que puedes desarrollar utilizando el mismo lenguaje y pr√°cticamente tienes acceso a cualquier plataforma. Esto viene un poco tambi√©n de cuando sol√≠a trabajar en Tuenti en el sitio m√≥vil de Tuenti, tambi√©n ah√≠ estuve haciendo cosillas para hacer una aplicaci√≥n h√≠brida. Tambi√©n se integraban ciertas vistas dentro de la aplicaci√≥n nativa.</p>
<p>Y nada, asegur√°ndote de que la web funcionara en Nintendo DS, en PSP (PlayStation Portable), en la Blackberry 8520 que es lo que utilizaba todo el mundo. Y la verdad es que en esos momentos es cuando te das cuenta de que no puedes asumir nada, que un navegador tenga Javascript no significa que vaya a tener la capacidad de funcionar como te esperas, que haya una funci√≥n declarada no significa que vaya a funcionar luego. As√≠ que aprend√≠ bastante a hacer lo que se llama Progressive Enhancement para asegurarte de que funciona con HTML y CSS y luego ya a√±adir funcionalidad con Javascript.</p>
<p>He sido bastante defensor de ese paradigma, aunque √∫ltimamente est√° siendo un poco complicado con todo el desarrollo de Javascript pr√°cticamente basado en el lado de cliente. Esto es un poco lo que he estado haciendo √∫ltimamente.</p>
<p><strong>[I] Bueno, una pasada, porque la verdad es que hasta ahora, por lo menos que nos hayan comentado, no hemos tenido ning√∫n invitado ni ninguna invitada que nos haya hablado sobre desarrollo Javascript para PSPs ni tecnolog√≠as un poco m√°s antiguas, en este caso consolas.</strong></p>
<p>[J] En aquel momento yo trabajaba en Tuenti y la mayor√≠a de usuarios eran j√≥venes, se conectaban a Internet con lo que pod√≠an, normalmente utilizaban wifi, no ten√≠an una conexi√≥n de datos. Se conectaban tarde, por la noche, pr√°cticamente a escondidas de los padres, utilizando la consola o lo que pod√≠an tener a mano. De hecho la misma aplicaci√≥n m√≥vil funcionaba tanto en estas consolas port√°tiles como en la PlayStation 3 por ejemplo. Era un desaf√≠o bastante grande porque adem√°s utilizaban Netfront como navegador, no era WebKit, y daban un mont√≥n de problemas. Una de las razones por las que me interes√≥ Spotify es porque ten√≠an una plataforma para desarrollar aplicaciones web dentro de la aplicaci√≥n de escritorio. Hoy en d√≠a es una cosa un poco m√°s normal. Los que usamos Slack sabemos que tiene una versi√≥n web y otra de escritorio que es pr√°cticamente lo mismo, Whatsapp tambi√©n tiene una versi√≥n web y Telegram lo mismo. Se est√°n viendo m√°s y m√°s ejemplos de aplicaciones que pueden correr tanto en webs como ser empaquetadas para poder instalarlas. En aquel entonces era una cosa bastante novedosa y es algo que me gustar√≠a tratar en el tema de hoy; esta moda de Progressive Web Apps y hablar un poco de lo que ten√≠amos antes y a lo que vienen a sustituir.</p>
<blockquote>
<p>PWA es un t√©rmino de marketing, no se corresponde con ninguna versi√≥n nueva del est√°ndar de Javascript. Muchas veces lo comparo con Web 2.0 o HTML5.</p>
</blockquote>
<p><strong>[Carmen Ansio] ¬øNos podr√≠as explicar as√≠ resumidamente que es una Progressive Web App?</strong></p>
<p>[J] Pues lo primero que voy a decir es que es un t√©rmino de marketing, no se corresponde con ninguna versi√≥n nueva del est√°ndar de Javascript, ni nada parecido. Muchas veces lo comparo con Web 2.0 o HTML5. HTML5 s√≠ era una versi√≥n nueva pero en realidad estamos hablando de todas estas APIs nuevas para poder desarrollar aplicaciones web o sitios web para los que les vamos a ir a√±adiendo alguna una funcionalidad.</p>
<p>El t√©rmino Progressive Web App lo acu√±√≥ Alex Russell y Frances Berriman que eran 2 desarrolladores de Google. Hace un par de a√±os escribieron <a href="https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/">un post</a> y describ√≠an el t√©rmino como websites que son responsive, que se parecen a aplicaciones nativas, que se puede instalar en la pantalla de inicio y que en algunos casos soportan modo offline. Es bastante interesante porque Alex estuvo hace poco explicando, <a href="https://twitter.com/slightlylate/status/879458731519389697">en una serie de tweets</a>, c√≥mo surgi√≥ el tema y el t√©rmino PWA.</p>
<p>Hay mucha gente a la que no le gusta lo de Progressive Web Apps y no entiende por qu√© es ‚Äúapp‚Äù y no es ‚Äúsite‚Äù. En cuanto lees sobre el tema b√°sicamente te dicen que PWA no es un t√©rmino ara los desarrolladores, sino para para tu jefe. Es un t√©rmino para el inversor, para el que va a hacer campa√±a de marketing de tu sitio. Es una forma de continuar construyendo proyectos en la web de forma abierta, que parezcan una aplicaci√≥n y que normalmente tu compa√±√≠a quiere hacer como aplicaci√≥n nativa y no como web. Y la quieren hacer tres veces: una vez para Android, otra para iOS y otra, si pueden para Windows Phone. Al final es otra forma de decir que tenemos una serie de APIs, vamos a llamarla de alguna forma y con eso a ver si la gente se siente atra√≠da y lo identifica como algo cool, algo novedoso, y que valga la pena verlo.</p>
<p>Esto lo escribieron ellos cuando estaban evaluando si ten√≠an que tender hacia desarrollar aplicaciones para Chrome utilizando su sistema propietario, o ten√≠an que ir m√°s hacia un sistema m√°s abierto, que es lo que defend√≠an Alex y Francis. Se sentaron y estuvieron hablando sobre c√≥mo unificar en un t√©rmino esa funcionalidad de a√±adir a la pantalla de inicio, ServiceWorkers, notificaciones push y dem√°s,</p>
<p>Cuando los desarrolladores escuchamos Progressive Web App tenemos que parar por un momento y pensar qu√© quiere decir, qu√© hay detr√°s. Google est√° promoviendo PWA y lo hace como una marca. Nosotros tenemos que verlo como un conjunto de herramientas que tenemos que tomar y aplicar a nuestras webs si as√≠ lo queremos. Muchas compa√±√≠as que estaban centradas en desarrollar aplicaciones nativas ahora ven la web como una alternativa v√°lida.</p>
<blockquote>
<p>Hay mucha gente nueva en Internet en muchos pa√≠ses emergentes que no quiere descargar. Las tarifas de datos son car√≠simas y quieren consumir contenido directamente, sin pasar por el proceso de instalaci√≥n.</p>
</blockquote>
<p><strong>[I] S√≠ porque adem√°s hace tiempo que se demuestra que muchos usuarios se instalan cinco aplicaciones en el m√≥vil y el resto no las abren nunca m√°s. Son las t√≠picas de mensajer√≠a instant√°nea, de redes sociales y las 2 extra de turno que se usen por el motivo que sea. Hay gente que obviamente s√≠ usa m√°s aplicaciones, los que estamos m√°s en la web porque somos desarrolladores o m√°s frikis, como queramos llamarlo. Supongo que depende un poco de cada perfil. Pero no hay que olvidar que la inmensa mayor√≠a no somos nosotros que es todo el resto de personas que usan muy muy muy muy poquitas cosas.</strong></p>
<p>[J] Hasta ahora, para las empresas el objetivo era estar en las tiendas de aplicaciones y √©sta era la √∫nica forma de obtener visibilidad. Si no estaban ah√≠ el usuario no iba a poder descubrir la aplicaci√≥n. Hubo un boom de aplicaciones que pr√°cticamente no serv√≠an para nada. Para usar una aplicaci√≥n tengo que pasar por todo el proceso de encontrar la aplicaci√≥n, descargarla e instalarla, ocupando un espacio en el tel√©fono. En occidente, que hemos crecido con smartphones y tenemos buenas tarifas de datos, tenemos todav√≠a la costumbre de estas aplicaciones. Pero hay mucha gente nueva en Internet en muchos pa√≠ses emergentes que no quiere descargar. Las tarifas de datos son car√≠simas y quieren consumir contenido directamente, sin pasar por el proceso de instalaci√≥n.</p>
<p>Es curioso porque yo trabajo en Spotify y siempre tenemos este dilema de si debemos promocionar las aplicaciones nativas (por ejemplo descargar la aplicaci√≥n de escritorio) y qu√© casos de uso cubre un reproductor web. ¬øPuede reemplazar un reproductor web a la aplicaci√≥n de escritorio? Este tipo de conversaciones las tenemos casi todos los d√≠as. Hay un mont√≥n de empresas que est√°n viendo que tienen que ir hacia web si quieren estar donde va a estar el pr√≥ximo bill√≥n (mil millones) de usuarios. Lo vemos con Twitter y Uber, que hace poco lanz√≥ su mobile site, y con muchos otros. Habitualmente son compa√±√≠as de India y de China las que m√°s est√°n empujando por este tipo de desarrollos.</p>
<p>Creo que es un buen momento para explicar que hay detr√°s de las PWAs y qu√© engloban.</p>
<p><strong>[I] Perfecto, cu√©ntanos un poco porque obviamente ya hemos dicho que no son tecnolog√≠as completamente nuevas. Es un Progressive Enhancement, que se ven√≠a haciendo desde hace ya mucho tiempo. Los que desarrollamos para web debemos tener en cuenta tecnolog√≠as m√°s antiguas y dispositivos m√°s antiguos para que tengan una m√≠nima experiencia. Luego vamos sumando funcionalidades para llegar a dar a nuestros usuarios lo que creemos que es mejor para ellos, o lo que creemos que ayuda al negocio en este caso.</strong></p>
<p>[J] Yo creo que al final eso es lo que tenemos que hacer. Nos tenemos que centrar en qu√© quiere el usuario y ver cu√°l es la soluci√≥n t√©cnica. Muchas veces cuando aparece este tipo de tecnolog√≠as todo el mundo quiere utilizarlas. Intentan un proyecto en el que aplicarlas, cuando en realidad deber√≠a ser al contrario.</p>
<p>Cuando hablamos de PWAs lo hacemos principalmente de ServiceWorkers. A veces tambi√©n de a√±adir un manifest.json y notificaciones push. ServiceWorker es un fichero Javascript que el navegador se va a descargar una vez cargada la p√°gina y es capaz de interceptar peticiones. Cualquier petici√≥n que se haga a tu dominio va a ser capturada por este ServiceWorker. Ah√≠ ya puedes hacer lo que quieras: puedes devolver tu respuesta personalizada, puedes acceder a una cach√© si quiere devolver datos cacheados, etc. En resumen, es un proxy, un fichero Javascript que se pone en medio. Hay un mont√≥n de ‚Äúrecetas‚Äù (cookbook). Si busc√°is en google encontrar√©is muchas cosas que puedes con ServiceWorkers.</p>
<p>Por ejemplo vas a tu p√°gina web o blog y quieres poder volver a ver el contenido cuando no haya conexi√≥n a internet. En este caso puedes tener un ServiceWorker que se descarga el contenido para tenerlo accesible offline. Otro ejemplo es hacer una petici√≥n para obtener una imagen y que el ServiceWorker se encargue de devolver el formato que soporta el navegador, como por ejemplo webp.</p>
<p>La principal caracter√≠stica es offline, que no la ten√≠amos bien implementada hasta ahora. S√≠ que exist√≠a una tecnolog√≠a llamada Application Cache que pr√°cticamente nadie utilizaba porque era muy dif√≠cil de implementar, y que est√° soportada todav√≠a en iOS. Cuando hablamos de soporte para estas APIs siempre iOS y Safari quedan un poco fuera. √âsta es la tecnolog√≠a que ServiceWorker intenta reemplazar.</p>
<blockquote>
<p>Debemos hacer un uso justo y limpio de estas tecnolog√≠as o si no va a resultar en problemas y habr√° que establecer l√≠mites, lo que no es bueno para nadie.</p>
</blockquote>
<p><strong>[I] De hecho ahora mismo es el √∫nico navegador moderno que no tiene ServiceWorker integrado, frente a Chrome, Firefox, Opera o Samsung Web Browser.</strong></p>
<p>[J] Para ser correcto, en Edge est√°n trabajando en implementarlo y Safari ha anunciado que hay cierto inter√©s en implementarlo en su plan de aqu√≠ a 5 a√±os, as√≠ que con suerte llegar√°. Tambi√©n podemos hablar de la pr√°ctica empresarial de Google promoviendo PWAs frente a Apple, que no lo hace. Podemos ver que hay quiz√°s ciertos intereses detr√°s de estas decisiones.</p>
<p>Algo que tambi√©n permiten los ServiceWorkers es la sincronizaci√≥n background, de tal forma que no necesitas ni siquiera tener la pesta√±a abierta de tu p√°gina para poder acceder al contenido. Si despliegas una nueva versi√≥n de tu web puedes comprobar en un ServiceWorker instalado si hay una nueva versi√≥n y descargarte los assets. As√≠, una nueva petici√≥n del usuario a tu web puede usar directamente esos nuevos assets, cargando m√°s r√°pido.</p>
<p>Un problema es que con el poder de un ServiceWorker viene tambi√©n una gran responsabilidad. Mucha gente ve el hecho de hacer que una p√°gina funcione offline con una excusa para poder descargar toda la web por si acaso el usuario quiera acceder a una de las p√°ginas. Es algo que a m√≠ personalmente no me gusta. Por ejemplo si accedo a tu blog quiz√°s est√© interesado en ver esa p√°gina offline pero no me gustar√≠a que utilizaras mi conexi√≥n a internet para descargar todo el contenido y todas las im√°genes de tu blog para hacerlo disponible offline. Hay un conjunto de buenas pr√°cticas como por ejemplo mostrar un bot√≥n para que el usuario pueda hacer cierto contenido offline. Debemos ser cuidadosos en este aspecto. Cuando instalas una aplicaci√≥n en iOS o en Android ves cu√°ntos MBs te est√°s descargando, al menos para la instalaci√≥n inicial. Cuando accedes a una p√°gina web t√∫ no lo sabes, Debemos hacer un uso justo y limpio de estas tecnolog√≠as o si no va a resultar en problemas y habr√° que establecer l√≠mites, lo que no es bueno para nadie.</p>
<p><strong>[C] ¬øHay otros mecanismos de almacenamiento?</strong></p>
<p>[J] Cuando interceptas estas peticiones almacenas los datos en una cach√© y hay una forma de hacer que el contenido se almacene de forma temporal o persistente. El navegador considera que todo lo que descargas lo puede eliminar si lo necesita, pero hay una cierta cantidad de datos para los que puedes decir que por favor lo mantenga. Esto se calcula como un porcentaje del total de espacio disponible, teniendo en cuenta tambi√©n cookies y localStorage. Antes hab√≠a por ejemplo un l√≠mite de 5MB en localStorage. Ahora el navegador dedica un porcentaje del espacio de disponible en disco duro para almacenar datos. As√≠ que en principio no hay l√≠mite, y √©se es el problema. Desde una web puedes hacer una descarga grande hasta que el navegador se quede sin espacio y lance una excepci√≥n.</p>
<p>A la hora de implementar ServiceWorkers se puede hacer o bien a mano o utilizando una librer√≠a. Google tiene un par de librer√≠as buenas que para incluir en proyectos: una se llama <a href="https://github.com/GoogleChromeLabs/sw-toolbox">sw-toolbox</a> y la otra <a href="https://github.com/GoogleChromeLabs/sw-precache">sw-precache</a>. Hay 3 p√°ginas que me gustan bastante sobre ServiceWorkers. Una es una p√°gina de ejemplos que hay en googlechrome/samples y Jake Archibald, que trabaja en Google, tiene tambi√©n un <a href="https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/">documento muy bueno que se llama The Offline Cookbook</a>, y por √∫ltimo Mozilla tiene en <a href="https://serviceworke.rs/">serviceworke.rs</a> una lista de diferentes estrategias a la hora de implementar ServiceWorkers.</p>
<p><strong>[I] Pues luego las anotamos y las dejamos en el programa. Algo que has mencionado son las Push Notifications, que no s√© si van directamente ligadas con el hecho de usar una PWA, pero que es algo que va de la mano. Por ejemplo utilizando websockets, obtener informaci√≥n en directo y que vas recopilando en funci√≥n de cu√°ndo la env√≠as desde un servidor y el usuario va recibiendo ese feedback.</strong></p>
<p>[J] Todo esto se basa en ServiceWorkers porque al final necesitas tener algo corriendo. Si tu p√°gina no est√° en primer plano tienes que tener un ServiceWorker que es lo que se va a quedar ejecut√°ndose cuando el usuario cierra esa ventana o esa pesta√±a. Las notificaciones push son la misma notificaci√≥n push que se ve normalmente en una aplicaci√≥n. Va por otra v√≠a pero al final la parte visual es exactamente igual.</p>
<p>Las notificaciones push eran una de las razones principales por las que las empresas quer√≠an hacer aplicaci√≥n nativa. Una de las razones era el descubrir esa aplicaci√≥n, para lo cual necesitabas hacer una aplicaci√≥n nativa y ponerla en la tienda, la segunda era poder tener notificaciones push. Es √∫til para que el usuario vuelva a tu aplicaci√≥n y no es suficiente con que el usuario instale la aplicaci√≥n. Pr√°cticamente hoy tenemos acceso a todo lo que tiene acceso una aplicaci√≥n nativa.</p>
<p><strong>[I] Hay ciertas APIs que de momento funcionan ah√≠ ah√≠. Hablamos con tecnolog√≠as web sin tener algo de por medio como pueda ser PhoneGap o Ionic. Nosotros desarrollamos una plataforma con WebRTC y tuvimos un mont√≥n de problemas para implementarlo porque obviamente no est√° soportado en varios navegadores. Hasta Edge 14 √≥ 15 no funcionaba. Obviamente Internet Explorer tampoco. Safari no funcionaba hasta hace muy poquito o han dicho que lo van a implementar en la siguiente versi√≥n del sistema operativo y obviamente funcionaba en Chrome. Aunque Chrome es una gran mayor√≠a en uso a nivel mundial no hay que olvidar que hay muchos otros usuarios que no usan Chrome.</strong></p>
<p>[J] S√≠, y luego todos aquellos que usen iPhone est√°n fuera de momento de las PWAs. No es posible a√±adir una web a la pantalla de inicio y abrirlo a pantalla completa. Como dec√≠a, es un tema de marketing. PWA no deja de ser una web de toda la vida a la que le hemos a√±adido una funcionalidad extra para ponerlo en la pantalla de inicio y que no se abra el navegador, y soporte offline.</p>
<blockquote>
<p>ServiceWorker es un progressive enhancement, no puedes suponer que va a estar ah√≠.</p>
</blockquote>
<p><strong>[C] Hablando de ese soporte offline y de ServiceWorkers, he le√≠do el t√©rmino ‚Äúoffline first‚Äù. ¬øNos pod√≠as comentar un poco c√≥mo funciona?</strong></p>
<p>[J] Es gracioso porque estaba escuchando <a href="http://wecodesignpodcast.com/2017/07/04/mobile-first/">el podcast que hicisteis con Diana sobre Mobile First</a>. A veces nos hablan de offline first, a veces nos hablan de mobile first y a veces de content first cuando se habla sobre response design. Al final como desarrollador dices ¬øqu√© tengo que hacer?</p>
<p>La idea de offline first est√° muy bien, no dar nada por hecho, que tu web pueda funcionar sin conexi√≥n a internet. Pero a la hora de implementarlo viene la parte dif√≠cil porque al introducir ServiceWorkers normalmente introduces el cacheo de fichero Javascript y tambi√©n un sistema de templates. Para esto funciona muy bien utilizar librer√≠as como Preact o Vue, donde tienes los templates y tienes el JS y no tienes nada server-side. Esto es muy f√°cil de cachear. Tambi√©n offline se pod√≠a conseguir hasta ahora utilizando unas buenas cabeceras de respuesta. Muchas veces no hace falta utilizar ServiceWorkers si quieres que tu p√°gina siga funcionando o que no repitas una request. Es cuesti√≥n de decirle al navegador que cachee el contenido durante m√°s tiempo. Cuando hablan de offline first se entiende que no hay que asumir cu√°les son las condiciones de la red. Sup√≥n que no hay red, ¬øc√≥mo va a comportarse tu p√°gina?</p>
<p>Uno de las caracter√≠sticas de ServiceWorkers es que la primera vez que visitas una p√°gina, √©sta no se va a renderizar utilizando ServiceWorkers. El SW se a√±ade despu√©s, lo descarga el navegador y s√≥lo funciona para las siguientes peticiones. Es un progressive enhancement, no puedes suponer que el Service Worker va a estar ah√≠. Para que tu contenido sea offline primero tienes que visitar la web y tienes que poder cargar este ServiceWorker, que descargar√° el contenido. Me gusta offline first, igual que se suele pensar sobre qu√© pasar√≠a si no se pudiera descargar o ejecutar Javascript, en cuyo caso habr√≠a que hacer, por ejemplo, Server Side Rendering. O ¬øqu√© pasar√≠a si el usuario tiene problemas de accesibilidad, qu√© va a ocurrir con el contenido, va a ser le√≠do por lectores de accesibilidad? Todo esto al final va sumando y tenemos que pensar en una experiencia buena para que luego le a√±adamos funcionalidad. Y offline first no deja de ser otra m√°s. Cuesta mucho decidir qu√© va primero ¬øcontenido, mobile, offline? Son metodolog√≠as diferentes. Como desarrolladores a veces estamos cansados, hay un poco de fatiga con todo lo que sale nuevo y hay que leerlo e intentar decir ‚Äúvale, esto lo sit√∫o aqu√≠ y forma parte de mis herramientas para en alg√∫n momento determinado poder aplicarlas‚Äù.</p>
<p><strong>[I] Hay una p√°gina web de una desarrolladora que se llama [inaudible] que tiene un botoncito para hacer offline un post determinado, como dec√≠as t√∫ al principio ‚Äúquiero que este post en concreto, que me interesa escuchar a lo mejor cuando no tenga conexi√≥n‚Äù, pues lo guarda y te cachea las im√°genes y todo lo que tiene ese post. Ella graba con voz cada uno de los art√≠culos que escribe y deja que los escuches de forma offline si quieres. Creo que es una manera muy buena para dejar que el usuario decida si quiere descargar ese episodio o en este caso un art√≠culo y que lo pueda leer cuando va en el metro sin conexi√≥n. No nos olvidemos que aunque vivimos en grandes ciudades en much√≠simas ocasiones tenemos eso que llaman Lo-Fi. No tienes conexi√≥n suficiente porque est√°s dentro de un t√∫nel y durante un per√≠odo de tiempo determinado tienes una conexi√≥n realmente mala o directamente ninguna.</strong></p>
<p>[J] S√≠, tambi√©n lo llaman Lie-Fi, como que es un poco de mentira. Te dice que tiene wi-fi pero intenta descargar cosas por la wi-fi y no acaba de traerse nada. Yo creo que √©se es un buen caso de uso. Jake Archibald, que es uno de los ingenieros de Google que ha estado dando presentaciones sobre esto, tiene una PWA para ver art√≠culos de Wikipedia. Y tiene un bot√≥n para descargar un art√≠culo y poder leerlo luego. Creo que esa funcionalidad es muy buena. Yo tengo un blog y no uso JS para nada, excepto para un SW. Y si te quedas sin conexi√≥n puedes leer el post que estabas leyendo m√°s un par de enlaces m√°s que todo que tengo arriba en el men√∫. Y ya est√°, no necesitas nada m√°s. Est√° muy bien darle al usuario la posibilidad de que si quieren puedan descargar el contenido online. Me parece s√∫per bien y creo que √©se es el tipo de casos de uso que tenemos que intentar cubrir, y no intentar usarlo para todo s√≥lo porque es nuevo.</p>
<blockquote>
<p>Mucha gente cree que esto de las PWA es s√≥lo para sitios web grandes o de empresas importantes. En realidad puedes a√±adir un SW y manifest a cualquier web.</p>
</blockquote>
<p><strong>[I] Antes has hablado del Manifest. Aunque ya sabemos que es un JSON y que da ciertas funcionalidades como decir ‚Äúb√°jate este archivo, baja este otro‚Äù. ¬øPara qu√© otras cosas se puede utilizar el Manifest?</strong></p>
<p>[J] Yo creo que estaban un poco hartos de a√±adir cabeceras ‚Äúmeta‚Äù dentro dentro de las p√°ginas y decidieron crear un fichero donde definir un JSON con un mont√≥n de informaci√≥n que queremos tener para esta integraci√≥n. En Google lo llaman A2HS (Add to Home Screen) y es lo que va a utilizar el sistema operativo m√≥vil para poder abrir la aplicaci√≥n. T√∫ le dices con qu√© orientaci√≥n quieres abrirla y qu√© iconos quieres utilizar. Cuando implementas una PWA puedes comprobar dentro de tu c√≥digo si est√° corriendo en modo aplicaci√≥n (lanzada desde la pantalla de inicio) o si est√° corriendo dentro del navegador, utilizando display-mode. Si es standalone significa que est√° instalada y corriendo desde la pantalla de inicio. Est√° bien para analytics, para saber cu√°nta gente ha instalado la aplicaci√≥n y la est√° utilizando as√≠. Tambi√©n puedes utilizarlo para media-queries, para poder cambiar ligeramente en el estilo de la p√°gina dependiendo de si lo has lanzado desde la pantalla de inicio o no. Uno de los casos de uso ser√≠a mostrar botones de navegaci√≥n cuando lo lanzas en fullscreen.</p>
<p>Mucha gente cree que esto de las PWA es s√≥lo para sitios web grandes o de empresas importantes. En realidad puedes a√±adir un SW y manifest a cualquier web. Hay directorios de PWAs (por ejemplo <a href="https://pwa-directory.appspot.com/">PWA Directory</a> o <a href="https://pwa.rocks/">PWA Rocks</a>) a poder descubrir dentro de Bing PWAs y te va a ofrecer la posibilidad de instalarlas. Es una especie de store pero en lugar de t√∫ publicar ah√≠, Microsoft va a utilizar el mismo crawler que usan para Bing y va a poder mostrar ah√≠ directamente la web.</p>
<p>No creo que las PWAs est√©n restringidas a webs grandes y pienso que todo el mundo deber√≠a probarlas. Los desarrolladores deber√≠amos hacer pruebas con nuestras webs. Cuando empec√© a utilizar ServiceWorkers me di cabezazos contra el ordenador porque las herramientas de desarrollo no estaban muy desarrolladas, valga la redundancia. Cuando hac√≠a una petici√≥n no sab√≠a si la respuesta estaba viniendo del ServiceWorker o de verdad estaba sirviendo el fichero del servidor. Ten√≠asque buscar por ah√≠ un men√∫ hab√≠a muy oculto para activar la opci√≥n de que todas las peticiones dentro de localhost fueran directamente al fichero y que no se cacheen. Esto ha mejorado much√≠simo.</p>
<p>Tenemos muchas estrategias sobre c√≥mo hacer versionado de cach√©s. Cuando almacenas en ServiceWorker est√°s almacenando en la memoria del navegador. Si haces cambios en tu web y lanzas una nueva versi√≥n y versionas de la misma forma que versionas otros scripts, deber√≠as ser un buen ciudadano, acceder a la versi√≥n previa que ten√≠as cacheada y eliminarla del navegador. Si no al final vas a acumular un mont√≥n de bundles de Javascript o templates que ya no se necesitan.</p>
<p>S√© que hay alguna pregunta sobre utilizar PWAs con React, Vue y otras librer√≠as. Si hab√©is utilizado alguna vez Create React App, que es una especie de boilerplate para crear aplicaciones React, tambi√©n existe la posibilidad de utilizar estas mismas herramientas para crear PWAs. Create React App va a crear directamente por defecto una PWAs y, si utiliz√°is Preact, lanzaron su CLI para crearlas con Preact, y Vue tambi√©n tiene su CLI con el que se generan PWAs por defecto.</p>
<p><strong>[C] Como has comentado antes, Apple no tiene soporte para para PWAs. ¬øVes un poco de guerra entre Google y Apple?</strong></p>
<p>[J] A veces parece que s√≠, al igual que Internet Explorer no implementaba nada nuevo en su navegador y entonces sali√≥ Firefox que implementaba todo. Mucha gente se pas√≥ a Firefox y posteriormente a Chrome. Siempre existe esta guerra de navegadores y de las empresas que hay detr√°s. Me gusta mucho Google, que est√° empujando por estos est√°ndares. Si desarrollamos PWAs el usuario no necesitar√° ir a la Store a descargarse nada, y ahora mismo tanto puede Google com oApple se llevan un porcentaje cuando descargas aplicaciones de pago y tambi√©n de los pagos in-app. Al principio Apple s√≥lo ofrec√≠a herramientas web para desarrollar ‚Äúaplicaciones‚Äù para iPhone, no exist√≠a nada para hacer una aplicaci√≥n nativa. Todo giraba en torno a crear webs que tuviera el mismo look&amp;feel. Luego descubrieron que ah√≠ es donde estaba el negocio cuando empezaron a proporcionar estas herramientas para desarrollar aplicaciones nativas. Es dif√≠cil que vayas a ir en contra de tu principal fuente de ingresos. Google parece que tienen los ingresos m√°s diversificados. Al confiar en una plataforma de anuncios Google se va a llevar dinero por anuncio, que tambi√©n se muestran en la web (eg PWA).</p>
<p>Hay mucho trabajo para estandarizar estas APIs, implementarlas de una forma buena idea y de releasearlas. Pero estoy seguro de que tambi√©n hay decisiones de negocio. Google se ha posicionado claramente hacia promover esta serie de APIs, hacen workshops en varios sitios del mundo explicando c√≥mo usarlas, muestran c√≥mo diferentes webs est√°n implementando esta funcionalidad (qu√© problemas ten√≠an de rendimiento, c√≥mo han a√±adido PWAs y han ido mejorando, cu√°les son las m√©tricas que se ha movido como mayor retenci√≥n de usuarios o m√°s p√°ginas vistas). Trabajan codo con codo con empresas grandes como Flipkart - el ‚ÄúAmazon‚Äù de India - o ele.me, que es una empresa muy grande de China de venta de comida online.</p>
<p>Apple va un poco por su cuenta. Es verdad que Safari est√° cambiando, implementando mucha funcionalidad que faltaba, pero da la sensaci√≥n de que son reacios a implementar PWAs. Para entender mejor las razones pienso que es √∫til pensar c√≥mo puede afectar a las fuentes de ingresos que los desarrolladores migren a web. Las empresas tienen un n√∫mero limitado de trabajadores y muchas cosas que quieren hacer. Tienen que priorizar unas frente a otras y por lo que sea no est√°n priorizando los ServiceWorkers y toda la funcionalidad para a√±adir webs a pantalla de inicio para ejecutarlas de forma standalone.</p>
<p><strong>[I] Yo creo que en este caso Apple a lo mejor no tiene publicidad directa como hace Google, y le da un poco m√°s igual. Como tiene tant√≠simos beneficios a trav√©s de la App Store perder ese mercado, que es inmenso, es un peligro obviamente para ellos. Ahora mismo los que √∫ltimamente llegan tarde son Edge y Safari (Edge est√° mejorando un mont√≥n pero a√∫n quedan algunas cosillas) y, en mi opini√≥n, est√° claro por qu√© no lo est√°n implementando. Con la salida de Technology Preview, que es la versi√≥n de desarrollador, s√≠ est√° cambiando, pero le queda mucho para que, como pasa con Firefox y Chrome, se actualicen de forma constante.</strong></p>
<p>[J] Tambi√©n est√° la restricci√≥n de que no puedes correr ning√∫n navegador con otro motor. As√≠ que aunque t√∫ instales Chrome o Firefox en iPhone est√°s corriendo Webkit por detr√°s, el motor de Safari. Puedes personalizar la experiencia alrededor del navegador pero no implementar PWAs. Eso es una decisi√≥n de negocio, y ah√≠ no hay ninguna excusa. No puedes decir ‚Äúqueremos hacer el entorno m√°s seguro‚Äù. Podr√≠an utilizar el proceso de env√≠o y revisi√≥n de aplicaciones y que t√∫ pudieras ofrecer un motor de renderizado diferente. Es su ecosistema y controlan lo que ofrecen a los usuarios. El target de usuarios es diferente. Por ejemplo, en India o China el mercado de iOS es bastante m√°s peque√±o que en otros pa√≠ses de nuestro alrededor. Cada empresa juega sus cartas.</p>
<p>Como desarrolladores lo tenemos que ver como una funcionalidad a√±adida. Si lo soporta el navegador podemos utilizarlo y si no lo soporta, como hemos hecho bien nuestro trabajo, va a dar lo mismo porque el usuario va a poder disfrutar de nuestra web. Son APIs para mejorar nuestra web pero nunca tenemos que asumir que est√°n ah√≠. Y lo bueno de ServiceWorker es que no se puede asumir su soporte, dado que la primera vez que carga la p√°gina no se puede utilizar.</p>
<p><strong>[I] Si te parece pasamos las preguntas que nos han dejado por Twitter. Pregunta Manuel si has tocado Vue para las PWAs o si sabes alg√∫n recurso sobre ServiceWorkers y notificaciones push en castellano.</strong></p>
<p>[J] No he usado Vue todav√≠a. He estado leyendo sobre Vue pero me he enfocado m√°s en React, que lo estoy utilizando en un proyecto grande, y probando Preact e Inferno por cuestiones de tama√±o. Afortunadamente no necesitamos utilizar ninguna de estas librer√≠as para crear PWAs. Como dije, mi blog s√≥lo utiliza Javascript para crear un ServiceWorker y tener contenido offline. Las PWAs no requieren frameworks ni librer√≠as espec√≠ficos. Ni siquiera tienen que ser una SPA.</p>
<p>Recomiendo utilizar Vue CLI para crear PWAs con Vue. Habr√°n tomado algunas decisiones por ti, abstray√©ndote para bien o para mal de los detalles de implementaci√≥n, pero te servir√° para crear un esqueleto para una aplicaci√≥n.</p>
<p>Sobre recursos en espa√±ol hay una web que se llama ‚Äú<a href="https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/">Tu primera Progressive Web App</a>‚Äù y la escribi√≥ Pete LePage, que es un desarrollador de Google. Es una traducci√≥n al espa√±ol de la documentaci√≥n oficial. Es un muy buen recurso y es m√°s detallado que otros art√≠culos que se pueden encuentran en espa√±ol en Internet.</p>
<p><strong>[I] Fernando nos pregunta c√≥mo encajan con las PWAs Que, React y Angular.</strong></p>
<p>[J] Recomiendo que cada uno escoja el framework/librer√≠a con la que se sientan m√°s a gusto. Todas estas soluciones son similares y se pueden crear PWAs con ellas.</p>
<p><strong>[I] Fernando nos deja una segunda pregunta. Quiere saber si se adaptan los servicios workers correctamente a las aplicaciones h√≠bridas Ionic o PhoneGap.</strong></p>
<p>[J] Es una buena pregunta. Es dif√≠cil saber d√≥nde est√° la frontera entre entrar desarrollando una web que luego va a correr en una WebView, como en el caso de PhoneGap o Ionic. Tambi√©n hay alternativas nativas como ReactNative o NativeScript. Si est√°s desarrollando en iOS no vas a tener soporte para ServiceWorker independientemente de si es el navegador o si es una WebView porque no deja de ser el mismo navegador; no vas a tener soporte.</p>
<p>En el caso de Android no estoy seguro de c√≥mo funcionan los ServiceWorkers dentro de las WebViews. Por ejemplo, quiz√°s se cachea, quiz√°s se mantiene en memoria s√≥lo para esa WebView espec√≠fica. No he llegado a trabajar con PWAs dentro de una aplicaci√≥n h√≠brida.</p>
<p><strong>[C] Vamos a pasar a la tanda de preguntas que hemos. Manuel pregunta si puedes recomendar alg√∫n libro que hable sobre PWAs.</strong></p>
<p>[J] Hasta ahora no conoc√≠a ning√∫n libro sobre PWAs y me he puesto a buscar. Casualmente acaba de salir un libro que est√° en Early Release y se llama ‚Äú<a href="http://shop.oreilly.com/product/0636920052067.do">Building Progressive Web Apps: Bringing the Power of Native to the Browser</a>‚Äù de O‚ÄôReilly. El autor cre√≥ tambi√©n una librer√≠a que utilic√© para un proyecto llamada ‚Äúannyang‚Äù para hacer reconocimiento de voz.</p>
<p>Es m√°s habitual encontrar informaci√≥n sobre PWAs en posts (sobre todo los de Developer Relations de Google) y m√°s tarde llegan a libros.</p>
<p><strong>[C] A Manuel le gustar√≠a saber en qu√© orden se comienza a desarrollar este tipo de aplicaciones.</strong></p>
<p>[J] Primero haz una web bien y luego mej√≥rala. Considera PWA como un a√±adido. No intentes utilizar PWAs desde el principio o como una forma de solucionar problemas. Por ejemplo, si tienes problemas de performance no es buena idea que intentes solucionarlos con PWAs diciendo ‚Äús√≠, esto cacheo con un ServiceWorker y ya est√°‚Äù. Hay otras cosas que vas a tener que mirar antes.</p>
<p>Busca otras soluciones como por ejemplo hacer split del bundle: en lugar de mandar 1MB manda 200kB y luego carga el resto de forma as√≠ncrona. No veas PWAs como el martillo y cualquier problema como un clavo.</p>
<p><strong>[C] David nos hace la √∫ltima pregunta. Est√° interesado en saber que si el cliente sigue requiriendo una alternativa en forma de aplicaci√≥n para tenerla en las stores, ¬øqu√© tecnolog√≠a utilizar√≠as? ¬øCordova con React? ¬øReact Native?</strong></p>
<p>Es un problema porque aunque tengas una PWA es probable que te digan que la quieren ver en la tienda. Hay dos alternativas. Puedes implementar una aplicaci√≥n h√≠brida con Cordova o Ionic 2, que utiliza Angular, y la empaquetas dentro de un navegador. Tambi√©n puedes utilizar lo √∫ltimo de lo √∫ltimo y utilizar React Native. En este caso tienes que reescribir la vista porque los componentes van a ser diferentes. Lo bueno es que, si la has estructurado bien, puedes reutilizar toda la parte de negocio (por ejemplo Redux). Esta opci√≥n es buena si quieres tener una aplicaci√≥n con un muy buen rendimiento. Tambi√©n existe NativeScript, que se puede utilizar con Preact.</p>
<p>Independientemente de la soluci√≥n trata de desacoplar el c√≥digo. Intenta tener claro qu√© parte pertenece a la vista y cu√°l es l√≥gica de negocio. Mueve c√≥digo estable a una API, de forma que d√© igual cu√°l sea la interfaz que consume los datos. Esto te permite hacer cambios tanto en la API (por ejemplo reescribi√©ndola en otro lenguaje) como el front (por ejemplo, crear un nuevo cliente para otra plataforma o utilizar una librer√≠a diferente).</p>
<p>Lo que usas hoy se va a quedar ‚Äúanticuado‚Äù en un par de a√±os, as√≠ que siempre intenta modularizar el c√≥digo y optimiza para el mantenimiento y migraci√≥n del c√≥digo m√°s que esforzarse en acoplar tu proyecto demasiado con un framework.</p>
<p><strong>[I] Si te parece con esto cerramos las preguntas de Twitter y pasamos a la m√°s dif√≠cil. Dinos c√≥mo ves la web dentro de 5 √≥ 10 a√±os.</strong></p>
<p>[J] Pues es una pregunta dif√≠cil. Pienso en el desarrollo de los m√≥viles y es impensable lo que hac√≠amos hace cinco a√±os comparado con lo que hacemos ahora. Hace poco estuve en una charla donde un ponente dijo que somos la √∫ltima generaci√≥n que sabr√° lo que es un navegador y creo que el futuro de la web es olvidarse del concepto ‚Äúnavegador‚Äù, o por lo menos como la √∫nica forma de consumir contenidos en la web.</p>
<p>La web se integra ahora mismo en m√≥viles utilizando PWAs, pero tambi√©n como una Webview en una aplicaci√≥n nativa. Tenemos Chrome OS como el mejor ejemplo de c√≥mo ejecutar sitios web que funcionan como aplicaciones. Y tenemos tambi√©n ejemplos como AMP de Google donde generas contenido que luego va a estar directamente embebido dentro del buscador, o Instant Articles para integrar contenido en Facebook, y Apple News.</p>
<p>En mi trabajo me doy cuenta de que muchas veces la web se utiliza como un gran backend. Por ejemplo, Google indexa el contenido de Spotify y utilizando la web en la que trabajo (open.spotify.com), extrayendo metadatos para su buscador, que se muestran en un lateral al buscar artistas. Tambi√©n se utiliza para Google Home o Alexa de Amazon para su integraci√≥n con web. Y de forma similar, cuando compartes en Facebook o Twitter, sus bots utilizan metadatos extra√≠dos de la p√°gina para mostrar una previsualizaci√≥n.</p>
<p>Tenemos que dejar de pensar que hacemos webs que s√≥lo van a ser consumidas a trav√©s de un navegador. Creamos contenido utilizando herramientas web pero no tenemos ning√∫n control sobre d√≥nde se van a visualizar. Un ejemplo es WebVR, donde es dif√≠cil controlar el entorno, y no existe el concepto de ‚Äúp√°gina‚Äù.</p>
<p>Tenemos que mirar m√°s all√°, pensar en nuevas interfaces y cu√°l va a ser el papel de la web ah√≠ y olvidarse de controlar en entorno. Cuando llegaron los m√≥viles con navegador fue un desaf√≠o crear webs. ¬øUn sitio aparte? ¬øResponsive? Este problema es f√°cil comparado con lo que viene ahora.</p>
<p><strong>[C] ¬°S√≠ que est√° dif√≠cil saber lo que vendr√°! Si te parece entramos en las r√°fagas, y aqu√≠ va la primera. Dinos alguien que te haya inspirado.</strong></p>
<p>Me gustar√≠a mencionar gente con la que he trabajado y me ha inspirado. Me gust√≥ mucho trabajar en Tuenti con <a href="https://twitter.com/OrteslaCano">Alberto Grajera (@OrteslaCano)</a> que ahora est√° en Cabify, <a href="https://twitter.com/davideme">Davide Mendolia (@davideme)</a> que est√° en Karumi, y <a href="https://twitter.com/felipernb">Felipe Ribeiro (@felipernb)</a> con quien trabajo en Spotify. Son desarrolladores que sol√≠an hacer web, aunque algunos hacen ahora m√≥vil, y te recuerdan qu√© es lo importante cuando est√°s trabajando. La toma de requisitos, evaluar el problema con una mente ingenieril y no dejarse llevar por modas (por ejemplo √∫ltimas librer√≠as). A todos nos gusta utilizar lo √∫ltimo pero tenemos que anteponer el hecho de que hay un usuario detr√°s, que necesita ese proyecto a tiempo y que funcione bien. Hay una empresa que te est√° pagando por hacer el trabajo, y va a haber un compa√±ero que va a entrar a tu equipo y tiene que heredar o trabajar contigo en ese c√≥digo. Estas 3 personas me han ayudado mucho a centrarme en lo que de verdad es importante.</p>
<p>Hay gente conocida del mundo web que me gusta seguir, y que me han inspirado de una forma diferente. Steve Souders fue quien hizo reverse engineering de c√≥mo el navegador hac√≠a peticiones y gestionaba las dependencias entre ellas. Fue quien puso las bases de lo que hoy se conoce como WPO (Optimizaci√≥n de rendimiento web).</p>
<p><a href="https://twitter.com/slicknet">Nicholas C. Zakas</a>, que trabaja en Yahoo, hablaba sobre patrones para escribir Javascript mantenible. Stoyan Stefanov, que trabaja en Facebook, es otro track de Javascript. Algunos m√°s ‚Äúrecientes‚Äù son Addy Osmani, que es un devrel de Google que da muchas charlas muy entretenidas. Y por √∫ltimo <a href="https://twitter.com/dan_abramov">Dan Abramov</a>, que quien haya trabajado con Redux sabr√° que es quien responde cualquier pregunta sobre el tema, y trabaja en Facebook.</p>
<p><strong>[I] Los dejamos todos anotados para que la gente conozca a gente nueva, aprenda cosas nuevas y ampl√≠e sus horizontes. Recomi√©ndanos ahora un recurso, una p√°gina web o un blog que consideres imprescindible.</strong></p>
<p>No pod√≠a elegir s√≥lo uno, as√≠ que he escogido varios. Me gustan mucho las newsletter y estoy suscrito a <a href="https://frontendfoc.us/">Frontend Focus</a> y <a href="https://javascriptweekly.com/">Javascript Weekly</a>, que comparten muchos enlaces a posts y v√≠deos de conferencias.</p>
<p>Me gusta mucho ver v√≠deos de charlas, como por ejemplo los de las JSConf. Esta conferencia es de las principales en JS, las entradas son caras, pero publican todos los v√≠deos en Youtube, as√≠ que es un buen recurso para ponerse al d√≠a. Google IO, el evento anual de Google, publican muchos v√≠deos de sus charlas. Hace un par de meses fue la edici√≥n de 2017 y ya est√°n subidos.</p>
<p>Hay un par de webs que visito bastante: <a href="https://css-tricks.com/">CSS-Tricks</a> y <a href="https://www.smashingmagazine.com/">Smashing Magazine</a>, que hablan sobre frontend en general.</p>
<p>Un buen libro es ‚ÄúHigh Performance Browser Networking‚Äù de Ilya Grigorik, que es un ingeniero De Google. Te explica todo el stack, qu√© ocurre cuando se hace una petici√≥n y todos los puntos en los que podemos trabajar para mejorar el rendimiento de una web.</p>
<p><strong>[I] Perfecto. Igualmente lo dejamos apuntado para que la gente los pueda ver.</strong></p>
<p><strong>[C] Recomi√©ndanos ahora a un invitado o invitada a quien te gustar√≠a que invit√°semos al programa.</strong></p>
<p>[J] Jaume Sanchez Elias (<a href="https://twitter.com/thespite">@thespite en Twitter</a>) es un chico que hace WebGL, WebVR y cosas muy chulas. Hace poco coincid√≠ con √©l en una charla y me encant√≥ conocerlo. Es muy enriquecedor cuando conoces a gente puntera que es capaz de inspirar tanto a los desarrolladores web. Es impresionante lo que puede conseguir con estas herramientas. Jaume hace que parezca f√°cil, pero en realidad hay mucho trabajo detr√°s. Me gustar√≠a escuchar a Jaume hablar de estos temas.</p>
<p><strong>[I] Perfecto, pues le haremos llegar desde aqu√≠ la invitaci√≥n. Por √∫ltimo recomi√©ndanos un tema que te gustar√≠a tratar en el programa.</strong></p>
<p>[J] Soy un enamorado de mejorar la performance. Me gustar√≠a saber si le preocupa a los desarrolladores, si son capaces de convencer a la gente de producto de que es algo a lo que hay que dedicarle tiempo, y si se ve como una feature m√°s. Cu√°les son los casos pr√°cticos, si han introducido alguna mejora que se tradujera en m√°s usuarios u otras m√©tricas. Echo en falta ejemplos, sobre todo de empresas espa√±olas, donde se vean mejoras de rendimiento que hayan movido m√©tricas importantes para la empresa.</p>
<p><strong>[I] Muy bien, pues con esto cerramos el programa. La verdad es que ha sido un verdadero placer tenerte con nosotros. Hemos obtenido un mont√≥n de informaci√≥n y sobre temas √∫tiles para que a la gente le pique el gusanillo y se ponga a investigar y a realmente implementarlo.</strong></p>
<p>[J] Lo divertido es que es f√°cil jugar con nuestras webs, e inspeccionar el c√≥digo de cualquier web, aprendiendo de c√≥mo han aplicado otros PWA.</p>
<p><strong>[C] Much√≠simas gracias Jos√© Manuel por haber aceptado nuestra invitaci√≥n.</strong></p>
<p>[J] A vosotros, un honor.</p>
<p><strong>[I] Muchas gracias.</strong></p>
<p>[M√∫sica] Recomendaciones. El espacio de sugerencias y recursos √∫tiles para los dise√±adores y desarrolladores web.</p>
<p><strong>[I] En el programa de hoy os traemos cuatro links, as√≠ que all√° van mis dos primeros. El primero de los links es <a href="https://cloudfour.com/thinks/progressive-web-app-questions/">un art√≠culo que ha escrito Jason Grigsby de Cloudfour acerca de las PWAs</a>, explicando lo que significa y lo que hacen. Dec√≠a que hace unas semanas le escrib√≠a un estudiante en su proyecto final y quer√≠a preguntarle c√≥mo funcionaban y para qu√© serv√≠an. El segundo link es una herramienta de auditor√≠a que se puede usar a trav√©s de terminal y a trav√©s de p√°gina web, y es <a href="https://github.com/GoogleChrome/lighthouse">Lighthouse</a>. Es una herramienta que ha desarrollado Google, principalmente Paul Irish, para auditar y ver las m√©tricas de nuestras PWAs.</strong></p>
<p><strong>[C] El primero de mis links viene de la web de desarrolladores de Google, en la cual ten√©is <a href="https://developers.google.com/web/progressive-web-apps/checklist">una checklist para poder testear y comprobar si cumple todos los requisitos necesarios</a> y adem√°s poder poner atenci√≥n a los detalles y de esa manera mejorar la experiencia a nuestros usuarios. El segundo de mis links es <a href="https://www.timmykokke.com/2017/06/the-pwa-resource-list/">un listado de recursos que Timmy ha colgado en su p√°gina web personal sobre las PWAs</a>.</strong></p>
]]></content>
    
    <summary type="html">
    
      He grabado un podcast sobre Progressive Web App para WeCodeSign. Esc√∫chalo o lee la transcripci√≥n.
    
    </summary>
    
    
      <category term="pwa" scheme="https://jmperezperez.com/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>The (mobile) web is making a come-back</title>
    <link href="https://jmperezperez.com//web-is-back"/>
    <id>https://jmperezperez.com//web-is-back</id>
    <published>2017-06-29T11:10:00.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>The web ecosystem is maturing and every day we understand better how to architecture large and maintainable web applications. We also understand what makes our sites slower and are coming up with solutions to overcome this.</p>
<p>Building a complex site that can work on slow networks is a challenge. One that some companies have decided to accept without fear and share with the developer community.</p>
<span id="more"></span>

<h2 id="Western-companies-looking-at-users-from-developing-countries"><a href="#Western-companies-looking-at-users-from-developing-countries" class="headerlink" title="Western companies looking at users from developing countries"></a>Western companies looking at users from developing countries</h2><p>Instagram, Twitter, Uber, Tinder. They have in common that they are well known in the developed world, and also that they have embraced the web as the channel to reach users in emerging markets. Not as a basic site with a large modal to download the app, but with a full-feature experience. After all, web users shouldn‚Äôt be considered second-class citizens.</p>
<p>Twitter has been great at talking about implementation details (see <a href="https://blog.twitter.com/official/en_us/topics/product/2017/introducing-twitter-lite.html">Introducing Twitter Lite</a> and <a href="https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3">Twitter Lite and High Performance React Progressive Web Apps at Scale</a>) which is really helpful for devs like me who face some of these challenges on a daily basis. And, because anyone can see the code you ship, it‚Äôs easy to look <a href="https://medium.com/statuscode/dissecting-twitters-redux-store-d7280b62c6b1">into the details</a>.</p>
<p><img src="/assets/images/posts/twitter-lite.png" alt="Twitter Lite&#39;s saving options"></p>
<p><small class="caption">Twitter Lite also offers an option to save data.</small></p>
<p>The case of Instagram is notable too because of its scale. They recently <a href="http://fortune.com/2017/05/09/instagram-mobile-website-upload-photos/">added photo upload</a> to their mobile site in a clear sign of their investment on the platform, but haven‚Äôt shared details about how the tech behind the site. Tinder is a similar case, with <a href="http://blog.gotinder.com/introducing-tinder-online/">a newer website</a>.</p>
<p>And a couple of days ago it was Uber with <a href="https://eng.uber.com/m-uber/">Building m.uber: Engineering a high-performance web app for the global market</a>. They describe their JS stack, some interesting things they are doing to reduce the payload and also what they plan for the future.</p>
<p><a href="https://building.calibreapp.com/beyond-the-bubble-real-world-performance-9c991dcd5342">It‚Äôs evident where the next Internet users are going to come from</a> and no big company wants to miss the opportunity.</p>
<h2 id="Emerging-markets-leading-PWA"><a href="#Emerging-markets-leading-PWA" class="headerlink" title="Emerging markets leading PWA"></a>Emerging markets leading PWA</h2><p>If you want to find the leading companies on web development stop looking in Silicon Valley and turn your head towards India and China. There is no talk from Google about PWA where a company from from these countries doesn‚Äôt showcase their site. <a href="http://flipkart.com/">Flipkart</a>, <a href="https://www.treebo.com/">Treebo</a>, <a href="https://housing.com/">Housing</a>, and <a href="https://www.ele.me/">ele.me</a> are some examples. Have a look at the recent <a href="https://www.youtube.com/watch?v=aCMbSyngXB4">Production Progressive Web Apps With JavaScript Frameworks (Google I/O ‚Äò17)</a>.</p>
<p><img src="/assets/images/posts/flipkart-pwa.png" alt="Flipkart&#39;s PWA seems to be improving important metrics"></p>
<p><small class="caption">Some insights from Flipkart and the impact of their mobile site.</small></p>
<p>Before anyone else they saw the benefits of building sites that can work offline and can work fine on a slow network without the hassle of app downloads and updates.</p>
<p>I believe this is good for users, but also for companies. Updating web content is almost instantaneous. This means deploying new features, but also fixing bugs. And believe me, when there is a big issue and you need to fix something right now, time is precious.</p>
<p>Developers can ship code without an expensive process of building whole apps and have them go through a submission/revision system. They also benefit from quicker feedback loops when coding and seeing their changes on the screen (to be fair, React Native is making this one way better in the native world).</p>
<h2 id="The-mobile-web-in-2017"><a href="#The-mobile-web-in-2017" class="headerlink" title="The mobile web in 2017"></a>The mobile web in 2017</h2><p>When I saw <a href="https://twitter.com/markdalgleish/status/879144162389393409">this tweet</a> I laughed out loud.</p>
<blockquote class="twitter-tweet" data-lang="en-gb"><p lang="en" dir="ltr">Updated: The mobile web in 2017, **now with web fonts!**<br><br>(Original: <a href="https://t.co/nLta2tqk42">https://t.co/nLta2tqk42</a>) <a href="https://t.co/c4ZgEdkbU8">pic.twitter.com/c4ZgEdkbU8</a></p>&mdash; Mark Dalgleish (@markdalgleish) <a href="https://twitter.com/markdalgleish/status/879144162389393409">26 June 2017</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>A moment later I got sad since this is quite true. It seems that everyone at every company assumes that apps are more engaging and retain users better than a web experience.</p>
<p>This is true when:</p>
<ul>
<li>a) you haven‚Äôt made an effort in making your web better,</li>
<li>b) you don‚Äôt hesitate in adding 3rd party tracking code that worsens your site</li>
<li>c) you fill the screen with banners and modals, hiding the actual content.</li>
</ul>
<p>Have a look at <a href="https://twitter.com/sbholtrop/status/878611398527520768">this tweet and its thread</a>. You‚Äôll see screenshots that should probably remind some of your past experiences browsing the web on mobile.</p>
<h2 id="What-does-the-future-look-like"><a href="#What-does-the-future-look-like" class="headerlink" title="What does the future look like?"></a>What does the future look like?</h2><p>I don‚Äôt know if the importance of the mobile apps will decrease, or whether those mobile web users will eventually use apps instead of the web. Will even network speed be a problem in the future?</p>
<p>It‚Äôs very interesting to see these trends going back and forth. At a minimum, we should always build for our users and avoid assumptions. Not all of them use powerful MacBook Pros nor have the latest iPhone.</p>
<p>We are paid to face these challenges, to serve our users. Let‚Äôs prioritise that instead of developer ergonomics and everyone will benefit.</p>
]]></content>
    
    <summary type="html">
    
      Some recent examples of large companies implementing Progressive Web Apps, changing their mobile strategy
    
    </summary>
    
    
      <category term="web" scheme="https://jmperezperez.com/tags/web/"/>
    
      <category term="pwa" scheme="https://jmperezperez.com/tags/pwa/"/>
    
  </entry>
  
</feed>
