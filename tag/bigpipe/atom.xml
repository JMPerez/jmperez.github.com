<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jose M. Perez&#39;s Blog</title>
  <subtitle>Web development, performance, and some other good practices.</subtitle>
  <link href="/tag/bigpipe/atom.xml" rel="self"/>
  
  <link href="https://jmperezperez.com/"/>
  <updated>2018-12-16T17:51:46.000Z</updated>
  <id>https://jmperezperez.com/</id>
  
  <author>
    <name>Jose M. Perez</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BigPipe in ASP.Net MVC using Razor</title>
    <link href="https://jmperezperez.com//bigpipe-in-asp-net-mvc-using-razor"/>
    <id>https://jmperezperez.com//bigpipe-in-asp-net-mvc-using-razor</id>
    <published>2011-05-22T09:55:24.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been some time since I posted the tutorial to implement <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1">Facebook’s BigPipe using Microsoft ASP.Net MVC</a>. And since then, Razor view engine has increased its presence for providing a way to implement cleaner views and make it easy to avoid ending up with spaghetti code.</p>
<p>Though now I am focused on PHP, in my previous job we decided to migrate to Razor as soon as possible since it is a more convenient way to implement ASP.NET MVC views, while you can keep your models and controllers code the same. However, Razor does not behave well with the proposed BigPipe solution due to its way of managing the partial views code. You can’t write to the output in your inner views using Response.Write() nor flush because Razor renders pages from inside out. Thus, the inner most view is rendered and written to a buffer, and then the partial view / content place holder where it is defined, and so, until the outer most layout is reached. Then, the content of the buffer is written and flushed to the browser.</p>
<span id="more"></span>
<p>This provides the developer interesting new patterns. For instance, you can import JavaScript or CSS files depending on the content rendered in the views, and import them in the head section of your page, since when the layout is reached, we already know which dependencies to load to provide the functionality needed by the different elements of the page. Some days ago I received a message from <strong>James Hull</strong> (<a href="http://twitter.com/bigfellahull">@bigfellahull on twitter</a>) explaining a way to achieve BigPipe using Razor.</p>
<h2 id="Pagelets-containers"><a href="#Pagelets-containers" class="headerlink" title="Pagelets containers"></a>Pagelets containers</h2><p>The way to define a pagelet container is the same. Just write the container out to the buffer and all is well.</p>
<pre class=" language-csharp"><code class="language-csharp">helper<span class="token punctuation">.</span>ViewContext<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"div id=\""</span> <span class="token operator">+</span> pagelet<span class="token punctuation">.</span>Container <span class="token operator">+</span> <span class="token string">"\"&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="Early-flushing"><a href="#Early-flushing" class="headerlink" title="Early flushing"></a>Early flushing</h2><p>However, to perform the early flush and flushing each pagelet required a little thinking. James has been looking for a solution and he found out that the best approach is to manually write the buffer to the response.</p>
<p>So, in the layout (master) page, we can cast the ViewContext.Writer buffer to a string writer and then get the underlining string builder. Then you can write this string builder to the response, flush it and set the string builder’s length to 0. This seems to be what razor does under the covers so we are just doing it a little earlier.</p>
<pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>StringWriter<span class="token punctuation">)</span>ViewContext<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetStringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
Response<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span>Length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
Html<span class="token punctuation">.</span><span class="token function">ExecutePagelets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>We can do the same with the pagelets,</p>
<pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">lock</span> <span class="token punctuation">(</span>_locker<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  helper<span class="token punctuation">.</span>ViewContext<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>pagelet<span class="token punctuation">.</span><span class="token function">Serialise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>StringWriter<span class="token punctuation">)</span>helper<span class="token punctuation">.</span>ViewContext<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetStringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  helper<span class="token punctuation">.</span>ViewContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  helper<span class="token punctuation">.</span>ViewContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sb<span class="token punctuation">.</span>Length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>And now it works fine in razor!</p>
<p>I am really happy that James (<a href="http://twitter.com/bigfellahull">@bigfellahull</a>) has been researching a way to port this technique to Razor, that is called to be the <em>de facto</em> ASP.Net view engine.</p>
]]></content>
    
    <summary type="html">
    
      Razor to implement BigPipe using ASP.Net MVC. You can use the new view engine to early flush pagelets content and mimic this technique created by Facebook.
    
    </summary>
    
    
      <category term="asp net mvc" scheme="https://jmperezperez.com/tags/asp-net-mvc/"/>
    
      <category term="bigpipe" scheme="https://jmperezperez.com/tags/bigpipe/"/>
    
      <category term="razor" scheme="https://jmperezperez.com/tags/razor/"/>
    
  </entry>
  
  <entry>
    <title>Updates on BigPipe using ASP.NET MVC</title>
    <link href="https://jmperezperez.com//updates-on-bigpipe-using-asp-net-mvc"/>
    <id>https://jmperezperez.com//updates-on-bigpipe-using-asp-net-mvc</id>
    <published>2010-12-11T16:17:14.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been several weeks since I wrote <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1">a tutorial to implement BigPipe using C# and ASP.Net MVC</a>. And I have just read <a href="http://velocity.oreilly.com.cn/index.php?func=session&amp;name=Facebook%E7%BD%91%E7%AB%99%E7%9A%84Ajax%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%B5%81%E6%B0%B4%E7%BA%BF">a PDF from a presentation at Velocity China</a> in which Changhao Jiang, from Facebook, explains some details about Bigpipe, as well as other techniques they use to improve Time to interact (both real and perceived), as well as data savings. These techniques (named Quickling and PageCache) are based on hijax and an intelligent update of specific content of the page instead of the whole page when data changes.</p>
<span id="more"></span>
<p>According to Changhao Jiang, this is the improvement when using BigPipe on Facebook:
<img src="/assets/images/posts/bigpipe-tti-improvement-e1320910397828.png" alt="Improvement when using BigPipe on Facebook"></p>
<p>My first project using BigPipe as I explained is about to go online. Overall I can say that BigPipe approach has helped divide pages into independent chunks using RenderAction, opposite to overpopulating a single action to retrieve all data needed by the page. And I have faced some problems involving pagelet content.</p>
<p>##HTML to JSON
When using JavascriptSerializer (or JsonResult) to convert HTML content to JSON, the generated code is not as nice as Facebook’s.</p>
<p>While yours will look similar to</p>
<pre class=" language-js"><code class="language-js">bigpipe<span class="token punctuation">.</span><span class="token function">onPageletArrive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"Id"</span><span class="token punctuation">:</span><span class="token string">"my-pagelet"</span><span class="token punctuation">,</span><span class="token string">"Content"</span><span class="token punctuation">:</span>"\\r\n\r\n\u003cdiv <span class="token keyword">class</span><span class="token operator">=</span>\"my<span class="token operator">-</span>div\"\u003e\r\n    \u003c <span class="token operator">...</span>
</code></pre>
<p>Facebook’s is more like this:</p>
<pre class=" language-js"><code class="language-js">bigpipe<span class="token punctuation">.</span><span class="token function">onPageletArrive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"Id"</span><span class="token punctuation">:</span><span class="token string">"my-pagelet"</span><span class="token punctuation">,</span><span class="token string">"Content"</span><span class="token punctuation">:</span>"<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span>\"my<span class="token operator">-</span>div\"<span class="token operator">></span> <span class="token operator">...</span>
</code></pre>
<p>So (1) it can be a good idea to strip whitespace from your code and (2) maybe you would like to replace those \u003c and \u003e (see <a href="http://stackoverflow.com/questions/1058895/cant-get-to-show-up-in-json-string">this discussion at stackoverflow</a> and <a href="http://forums.asp.net/t/1440943.aspx">this other link</a>).</p>
<p>##Javascript code not being executed when appended to document using ajax
If your pagelet contains Javascript code, you’d better off moving it from the content of the pagelet to a javascript file to be downloaded and executed as I explain in the tutorial. When you append the content of the pagelet to the container, its Javascript code will not be executed, so take this into account.</p>
<p>In the next days I will update the code of the tutorial to include minor changes that I have found can improve it. And when I have more information about how my little bigpipe is performing I will write a post about it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s been several weeks since I wrote &lt;a href=&quot;/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1&quot;&gt;a tutorial to implement BigPipe using C# and ASP.Net MVC&lt;/a&gt;. And I have just read &lt;a href=&quot;http://velocity.oreilly.com.cn/index.php?func=session&amp;amp;name=Facebook%E7%BD%91%E7%AB%99%E7%9A%84Ajax%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%B5%81%E6%B0%B4%E7%BA%BF&quot;&gt;a PDF from a presentation at Velocity China&lt;/a&gt; in which Changhao Jiang, from Facebook, explains some details about Bigpipe, as well as other techniques they use to improve Time to interact (both real and perceived), as well as data savings. These techniques (named Quickling and PageCache) are based on hijax and an intelligent update of specific content of the page instead of the whole page when data changes.&lt;/p&gt;
    
    </summary>
    
    
      <category term="bigpipe" scheme="https://jmperezperez.com/tags/bigpipe/"/>
    
      <category term="facebook" scheme="https://jmperezperez.com/tags/facebook/"/>
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Tutorial: Implementing Facebook&#39;s BigPipe Using ASP.Net MVC - Part 3</title>
    <link href="https://jmperezperez.com//tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-3"/>
    <id>https://jmperezperez.com//tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-3</id>
    <published>2010-09-27T17:25:11.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Parts of the tutorial</p>
<ol>
<li> <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1">Introduction to BigPipe</a></li>
<li><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2">How ASP.Net MVC fits in the model. Registering and generating
 pagelets</a></li>
<li>Browser implementation of BigPipe. Loading pagelets and their
 resources effectively</li>
<li> <a href="https://github.com/JMPerez/BigPipe">Check out the demo Visual Studio solution</a></li>
</ol>
<p>In this third part of the tutorial to carry out a technique similar to BigPipe I will cover the browser side. BigPipe is not only focused on server side, but it also sets how the different resources that our pagelets need have to be requested and loaded in the document.</p>
<!-- more -->
<h2 id="Registering-a-pagelet-and-its-resources"><a href="#Registering-a-pagelet-and-its-resources" class="headerlink" title="Registering a pagelet and its resources"></a>Registering a pagelet and its resources</h2><p>In the Pagelet class I will declare a constructor that accepts a list of CSS files and a list of JavaScript files needed by the pagelet:</p>
<pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">Pagelet</span><span class="token punctuation">(</span><span class="token keyword">string</span> container<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> action<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> css<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> js<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Container <span class="token operator">=</span> container<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Action <span class="token operator">=</span> action<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Id <span class="token operator">=</span> container<span class="token punctuation">,</span>
        Css <span class="token operator">=</span> css<span class="token punctuation">,</span>
        Js <span class="token operator">=</span> js
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>In my sample code I am registering two pagelets in the View:</p>
<pre class=" language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token operator">%</span>  HttpRequest req <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Request<span class="token punctuation">;</span>
    Html<span class="token punctuation">.</span><span class="token function">RegisterPagelet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pagelet</span><span class="token punctuation">(</span>
        <span class="token string">"pagelet1-pagelet"</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Html<span class="token punctuation">.</span><span class="token function">RenderActionToString</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">"home"</span><span class="token punctuation">,</span> <span class="token string">"pagelet1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"../../Content/Pagelet1.css"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"</span><span class="token punctuation">,</span>
                <span class="token string">"../../Scripts/Pagelet1.js"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> Html<span class="token punctuation">.</span><span class="token function">RegisterPagelet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pagelet</span><span class="token punctuation">(</span>
    <span class="token string">"pagelet2-pagelet"</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Html<span class="token punctuation">.</span><span class="token function">RenderActionToString</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">"home"</span><span class="token punctuation">,</span> <span class="token string">"pagelet2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"../../Content/Pagelet2.css"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>
</code></pre>
<p>As I said before, <code>Html.Action()</code> method can be used to store the result
of an action in a string. However, it may throw exception if you use
multi-threading to execute the different pagelets since it doesn’t keep
a reference to original request. In fact, we are storing the current
request in the <code>req</code> variable to avoid this exception when using
<code>Html.RenderActionToString</code>. If you’d rather use a single-threaded <code>for</code>
to go through the pagelets in the <code>ExecutePagelets</code> method (i.e. if you
see that parallel <code>for</code> implies too much overload), then go for the
<code>Action</code> method.</p>
<h2 id="Facebook’s-approach"><a href="#Facebook’s-approach" class="headerlink" title="Facebook’s approach"></a>Facebook’s approach</h2><p>In this tutorial I am implementing a simple solution covering BigPipe
principles from server to browser. However, Facebook’s implementation
is far more complex, taking into account resource dependencies and
events. If we have a look at a sample call to their <code>onPageletArrive</code>
Javascript function, we can see that they pass a JSON object similar to
this one:</p>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"id"</span><span class="token operator">:</span> "<span class="token punctuation">,</span>
    <span class="token property">"phase"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token property">"is_last"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"append"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"bootloadable"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"css"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">"MPQqY"</span><span class="token punctuation">,</span>
        <span class="token string">"uwtW6"</span><span class="token punctuation">,</span>
        <span class="token string">"wWhUT"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"js"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">"RpPeo"</span><span class="token punctuation">,</span>
        <span class="token string">"C9ueD"</span><span class="token punctuation">,</span>
        <span class="token string">"q+PxV"</span><span class="token punctuation">,</span>
        <span class="token string">"Ok1Y0"</span><span class="token punctuation">,</span>
        <span class="token string">"dOwRG"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"resource_map"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"requires"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"provides"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"onload"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"onafterload"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"onpagecache"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"onafterpagecache"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"refresh_pagelets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"invalidate_cache"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">[</span>

    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"page_cache"</span><span class="token operator">:</span> <span class="token boolean">false</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>From there, we will cover <code>id</code>, <code>css</code>, <code>js</code> and <code>content</code> fields. Most
of the rest of fields are self-explainable, and they could be
implemented easily on our basic BigPipe implementation.</p>
<h2 id="Javascript-detection"><a href="#Javascript-detection" class="headerlink" title="Javascript detection"></a>Javascript detection</h2><p>We will detect Javascript using a cookie that will be written using
Javascript. The first request to our page will not send that cookie, so
we will serve a non-BigPipe version. I prefer this to making a
redirection to the same page if Javascript is enabled.</p>
<p>In the Site.Master, just before ending body tag we can add the Javascript detection code:</p>
<pre class=" language-csharp"><code class="language-csharp">    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Cookies<span class="token punctuation">[</span><span class="token string">"js"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">var</span> exdate<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    exdate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>exdate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">"js=true;expires="</span> <span class="token operator">+</span> exdate<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>
</code></pre>
<h2 id="Loading-CSS-and-JS"><a href="#Loading-CSS-and-JS" class="headerlink" title="Loading CSS and JS"></a>Loading CSS and JS</h2><p>We will need a basic Javascript script that allows us:</p>
<ul>
<li>  Load in parallel the set of CSS resources needed by each pagelet</li>
<li>  Append the HTML code of a pagelet inside its container</li>
<li>Request in parallel all the Javascript files needed by the set of
  pagelets, once they all have been appended to the document, and
  execute them</li>
</ul>
<p>Moreover, the size of the script has to be as small as possible, since
it will be a blocking script.</p>
<pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> Loader <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">,</span>
         head <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

     <span class="token keyword">var</span> loadJs <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         <span class="token keyword">var</span> script <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
         script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'text/javascript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token keyword">var</span> loaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
         <span class="token keyword">var</span> loadFunction <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>loaded<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
             loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
             cb <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
         script<span class="token punctuation">.</span>onload <span class="token operator">=</span> loadFunction<span class="token punctuation">;</span>
         script<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> loadFunction<span class="token punctuation">;</span>
         head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

     <span class="token keyword">var</span> cachedBrowser<span class="token punctuation">;</span>

     <span class="token keyword">var</span> browser <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cachedBrowser<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
             <span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token keyword">var</span> match <span class="token operator">=</span> <span class="token regex">/(webkit)[ \/]([\w.]+)/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token regex">/(opera)(?:.*version)?[ \/]([\w.]+)/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token regex">/(msie) ([\w.]+)/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token operator">!</span><span class="token regex">/compatible/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token regex">/(mozilla)(?:.*? rv:([\w.]+))?/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
             cachedBrowser <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> cachedBrowser<span class="token punctuation">;</span>
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

     <span class="token keyword">var</span> loadCss <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         <span class="token keyword">var</span> link <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         link<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>
         link<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">"stylesheet"</span><span class="token punctuation">;</span>
         link<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>

         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">browser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"msie"</span><span class="token punctuation">)</span>
             link<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                 <span class="token regex">/loaded|complete/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">browser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"opera"</span><span class="token punctuation">)</span>
             link<span class="token punctuation">.</span>onload <span class="token operator">=</span> cb<span class="token punctuation">;</span>
         <span class="token keyword">else</span>
         <span class="token comment" spellcheck="true">//FF, Safari, Chrome</span>
             <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                 <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                     link<span class="token punctuation">.</span>sheet<span class="token punctuation">.</span>cssRule<span class="token punctuation">;</span>
                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                     <span class="token function">setTimeout</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token keyword">return</span><span class="token punctuation">;</span>
                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
                 <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

     <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> loadCss<span class="token punctuation">:</span> loadCss<span class="token punctuation">,</span> loadJs<span class="token punctuation">:</span> loadJs <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">function</span> <span class="token function">PageLet</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> domInserted<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     <span class="token keyword">var</span> data <span class="token operator">=</span> p<span class="token punctuation">,</span>
        remainingCss <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

     <span class="token keyword">var</span> loadCss <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//load css</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>Css <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> data<span class="token punctuation">.</span>Css<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
             remainingCss <span class="token operator">=</span> data<span class="token punctuation">.</span>Css<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> remainingCss<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
                 Loader<span class="token punctuation">.</span><span class="token function">loadCss</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Css<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                     <span class="token operator">!</span> <span class="token operator">--</span>remainingCss <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">insertDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
         <span class="token keyword">else</span>
             <span class="token function">insertDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

     <span class="token keyword">var</span> insertDom <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> p<span class="token punctuation">.</span>Content<span class="token punctuation">;</span>
         <span class="token function">domInserted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

     <span class="token keyword">var</span> loadJs <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>Js<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//load js</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>Js<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
             Loader<span class="token punctuation">.</span><span class="token function">loadJs</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Js<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

     <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> loadCss<span class="token punctuation">:</span> loadCss<span class="token punctuation">,</span> loadJs<span class="token punctuation">:</span> loadJs <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

 <span class="token keyword">var</span> BigPipe <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

     <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">,</span>
        pagelets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* registered pagelets */</span>

     <span class="token keyword">var</span> onPageletArrive <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         count <span class="token operator">=</span> count <span class="token operator">||</span> p<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
         <span class="token keyword">var</span> pagelet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageLet</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token operator">--</span>count<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                 <span class="token comment" spellcheck="true">//load js</span>
                 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pagelets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                     pagelets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">loadJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         pagelets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pagelet<span class="token punctuation">)</span><span class="token punctuation">;</span>
         pagelet<span class="token punctuation">.</span><span class="token function">loadCss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

     <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> onPageletArrive<span class="token punctuation">:</span> onPageletArrive <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
<p>Once minimized using Google Closure, the size is 1.27KB (666 bytes gzipped), so we have a very small script that fits our requirements.</p>
<h2 id="Resources-chart"><a href="#Resources-chart" class="headerlink" title="Resources chart"></a>Resources chart</h2><p>The following chart shows how resources are loaded:
<img src="/assets/images/posts/bigpipe-02.jpg" alt="Resources loading graph using BigPipe"></p>
<p>We can see that the main document flushes early, starting the requests for Site.css
and BigPipe.js, which are in the head section of our view. When pagelets
are executed (I have set a Thread.Sleep in both pagelets) their CSS
resources are requested and only after they have been appended to the
document their Javascript resources are downloaded and executed.</p>
<h2 id="Further-improvements"><a href="#Further-improvements" class="headerlink" title="Further improvements"></a>Further improvements</h2><p>There are a lot of points that can be improved. I have thought of
several of them, what could lead to a more complex solution that can
provide BigPipe to ASP.Net MVC in a not so experimental way.</p>
<h3 id="Fire-event-before-starting-loading-js-for-pagelets"><a href="#Fire-event-before-starting-loading-js-for-pagelets" class="headerlink" title="Fire event before starting loading js for pagelets"></a>Fire event before starting loading js for pagelets</h3><p>Scripts that are needed by the page but do not need to be loaded before
executing pagelets can be delayed and be requested when the pagelets’
scripts are.</p>
<h3 id="Manage-dependencies-between-scripts"><a href="#Manage-dependencies-between-scripts" class="headerlink" title="Manage dependencies between scripts"></a>Manage dependencies between scripts</h3><p>As Facebook does, it can be a good idea to incorporate dependencies
solving logic to request and execute JavaScript resources in the best
order.</p>
<p>Avoid double insertion. If two pagelets require the same script, it is
only necessary to request once.</p>
<h3 id="Manage-pagelets-resources-in-a-unique-place"><a href="#Manage-pagelets-resources-in-a-unique-place" class="headerlink" title="Manage pagelets resources in a unique place"></a>Manage pagelets resources in a unique place</h3><p>In my solution, pagelets’ resources are specified in the view that is
including them. If we decide to change the implementation of a pagelet
and now we need a different set of resources (i.e. an extra JS resource)</p>
<h2 id="Drawbacks-of-this-implementation"><a href="#Drawbacks-of-this-implementation" class="headerlink" title="Drawbacks of this implementation"></a>Drawbacks of this implementation</h2><p>At first I see a performance problem when the browser does not support
Javascript. As we are registering pagelets as PartialViews rendered
inside the body ContentPlaceHolder, we have no way to include CSS
resources back to the head section, since it has already been generated.
So we have to include the CSS link elements inside the body, blocking
renderization.</p>
<p>The good thing is that we save bytes not writing script elements when we
detect the browser has JavaScript disabled.</p>
]]></content>
    
    <summary type="html">
    
      Last part of my tutorial on Implementing BigPipe, focused on browser side, loading CSS and JS resources efficiently using a small script.
    
    </summary>
    
    
      <category term="asp net mvc" scheme="https://jmperezperez.com/tags/asp-net-mvc/"/>
    
      <category term="bigpipe" scheme="https://jmperezperez.com/tags/bigpipe/"/>
    
      <category term="facebook" scheme="https://jmperezperez.com/tags/facebook/"/>
    
  </entry>
  
  <entry>
    <title>Tutorial: Implementing Facebook&#39;s BigPipe Using ASP.Net MVC - Part 2</title>
    <link href="https://jmperezperez.com//tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2"/>
    <id>https://jmperezperez.com//tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2</id>
    <published>2010-09-22T17:34:36.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Parts of the tutorial</p>
<ol>
<li> <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1">Introduction to BigPipe</a></li>
<li> How ASP.Net MVC fits in the model. Registering and generating pagelets</li>
<li><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-3">Browser implementation of BigPipe. Loading pagelets and their
 resources effectively</a></li>
<li> <a href="https://github.com/JMPerez/BigPipe">Check out the demo Visual Studio solution</a></li>
</ol>
<p>In <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1">the previous post of this tutorial</a> I made an overview explaining how Bigpipe works and why it can improve users’ perceived speed when loading our pages.</p>
<!-- more -->
<p>Basically Bigpipe combines early flushing, parallel processing and a managed resources loading in the browser to prioritize showing content quickly over loading and executing JavaScript files.</p>
<p>In this second post I will show how ASP.Net MVC features fit in the BigPipe model. Code snippets will help to illustrate he different parts. I will upload the source code in a Visual Studio 2010 project during the next days, so you can download it and further explore this technique.</p>
<h2 id="View-structure"><a href="#View-structure" class="headerlink" title="View structure"></a>View structure</h2><p>Our view structure will be the usual when working with ASP.Net MVC:</p>
<ul>
<li><code>Site.Master</code>: Contains the skeleton of the HTML document. It will
  also fire the execution of the pagelets.</li>
<li><code>SomePage.aspx</code>: Fills the ContentPlaceHolders of the Site.Master.
  It will include the different pagelets.</li>
<li><code>Pagelet1.ascx</code>, <code>Pagelet2.ascx</code>… : The partial views that
  provides content to some areas that compose the page.</li>
</ul>
<h2 id="Pagelets-as-RenderActions"><a href="#Pagelets-as-RenderActions" class="headerlink" title="Pagelets as RenderActions"></a>Pagelets as RenderActions</h2><p>Our pagelets will be included using RenderActions. Pagelets are supposed
to take some time to be executed, so it makes sense that these will need
to access data in some way. These data will be retrieved in a controller
to keep MVC paradigm.</p>
<h2 id="Registering-pagelets"><a href="#Registering-pagelets" class="headerlink" title="Registering pagelets"></a>Registering pagelets</h2><p>First of all, we will declare a Pagelet class that is going to be used
to register the Pagelets. A pagelet will contain an instance of Data,
that will be serialized as JSON.</p>
<pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">string</span> Id <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">string</span> Content <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> Css <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> Js <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pagelet</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> JavaScriptSerializer jss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaScriptSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Func<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> Action <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> Container<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Data Data <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Manages a pagelet</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;param name=container>The id of the div container in which the output will be appended&lt;/param></span>
    <span class="token comment" spellcheck="true">/// &lt;param name=action>The action to execute that will generate the output&lt;/param></span>
    <span class="token keyword">public</span> <span class="token function">Pagelet</span><span class="token punctuation">(</span><span class="token keyword">string</span> container<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> action<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Container <span class="token operator">=</span> container<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Action <span class="token operator">=</span> action<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Id <span class="token operator">=</span> container <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> js_pagelet <span class="token operator">=</span>
            <span class="token operator">+</span> jss<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span>
            <span class="token operator">+</span> <span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>\
            <span class="token operator">+</span> Container
            <span class="token operator">+</span> \<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> js_pagelet<span class="token punctuation">.</span>Content<span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>The Js and Css arrays of strings will contain the files of these types needed by the pagelet to be styled and work correctly (in the next post I will make heavier use of these fields when covering the Javascript script).</p>
<p>The <code>Serialize()</code> method will generate the code to make the call to inject the code into its container.</p>
<p>Next, we will define some helpers that will be used to register the pagelet and store the output of the RenderAction call.</p>
<p>We want the rendered content to be converted into a JSON object so, instead of just rendering the action (writing the output directly to the response), we will render the action storing the result in a string. For this, we will use RenderActionToString.</p>
<p>We need a way to get the result of the RenderAction as a string. Following a similar method to the one used to <a href="http://www.klopfenstein.net/lorenz.aspx/render-partial-view-to-string-in-asp-net-mvc">render a partial view to a string</a>, we can declare extension methods to get the output of an action:</p>
<pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RendererHelper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/// &lt;summary>Fake IView implementation, only used to instantiate an HtmlHelper.&lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FakeView</span> <span class="token punctuation">:</span> IView
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token preprocessor property">#<span class="token directive keyword">region</span> IView Members</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Render</span><span class="token punctuation">(</span>ViewContext viewContext<span class="token punctuation">,</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>TextWriter writer<span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">RenderActionToString</span><span class="token punctuation">(</span><span class="token keyword">this</span> HtmlHelper helper<span class="token punctuation">,</span> HttpRequest request<span class="token punctuation">,</span> <span class="token keyword">string</span> controller<span class="token punctuation">,</span> <span class="token keyword">string</span> action<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//Create memory writer</span>
        <span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> memWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//Create fake http context to render the view</span>
        <span class="token keyword">var</span> fakeResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpResponse</span><span class="token punctuation">(</span>memWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> fakeContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpContext</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> fakeResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> fakeControllerContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControllerContext</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">HttpContextWrapper</span><span class="token punctuation">(</span>fakeContext<span class="token punctuation">)</span><span class="token punctuation">,</span>
            helper<span class="token punctuation">.</span>ViewContext<span class="token punctuation">.</span>RouteData<span class="token punctuation">,</span>
            helper<span class="token punctuation">.</span>ViewContext<span class="token punctuation">.</span>Controller<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> oldContext <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Current<span class="token punctuation">;</span>
        HttpContext<span class="token punctuation">.</span>Current <span class="token operator">=</span> fakeContext<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//Use HtmlHelper to render partial view to fake context</span>
        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlHelper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewContext</span><span class="token punctuation">(</span>fakeControllerContext<span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">FakeView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ViewDataDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TempDataDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> memWriter<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">ViewPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        html<span class="token punctuation">.</span><span class="token function">RenderAction</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> controller<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//Restore context</span>
        HttpContext<span class="token punctuation">.</span>Current <span class="token operator">=</span> oldContext<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//Flush memory and return output</span>
        memWriter<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>HtmlHelper already has the <code>Action</code> method extension that gets the result of an action in a string, but it can be problematic when using multiple threads to execute the pagelets, as I explain in the <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-3">third part of this tutorial</a>.</p>
<pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BigPipeHelper</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RegisterPagelet</span><span class="token punctuation">(</span><span class="token keyword">this</span> HtmlHelper helper<span class="token punctuation">,</span> Pagelet pagelet<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> context <span class="token operator">=</span> helper<span class="token punctuation">.</span>ViewContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> jsEnabled <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Cookies<span class="token punctuation">[</span>js<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Cookies<span class="token punctuation">[</span>js<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token keyword">true</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jsEnabled<span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//JavaScript is not enabled, so we write the execution to the output and</span>
            <span class="token comment" spellcheck="true">//not register the pagelet</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pagelet<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Css <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">string</span> css <span class="token keyword">in</span> pagelet<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Css<span class="token punctuation">)</span>
                    helper<span class="token punctuation">.</span><span class="token function">IncludeCss</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span>

            pagelet<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span>\<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>\<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> pagelet<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> pagelet<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        List<span class="token operator">&lt;</span>Pagelet<span class="token operator">></span> pagelets <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Pagelet<span class="token operator">></span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>Items<span class="token punctuation">[</span>Pagelets<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pagelets <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            pagelets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Pagelet<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>Items<span class="token punctuation">[</span>Pagelets<span class="token punctuation">]</span> <span class="token operator">=</span> pagelets<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        pagelets<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>pagelet<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//write pagelet container</span>
        context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span>\ <span class="token operator">+</span> pagelet<span class="token punctuation">.</span>Container <span class="token operator">+</span> \<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>We will use <a href="http://www.4guysfromrolla.com/articles/060904-1.aspx">HttpContext.Items</a> to store the pagelets. The aspx page will decide to render each action or register a pagelet for later execution, depending on Javascript support. When using BigPipe we will choose the later one.</p>
<p>Then, in Site.Master, just before closing the body tag, we will make a flush so the browser can process the code generated so far, and then we will start executing the pagelets.</p>
<pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">Response.Flush();</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">Html.ExecutePagelets();</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>The pagelets will be executed in a set of parallel threads. Each thread will execute the render action and will write a Javascript call to process the pagelet. After writing this response, we will flush it so the browser can start processing the code for the just generated pagelet.</p>
<pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token keyword">object</span> _locker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ExecutePagelets</span><span class="token punctuation">(</span><span class="token keyword">this</span> HtmlHelper helper<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> helper<span class="token punctuation">.</span>ViewContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Pagelet<span class="token operator">></span> pagelets <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Pagelet<span class="token operator">></span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>Items<span class="token punctuation">[</span>Pagelets<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pagelets <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pagelets<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> pagelet <span class="token operator">=</span> pagelets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        pagelet<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">lock</span><span class="token punctuation">(</span>_locker<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>pagelet<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>Parallel.For (C# 4.0) creates a set of threads and continues with the next instruction once they all have finished. For each pagelet, we store in the Content field the result of executing its Action() method, this is, the output of the RenderAction. Next we write to the output the Data object as a JSON string and flush it.</p>
<h3 id="Implementing-the-browser-side-of-Bigpipe"><a href="#Implementing-the-browser-side-of-Bigpipe" class="headerlink" title="Implementing the browser side of Bigpipe"></a>Implementing the browser side of Bigpipe</h3><p>I did not want to make just a proof of concept of Bigpipe, but also implement a basic system that covers this technique from the server to the browser.</p>
<p>In the next post I will focus on the script that will manage the loading of CSS and JavaScript resources for the pagelets. This script is independent of the technology and programming language used on server. I will also show some resources loading charts to see how BigPipe affects this.</p>
<p><strong>Update September 26th:</strong> I add a locker in the <code>ExecutePagelets</code> method to make response writing thread safe.</p>
<p><strong>Update September 27th:</strong> I add support for javascript disabled browser, generating content immediately when registering pagelets in <code>RegisterPagelet</code> method.</p>
]]></content>
    
    <summary type="html">
    
      Build Facebook&#39;s BigPipe using C#. Source code to make pagelets and achieve delayed parallel execution in an ASP.Net MVC website.
    
    </summary>
    
    
      <category term="asp net mvc" scheme="https://jmperezperez.com/tags/asp-net-mvc/"/>
    
      <category term="bigpipe" scheme="https://jmperezperez.com/tags/bigpipe/"/>
    
      <category term="facebook" scheme="https://jmperezperez.com/tags/facebook/"/>
    
  </entry>
  
  <entry>
    <title>Tutorial: Implementing Facebook&#39;s BigPipe Using ASP.Net MVC - Part 1</title>
    <link href="https://jmperezperez.com//tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1"/>
    <id>https://jmperezperez.com//tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1</id>
    <published>2010-09-18T07:37:07.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Parts of the tutorial</p>
<ol>
<li> Introduction to BigPipe</li>
<li><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2">How ASP.Net MVC fits in the model. Registering and generating
 pagelets</a></li>
<li><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-3">Browser implementation of BigPipe. Loading pagelets and their
 resources effectively</a></li>
<li> <a href="https://github.com/JMPerez/BigPipe">Check out the demo Visual Studio solution</a></li>
</ol>
<p>Through a series of posts I will explain how we can implement BigPipe Facebook using ASP.Net MVC.</p>
<!-- more -->
<p>In this first post I will describe what BigPipe is and sketch how we can make a similar implementation using ASP.Net MVC.</p>
<p>You can clone the code from <a href="https://github.com/JMPerez/BigPipe">the BigPipe project on GitHub</a>  that includes all the source code needed to run the sample.</p>
<h2 id="What-is-BigPipe"><a href="#What-is-BigPipe" class="headerlink" title="What is BigPipe"></a>What is BigPipe</h2><p>BigPipe is a <a href="/techniques-optimize-web-sites">website performance technique</a> used and coined by Facebook to serve web pages improving user’s perceived load speed. In general, it consists of serving quickly the main content of the page, and then serve the content from other regions of the page called pagelets.</p>
<p>The implementation of these pagelets is performed in parallel on the server and served to the browser as soon as they are generated. This allows:</p>
<ol>
<li>Browser can start rendering the page content earlier (early
 flushing)</li>
<li>Pagelets are served as soon as they are ready and the browser can
 render them in their container.</li>
<li>If one pagelet takes longer to run, it will not delay the generation
 of the rest of pagelets.</li>
<li>Pagelets are generated in several concurrent asynchronous threads
 and when a thread finishes its execution, it flushes the content so
 the browser can start rendering.</li>
</ol>
<p>Sequence of the different stages during a pagelet generation:</p>
<p><img src="/assets/images/posts/bigpipe-sequence.svg" alt="Sequence of the different stages during a pagelet generation"></p>
<p>Apart from the pagelet generation, parallelism is also applied during the processing of the pagelet by the browser. Each pagelet can define a set of CSS and JS files that it needs to work properly. These files are requested in such a way that it keeps a good performance.</p>
<p>Graph showing how pagelets resources are requested:</p>
<p><img src="/assets/images/posts/bigpipe-pagelet-process.svg" alt="Graph showing how pagelets resources are requested"></p>
<ol>
<li> For each pagelet, request in parallel every necessary CSS resource</li>
<li>Once a pagelet has the necessary CSS files, inject the HTML code
 inside its container.</li>
<li>When every pagelet has finished request its CSS files and is
 inserted in the document, proceed to request in parallel the JS
 files needed by the whole set of pagelets.</li>
</ol>
<p>By keeping these steps we make sure that the pagelets are appended to
the document and set their style, avoiding a FUOC (Flash Of Unstyled
Content). By delaying the download of JS resources we are prioritizing
CSS requests for content be shown earlier, as well as other pagelets to
be downloaded.</p>
<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>Your browser must support Javascript, since the content is embedded
using Javascript. Our implementation takes into account progressive
enhancement to serve pages not using BigPipe for browsers without
Javascript or search engine bots (keeping SEO and accessibility).</p>
<h3 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h3><ul>
<li>Load time perceived by the user is better. Rendering earlier the
  main content of the page, browser starts making requests for
  resources CSS and Javascript earluer, as well as inerpreting the DOM
  tree.</li>
<li>We take advantage of the parallelism in the server side,  running
  simultaneously multiple pagelets.</li>
<li>In general, improving the parallelism of the system. As the browser
  renders a region, some others are being transmitted through the wire
  and some other being built in the server.</li>
<li>Everything is done in a single request by the client. You could
  implement BigPipe using Ajax calls from the browser to generate the
  pagelets, but at the expense of a greater number of requests (this
  will be covered in another post).</li>
</ul>
<h3 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h3><ul>
<li>When you flush each pagelet more packets are sent from server to
  client (however we can always decide to send more than one pagelet
  in each flushing).</li>
<li>Browser has to interpret the code and insert pagelets in their
  containers. This causes repaintings and reflows which can be
  annoying to the user.</li>
</ul>
<p><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2">In part 2 of the tutorial</a> I explain how to use ASP.Net MVC to implement BigPipe, using RenderActions and threads pool to execute the pagelets.</p>
<h4 id="Other-resources"><a href="#Other-resources" class="headerlink" title="Other resources"></a>Other resources</h4><p>Some other people have implemented the basics of this technique using Java (<a href="http://www.olympum.com/java/facebook-bigpipe-in-an-async-servlet">Bruno Fernandez-Ruiz</a> and <a href="http://codemonkeyism.com/facebook-bigpipe-java/">Stephan Schmidt</a>) and using Node.js (<a href="http://www.subbu.org/blog/2010/07/bigpipe-done-in-node-js">Subbu Allamaraju</a>).</p>
]]></content>
    
    <summary type="html">
    
      First part of the tutorial to implement Facebook&#39;s BigPipe using ASP.Net MVC. BigPipe improves pages loading time dividing them into regions that are generated on the server concurrently.
    
    </summary>
    
    
      <category term="optimization" scheme="https://jmperezperez.com/tags/optimization/"/>
    
      <category term="flush" scheme="https://jmperezperez.com/tags/flush/"/>
    
      <category term="bigpipe" scheme="https://jmperezperez.com/tags/bigpipe/"/>
    
      <category term="facebook" scheme="https://jmperezperez.com/tags/facebook/"/>
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
  </entry>
  
</feed>
