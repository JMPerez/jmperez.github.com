<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jose M. Perez&#39;s Blog</title>
  <subtitle>Web development, performance, and some other good practices.</subtitle>
  <link href="/tag/performance/atom.xml" rel="self"/>
  
  <link href="https://jmperezperez.com/"/>
  <updated>2021-12-14T16:26:36.108Z</updated>
  <id>https://jmperezperez.com/</id>
  
  <author>
    <name>Jose M. Perez</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to Estimate Web Performance Impact Before Making Fixes</title>
    <link href="https://jmperezperez.com//assess-performance-impact"/>
    <id>https://jmperezperez.com//assess-performance-impact</id>
    <published>2020-03-14T06:15:00.000Z</published>
    <updated>2021-12-14T16:26:36.108Z</updated>
    
    <content type="html"><![CDATA[<p>Web Performance is important for user experience and business metrics. Estimating its impact is key to be able to prioritize it, yet it’s difficult to quantify its benefits until the work has been done.</p>
<div style="position:relative;padding-bottom:39.65%;margin-bottom:1rem">
<img
    loading="lazy"
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1584188336/assess-performance-impact/performance-is-money.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1584188336/assess-performance-impact/performance-is-money.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1584188336/assess-performance-impact/performance-is-money.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1584188336/assess-performance-impact/performance-is-money.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1584188336/assess-performance-impact/performance-is-money.png"
    alt="" />
</div>

<p>We need to break this chicken-and-egg loop. This post explains several ways of assessing the potential performance gains with little effort and, more importantly, without actually implementing fixes.</p>
<span id="more"></span>

<h2 id="What-is-the-business-opportunity-for-web-performance-improvements"><a href="#What-is-the-business-opportunity-for-web-performance-improvements" class="headerlink" title="What is the business opportunity for web performance improvements?"></a>What is the business opportunity for web performance improvements?</h2><p>In the past I have been too naive thinking that every stakeholder would care as much as I do about web performance. <em>“Look, there are many case studies proving a correlation between loading time and business metrics!”</em> - I would repeat over and over. Previous results from other companies or websites, like <a href="https://wpostats.com/">those published on WPO Stats</a>, are essential to start a conversation about the topic, but it’s not sufficient. <strong>How will that apply to my business?</strong></p>
<p>I thought that the best way to prove the value would be to <a href="https://web.dev/measure">audit performance using Lighthouse</a>, fix the issue with lowest effort/highest impact, and measure. This can work if the audit shows potential improvements and the stakeholders agree to dedicate time and people to run the initial experiment.</p>
<p>However, more often than not <strong>performance audits are not enough to move the needle</strong>. Yes, you can get an estimation of potential time savings, but can’t be translated directly into conversions or revenue, which are the metrics that the business cares about.</p>
<p>During last months I have come across these low effort techniques to size the opportunity for web performance improvements linking performance metrics to business metrics:</p>
<ol>
<li><p><strong>Plotting Business Metrics vs Performance Metrics</strong>: How to track both performance metrics and business metrics and establish correlations between them.</p>
</li>
<li><p><strong>Measuring the Relative Mobile Conversion Rate</strong>: Identify performance issues by comparing the conversion rates on mobile and desktop.</p>
</li>
<li><p><strong>Using Test My Site from Think with Google</strong>: Gives you an estimation of potential revenue increase for your site when saving loading time.</p>
</li>
</ol>
<h2 id="1-Plotting-Business-Metrics-vs-Performance-Metrics"><a href="#1-Plotting-Business-Metrics-vs-Performance-Metrics" class="headerlink" title="1. Plotting Business Metrics vs Performance Metrics"></a>1. Plotting Business Metrics vs Performance Metrics</h2><p>Think about what you are trying to drive on your existing site. Is it newsletter registrations? Leads? Purchases? When a user performs those actions, the user has converted. It’s important to track these conversion events, and you can do it in your own system or leveraging tools like Google Analytics or Facebook Analytics.</p>
<p>Now the question is: <strong>how does user experience affect conversion rate?</strong> Assuming there are enough conversions, it is possible to cluster these conversions based on a performance metric. This is exactly what <a href="https://twitter.com/cpclermont">CP Clermont</a> did at ALDO and <a href="https://simplified.dev/performance/impact-of-web-performance">described in his post “The Impact of Web Performance”</a>.</p>
<p>The idea is that <strong>if we can prove that users having a better web performance are converting more often, we can measure the impact of improving user’s experience in money terms</strong>. The best thing is that the effort is relatively low:</p>
<ol>
<li>Track the conversion event, which you might be doing already</li>
<li>Add an event with a performance metric category. CP Clermont chose First Paint, Time to Interactive, Time to App Load (a custom metric for ALDO’s SPA), and Frames per Second. Then, he translated the metrics into 3 categories (good, average, and poor) and logged a custom dimension on Google Analytics.</li>
<li>Plot business metrics vs performance metrics over time. For business metrics CP Clermont chose Conversion Rate and Revenue.</li>
</ol>
<figure>
<div style="position:relative;padding-bottom:52.26244%;margin-bottom:1rem">
<img
    loading="lazy"
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-first-paint-cr_obhsnn.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-first-paint-cr_obhsnn.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-first-paint-cr_obhsnn.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-first-paint-cr_obhsnn.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-first-paint-cr_obhsnn.png"
    alt="Plotting Conversion Rate for each First Paint Category (good, average, slow)" />
</div>
<figcaption>Plotting Conversion Rate for each First Paint Category (good, average, slow) (<a href="https://simplified.dev/performance/impact-of-web-performance">source</a>)</figcaption>
</figure>

<p>One could wonder if users having a better performance and spending more because they are using better devices (ie the latest iPhone), which have better CPUs and their users have likely a higher purchase power.</p>
<figure>
<div style="position:relative;padding-bottom:40.8649%">
<img
    loading="lazy"
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-iphone8-dollar-per-session_zdvrlm.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-iphone8-dollar-per-session_zdvrlm.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-iphone8-dollar-per-session_zdvrlm.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-iphone8-dollar-per-session_zdvrlm.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_simplified-iphone8-dollar-per-session_zdvrlm.png"
    alt="Plotting Revenue per session for a specific device (iPhone 8) depending on FPS after click" />
</div>
<figcaption>Plotting Revenue per session for a specific device (iPhone 8) depending on FPS after click (<a href="https://simplified.dev/performance/impact-of-web-performance">source</a>)</figcaption>
</figure>

<p>Using Google Analytics you can see what type of device the user is using and plot results by specific models to get an answer.</p>
<h2 id="2-Measuring-the-Relative-Mobile-Conversion-Rate"><a href="#2-Measuring-the-Relative-Mobile-Conversion-Rate" class="headerlink" title="2.Measuring the Relative Mobile Conversion Rate"></a>2.Measuring the Relative Mobile Conversion Rate</h2><p>Another easy way to spot performance issues and making a business case is to look at conversation rates. This is <a href="https://www.blog.google/products/marketingplatform/analytics/mobile-challenge-and-how-measure-it/">what Google calls Relative Mobile Conversion Rate (Rel mCvR)</a>, which is calculated by dividing the mobile conversion rate with the desktop conversion rate.</p>
<p>Take this example:</p>
<table style="margin:0 auto 1rem">
    <tr>
        <td></td>
        <th scope="col" style="font-weight:bold;text-align:right;padding:0.5em 1em">Mobile</th>
        <th scope="col" style="font-weight:bold;text-align:right;padding:0.5em 1em">Desktop</th>
    </tr>
    <tr>
        <th style="font-weight:bold;text-align:left;padding:0.5em 1em" scope="row">Conversion rate</th>
        <td style="text-align:right;padding:0.5em 1em">1.79%</td>
        <td style="text-align:right;padding:0.5em 1em">4.44%</td>
    </tr>
    <tr>
        <th style="font-weight:bold;text-align:left;padding:0.5em 1em" scope="row">Rel mCvR</th>
        <td style="font-weight:bold;text-align:right;padding:0.5em 1em" colspan="2">1.79% / 4.44% = 40%</td>
    </tr>
</table>

<p>In this case the Rel mCvR is 40%.</p>
<p>Google says that <strong>a good target for Rel mCvR is 70%</strong>, meaning that mobile conversion rates are 30% lower than desktop. The reason why Rel mCvR can be a good metric is that it is not influenced by changes in traffic (eg seasonality or promotional campaigns). The following diagram explains it in more detail:</p>
<figure>
<div style="position:relative;padding-bottom:50.1462%">
<img
    loading="lazy"
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_rel-mcvr_jgbeqo.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_rel-mcvr_jgbeqo.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_rel-mcvr_jgbeqo.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_rel-mcvr_jgbeqo.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_rel-mcvr_jgbeqo.png"
    alt="Explanation of Relative mobile conversion rate and its components" />
</div>
<figcaption>Explanation of Relative mobile conversion rate and its components (<a href="https://www.blog.google/products/marketingplatform/analytics/mobile-challenge-and-how-measure-it/">source</a>)</figcaption>
</figure>

<p>Note that Rel mCvR is influenced by UX too, since a bad UX on mobile will hurt mobile conversion rates. <strong>You should use <a href="https://web.dev/measure">Lighthouse</a> or <a href="https://www.webpagetest.org/">WebPageTest</a> to ensure that there are performance issues and speed is the main contributor in Rel mCvR, and not usability.</strong></p>
<p>The key question is: <em>what’s the target Rel mCvR?</em> If we knew it we could assess the revenue that an increase in conversion rates would represent. For this we can use a similar approach to the first technique we described, clustering conversion rates based on performance metrics and calculating how many user could be “upgraded” to the following cluster (eg from slow to average experience and from average to fast).</p>
<p><strong>Rel mCvR can also be used to calculate the incremental revenue achieved after making a performance fix</strong>. Measure what was the average Rel mCvR before and after the fix, and calculate what the revenue would have been if Rel mCvR hadn’t changed.
On <a href="https://web.dev/value-of-speed/">their post “Value of Speed”</a> you can find more information about the methodology and framework to measure the revenue impact.</p>
<h2 id="3-Using-Test-My-Site-from-Think-with-Google"><a href="#3-Using-Test-My-Site-from-Think-with-Google" class="headerlink" title="3. Using Test My Site from Think with Google"></a>3. Using Test My Site from Think with Google</h2><p>Google has <a href="https://www.thinkwithgoogle.com/feature/testmysite/">a handy microsite called Test My Site</a> that gives you a snapshot about your site and calculates the potential increase in revenue when improving your site speed. I would describe as a “Lighthouse report for business people”.</p>
<figure>
<div style="position:relative;padding-bottom:63.743%">
<a href="https://www.thinkwithgoogle.com/feature/testmysite/"><img
    loading="lazy"
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site_yxsqan.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site_yxsqan.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site_yxsqan.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site_yxsqan.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site_yxsqan.png"
    alt="Screenshot of Google's Test My Site page" /></a>
</div>
<figcaption>Screenshot of <a href="https://www.thinkwithgoogle.com/feature/testmysite/">Google's Test My Site page</a></figcaption>
</figure>

<p>To calculate the potential increase in revenue you only need to provide your average monthly visitors, conversion rate, and average order value.</p>
<figure>
<div style="position:relative;padding-bottom:48.83%">
<img
    loading="lazy"
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site-potential-revenue_meu5vx.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site-potential-revenue_meu5vx.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site-potential-revenue_meu5vx.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site-potential-revenue_meu5vx.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1584185288/assess-performance-impact/assess-performance-impact_test-my-site-potential-revenue_meu5vx.png"
    alt="Calculating potential increase in annual revenue using Google's Test My Site" /></a>
</div>
<figcaption>Calculating potential increase in annual revenue using <a href="https://www.thinkwithgoogle.com/feature/testmysite/">Google's Test My Site page</a></figcaption>
</figure>

<p>Behind the scenes it is powered by data from the Chrome User Experience report database or HTTP Archive, which contains performance metrics gathered from real users that have visited your site (if you are interested in this data I recommend checking <a href="https://crux.run/">CRUX.RUN</a>). It also uses Lighthouse to calculate the potential savings in loading time.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Always complement your performance audits with assessment of expected revenue to understand the expected impact of the changes.</p>
]]></content>
    
    <summary type="html">
    
      Learn about several ways of assessing the potential performance gains before implementing improvements. This will help building the case and prioritizing performance work.
    
    </summary>
    
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Developing modern sites with good performance</title>
    <link href="https://jmperezperez.com//modern-sites-good-performance"/>
    <id>https://jmperezperez.com//modern-sites-good-performance</id>
    <published>2019-02-01T06:15:00.000Z</published>
    <updated>2021-12-14T07:52:53.542Z</updated>
    
    <content type="html"><![CDATA[<p>Poor performance leads to exclusion. When we create heavy sites we limit what users can access our content. Those with more powerful devices and better network will get sites loaded faster. Those with older devices and slower network will need to wait more.</p>
<div style="position:relative;padding-bottom:66.6666%;margin-bottom:1rem">
<img
    loading="lazy"
    style="max-width:100%; border: 0;position:absolute;top:0;left:0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1549005393/android-apps-hand-15092_zj2jkp.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1549005393/android-apps-hand-15092_zj2jkp.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1549005393/android-apps-hand-15092_zj2jkp.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1549005393/android-apps-hand-15092_zj2jkp.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1549005393/android-apps-hand-15092_zj2jkp.jpg"
    alt="A user with a mobile phone on their hand" />
</div>
<span id="more"></span>

<h2 id="Why-performance-is-important"><a href="#Why-performance-is-important" class="headerlink" title="Why performance is important"></a>Why performance is important</h2><p><a href="https://wpostats.com/">Study after study</a> shows how slowing sites down results in less engagement, less time on the site and a general decrease in key business metrics. Still, in our development teams we continue to prioritize more highly shipping features over addressing web performance.</p>
<p>Don’t get me wrong, features are important. Serving an empty site is fast, but not very useful. It’s important to deliver a core set of features, and do it in such a way that many users can enjoy it. Just keep in mind that if they user can’t use the product we will lose them, no matter how much we have worked on the feature set.</p>
<h2 id="Our-role-promoting-performance"><a href="#Our-role-promoting-performance" class="headerlink" title="Our role promoting performance"></a>Our role promoting performance</h2><p>Developers play a key role in prioritizing performance. They can steer what tasks the development team works on, and they can prove with results the impact of the changes.</p>
<p>While some performance improvements might be costly in time, there are usually lots of low-hanging fruits that can drive to big improvements. And we are more prepared than ever to do a good job.</p>
<p>We have a better understanding of how the browser and network works, and how to serve content to the user without incurring in delays. We also use tools to build our sites that help us defining dependencies and delivering a small payload, tailored to the current session.</p>
<h2 id="Taking-advantage-of-modern-tools"><a href="#Taking-advantage-of-modern-tools" class="headerlink" title="Taking advantage of modern tools"></a>Taking advantage of modern tools</h2><p>Single Page Applications and the trend of moving most of the logic to the client comes with performance implications. There is now more work to do in the browser, like data-fetching, templating or routing, which makes sites slower out-of-the-box. If we don’t stop there and explore the beauty of component-based sites we will see that <a href="/high-performance-lazy-loading/">code-splitting and lazy-loading</a> fit perfectly in the picture and they allow us, for the first time, to be smart on how we ship code while keeping complexity at a minimum.</p>
<p>While it can be difficult to keep track of every new tool and browser API, it’s important to be aware of them. It wouldn’t be smart to jump immediately on them and rewrite constantly our product on the latest and trendiest stack, but we can learn something from them.</p>
<p>I get inspired by tools like <a href="https://www.gatsbyjs.org/">Gatsby</a> or <a href="https://nextjs.org/">Next.js</a>. They let us build sites that have a high performance out of the box. What they do is not black magic, but making a good job serving what is needed for the current page, and deferred the loading of the rest of the content. Nothing prevents us from adopting some of those techniques to our projects to give them a boost.</p>
<h2 id="The-web-that-is-coming"><a href="#The-web-that-is-coming" class="headerlink" title="The web that is coming"></a>The web that is coming</h2><p>The future looks bright. We are decoupling UI and data. We are creating sites that can be run on a laptop, phone, TV or <a href="https://developer.apple.com/videos/play/wwdc2018/239/">smartwatch</a>. We are building offline experiences and sites that synchronize in the background and handle push notifications. We are moving desktop applications to the web, seamlessly running <a href="https://developer.mozilla.org/docs/WebAssembly">assembly code</a> in the browser.</p>
]]></content>
    
    <summary type="html">
    
      Performance affects user engagement but also can leave many users out. Fast sites are key to democratize the web and let everyone enjoy our products and services.
    
    </summary>
    
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Fostering a Web Performance Culture</title>
    <link href="https://jmperezperez.com//fostering-web-performance-culture"/>
    <id>https://jmperezperez.com//fostering-web-performance-culture</id>
    <published>2018-06-02T14:00:00.000Z</published>
    <updated>2021-12-14T07:52:53.534Z</updated>
    
    <content type="html"><![CDATA[<p>Web Performance is not only about understanding what makes a site fast. It’s about creating awareness amongst both developers and non-developers. Performance is a feature and needs to be prioritized as such.</p>
<p><img
    loading="lazy"
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527949830/fostering-web-performance-culture/fostering-web-performance-culture.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527949830/fostering-web-performance-culture/fostering-web-performance-culture.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527949830/fostering-web-performance-culture/fostering-web-performance-culture.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527949830/fostering-web-performance-culture/fostering-web-performance-culture.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527949830/fostering-web-performance-culture/fostering-web-performance-culture.jpg"
    alt="Forstering Web Performance Culture" /></p>
<span id="more"></span>

<p>Performance is a topic that has interested me for a long time. I remember when I learned about dynamic programming, greedy or divide and conquer algorithms. There was something gratifying in taking a code that takes minutes to run and make it run in a handful seconds.</p>
<p>Moving over to web, the performance problems are different. Usually, they are not related with computational complexity, but about serving what’s needed when needed in the best possible way. It might seem like a no-brainer, but it’s more difficult than it seems.</p>
<p><a href="https://stevesouders.com/">Steve Souders</a> was one of the first in reverse-engineering how browsers requested and waited for resources. What resources are blocking? Which ones can be delayed? What about the response headers? He put together <a href="http://stevesouders.com/hpws/rules.php">a list of 14 rules for faster-loading web sites</a>. If you have ever used YSlow, those are <a href="https://blog.keycdn.com/blog/wp-content/uploads/2016/03/yslow-score-test-results-e1457987091251.png">the rules the tool was using to flag performance issues</a>.</p>
<p><img
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527949830/fostering-web-performance-culture/steve-souders-rules.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527949830/fostering-web-performance-culture/steve-souders-rules.jpg 800w,
    https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527949830/fostering-web-performance-culture/steve-souders-rules.jpg 1200w,
    https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527949830/fostering-web-performance-culture/steve-souders-rules.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527949830/fostering-web-performance-culture/steve-souders-rules.jpg"
    sizes="(max-width: 768px) 100vw, 684px"
    style="border: 0"
    alt="Steve Souders’ 14 Rules" />
<small class="caption">Steve Souders’ 14 Rules (<a href="https://blog.keycdn.com/blog/wp-content/uploads/2016/03/yslow-score-test-results-e1457987091251.png">source</a>)</small></p>
<p>These days we have more and better tools to audit our performance. They can be run as a one-off or integrated in our development and deployment pipelines. Google’s <a href="https://developers.google.com/web/tools/lighthouse/">Lighthouse</a> is one of them, which shows information about PWA, SEO and more.</p>
<p><img
    style="max-width:80%; border: 0; margin: 0 auto;"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527950062/fostering-web-performance-culture/lighthouse.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527950062/fostering-web-performance-culture/lighthouse.jpg 800w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527950062/fostering-web-performance-culture/lighthouse.jpg"
    alt="A screenshot of Lighthouse 3.0" />
<small class="caption">A screenshot of Lighthouse 3.0, presented in Google IO 2018 (<a href="https://developers.google.com/web/updates/2018/05/lighthouse3">source</a>)</small></p>
<p>These tools make it easier to determine where we need to put emphasis to improve our sites. At the same time, they open a door to lots of concepts that might be overwhelming: PRPL, RAIL, Paint Timing API, TTI, HTTP/2, Speed Index, Priority Hints <a href="https://docs.google.com/presentation/d/1UcjvtuMT4VAmc-MySWOcc1rLkMNoDjt2DxIhvfHNRXg/present?slide=id.g35f8c548da_0_202">and more</a>…</p>
<h3 id="Why-Performance-doesn’t-get-Prioritized"><a href="#Why-Performance-doesn’t-get-Prioritized" class="headerlink" title="Why Performance doesn’t get Prioritized"></a>Why Performance doesn’t get Prioritized</h3><p>Web performance at organizations is a real challenge. We have better guides and tools than ever, yet very few companies get to spend time improving performance. You see, <strong>it’s not that we don’t know what causes long blank screens on our sites.</strong></p>
<blockquote>
<p>This is not a post explaining why web performance is important.</p>
</blockquote>
<p>There are plenty of other resources that do a way better job, with real numbers from real projects. <strong>This is a post about culture and how it determines what is a priority in our companies</strong>. Only by understanding that can we prioritize performance as another feature of our projects.</p>
<p>If you are reading this you are likely a developer who knows about web and cares about performance. You can represent your team and company if I ask you about where you work and what you do. But <strong>most likely you are not representative for the rest of web developers in your team and company</strong>, unless you are working on your own. And this is fine. The same way you can’t know everything about every discipline.</p>
<p>In your daily job you have lots of technical areas to care about. You will work hard on implementing features, collaborating with other teams (eg adding scripts for analytics, ads, retargeting, A/B test), setting up CI/CD, ensuring security, and making sure the project is usable and pleasant to the eye. And don’t forget about covering your back with tests.</p>
<p>You might never have time to look beyond that. Time is finite while your backlog is ever increasing. There needs to be some prioritization.</p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527949830/fostering-web-performance-culture/scrum-board.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527949830/fostering-web-performance-culture/scrum-board.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527949830/fostering-web-performance-culture/scrum-board.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527949830/fostering-web-performance-culture/scrum-board.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527949830/fostering-web-performance-culture/scrum-board.png"
    alt="A scrum board showing perfmatters at the bottom" /></p>
<p><strong>The prioritization should be objective and based on measurable hypothesis.</strong> “We think that by implementing feature X, user retention will grow Y%”. In practice this setup is more difficult. Let’s take a look at those topics we need to care about and think about who proposes them:</p>
<ul>
<li><p><strong>Implementing features</strong>: Normally a PO/PM determines what needs to be done next, according to a vision and mission for the team. The feature might come from stakeholders that have a dependency on us (eg adding a third-party script for <a href="https://simonhearne.github.io/weak-links">tracking or A/B testing</a>)</p>
</li>
<li><p><strong>Setting up CI/CD</strong>: Although developers could come up with their own build and deployment pipelines, chances are that they are relying on some infrastructure provided by another team (eg an “infra” team)</p>
</li>
<li><p><strong>Security</strong>: Hopefully there’s a team or individual with deep knowledge about security that help us reviewing system designs, implementations, and informs us about reports or and security patches.</p>
</li>
<li><p><strong>UI/UX</strong>: There is usually a designer and/or UX person that sets the look &amp; feel and information architecture.</p>
</li>
<li><p><strong>Testing</strong>: Well, we should write some tests, right?</p>
</li>
</ul>
<p>When someone has the responsibility for a task to be done it will be more likely to be on the board. Most of them can be traced back to a certain role, but others like testing are something developers are supposed to do. Tests are up to the team, and so some parts will be better tested than others.</p>
<p>We agree that having automated tests is positive. Normally the team decides how well to cover and test the code, and it’s important that all developers in a team know how to write tests. Similar to testing, performance is usually left to the developers to figure out. I find that <strong>it is easier to write tests for a piece of code and knowing the implications of broken code in production, than understanding all the moving boxes that can lead to a bad web performance</strong>.</p>
<h2 id="6-steps-to-start-a-web-performance-culture"><a href="#6-steps-to-start-a-web-performance-culture" class="headerlink" title="6 steps to start a web performance culture"></a>6 steps to start a web performance culture</h2><p>We have the tools to measure performance, though working on it will be up to the team. How can we reach awareness, think of performance as a feature, and have the support of the company?</p>
<p>I have collected a list of 6 ideas that will take you closer to establish a web performance culture.</p>
<h3 id="1-Your-dev-environment-is-not-your-user’s-environment"><a href="#1-Your-dev-environment-is-not-your-user’s-environment" class="headerlink" title="1. Your dev environment is not your user’s environment"></a>1. Your dev environment is not your user’s environment</h3><p><img
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto,c_scale/v1527950325/fostering-web-performance-culture/emile-perron-190221-unsplash.jpg"
    sizes="(max-width: 768px) 100vw, 684px"
    style="border: 0"
    alt="Light Work, a picture by Émile Perron" />
<small class="caption"><a href="https://unsplash.com/photos/xrVDYZRGdw4/info">Light Work</a>, a picture by <a href="https://unsplash.com/@emilep">Émile Perron</a></small></p>
<p>I use a Macbook Pro to develop websites. I have an iPhone X as my phone, and my testing device. Also, the speed of my internet connection is humongous and I’m close to data centres located in Stockholm and London. When I finish my job for the day I take the subway, where I have an uninterrupted 4G connection. In fact, Stockholm was the <a href="https://www.ericsson.com/en/press-releases/2009/12/worlds-first-4glte-network-goes-live-today-in-stockholm">first city in installing 4G back in 2009</a>.</p>
<p>Except for exceptionally few cases, the users of your product don’t have a similar environment. Not even close.</p>
<p>**How can we prioritize performance if we don’t perceive performance issues? **It’s like making something accessible without trying to use keyboard navigation, screen readers nor color contrast checkers. There is no way.</p>
<p>And this is not about to change. Western web developers enjoy using the latest laptops and gadgets. And the chain goes up to pretty much any person responsible for prioritizing tasks and project are your company. Not only that, but in some cases we may prioritize top devices because those are the ones used by the users that are most likely to pay for our product. As <a href="http://www.brucelawson.co.uk/">Bruce Lawson</a> put it, we should be building the “world-wide web, not the wealthy western web”.</p>
<div class="videoWrapper">
<iframe src="https://player.vimeo.com/video/194968584?byline=0&portrait=0" width="684" height="385" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen loading="lazy"></iframe>
</div>

<p>Ask yourself if having more users, even though they are <em>less worth</em> economically, is better than having fewer potentially good ones.</p>
<p>An interesting ramification of not using user’s devices is that <strong>we make false assumptions</strong>. Let’s say we have decided to take a look at the usage stats and deprecate those platforms that have fewer users, or fewer usage (eg less page views per session), in a way to simplify the development and reduce entropy. <strong>There is no point in supporting an old browser that almost nobody uses</strong>. One could argue this is a metric-driven decision.</p>
<p>Well, not so fast. <strong>What if we are having fewer users or usage on a platform because is just less usable/enjoyable/performant?</strong> This is difficult to prove because developers will say that “the experience” is what they are seeing on their computers using, for example, Google Chrome. Without a bad intention we tend to prioritize the browser we use, and in that prioritization we often decide on trade-offs in favour of the modern environment. “Why are users still using that browser, they should upgrade” I hear you yelling.</p>
<p>Recently I came across this quote, which I really liked:</p>
<blockquote>
<p>“When I was at Google, someone told me a story about a time that “they” completed a big optimization push only to find that measured page load times increased. When they dug into the data, they found that the reason load times had increased was that they got a lot more traffic from Africa after doing the optimizations. The team’s product went from being unusable for people with slow connections to usable, which caused so many users with slow connections to start using the product that load times actually increased.” — <a href="https://danluu.com/web-bloat/">Dan Luu on “Web Bloat”</a></p>
</blockquote>
<p>Again, it’s easy to fake performance optimization by leaving out the bad metrics, blocking users who spoil the stats. This is not real performance optimization, <strong>this is just playing with the numbers</strong>.</p>
<p><strong>Get yourself, and the people working on your project, an old device. Simulate bad network conditions and slow CPUs and make your project resilient. Figure out what devices users own and be careful prioritizing based on what devices users use on your site.</strong></p>
<h3 id="2-It’s-better-to-learn-the-fundamentals-than-the-library"><a href="#2-It’s-better-to-learn-the-fundamentals-than-the-library" class="headerlink" title="2. It’s better to learn the fundamentals than the library"></a>2. It’s better to learn the fundamentals than the library</h3><p>There are still lots of job descriptions and interview processes that focus on libraries and not the underlying technology. What happens when a browser tries to load a website? What are some reasons why a site can take too long to load? How would you architecture a non-trivial size web project (client, server, databases, caching layer)?</p>
<p>A developer that is aware of this will make better decisions when choosing what npm libraries to add to the project. They will provide a unique point of view when building features with designers and stakeholders. They will keep an eye on new and old browser APIs and will try to take advantage of the platform, rather than trying to isolate it.</p>
<p>Your team might need to hire someone familiar with React or Vue. You want them to be productive from day 1, and move the project forward. At the same time you want new hires to stay long at the company, encourage them to question the existing tech decisions and come up with better ones.</p>
<p>There are 2 constants I’ve seen as a developer over and over again:</p>
<ol>
<li><p> <strong>You need to challenge your own company, otherwise a competitor will do.</strong> Promote feedback from individual contributors and give them time to create innovative prototypes and POCs.</p>
</li>
<li><p> <strong>The technical decisions you take today have a very short lifespan.</strong> Optimize for deletion, modularity and quick delivery.</p>
</li>
</ol>
<p>If you agree with the above you will benefit from ideas by people that aren’t sold to a specific technology, and can articulate pros and cons for different tech decisions.</p>
<p>Get involved in the interview process. Propose having time to learn about topics (lunch &amp; learn / brown bags) and hack on ideas that can benefit your projects, which leads us to the next point.</p>
<h3 id="3-Get-the-time-to-experiment-and-validate"><a href="#3-Get-the-time-to-experiment-and-validate" class="headerlink" title="3. Get the time to experiment and validate"></a>3. Get the time to experiment and validate</h3><p>I used to send links to my colleagues about the latest Google I/O talk or medium article talking about some new stuff. I found it useful to keep up to date and thought that I was keeping my mates updated too.</p>
<p><strong>Often, by blindly sharing content you are making them work harder.</strong> Not only do they have to do their job, but now they also have the peer pressure of reading what you shared. Chances are they better learn by putting it in practice, so now they have the added pressure of having to try out that new library/technique/idea.</p>
<p>Make them a favor and try to apply the novelty to a project at your company. Instead of thinking “That new browser API sounds cool”, think “<strong>This is how using X will improve our project</strong>”. Sure, it’s more difficult to achieve, but way more valuable. That’s how you can convince your boss.</p>
<p>There is a lot research on how performance optimization improves key metrics and sites like <a href="https://wpostats.com/">WPO Stats</a> are a good source of case studies.</p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527951116/fostering-web-performance-culture/wpo-stats.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527951116/fostering-web-performance-culture/wpo-stats.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527951116/fostering-web-performance-culture/wpo-stats.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527951116/fostering-web-performance-culture/wpo-stats.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527951116/fostering-web-performance-culture/wpo-stats.jpg"
    alt="Lots of case studies where changes in performance led to key metric improvement." />
<small class="caption">Lots of case studies where changes in performance led to key metric improvement.</small></p>
<p>As clear as it can be, sometimes we need more evidence than these case studies to prioritize performance at our companies.</p>
<p>You might be thinking you will never get the time to work on that POC. You are too busy working on tickets, either for fixing bugs or adding some new features.</p>
<p>In my mind, this is how features should be thought:</p>
<p><img
    style="border: 0; margin: 0 auto;"
    sizes="(max-width: 468px) 100vw, 400px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527951150/fostering-web-performance-culture/idea-validate-build.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527951150/fostering-web-performance-culture/idea-validate-build.png 800w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527951150/fostering-web-performance-culture/idea-validate-build.png"
    alt="Idea -> Validate -> Build" /></p>
<p>The idea can come from a PO/PM, but <strong>also from a developer</strong>. It should be tested, proved that it works, through a prototype or an MVP. Only then it will be built. This also means that everything we build should have had some form of validation. <strong>We should be required to prove why making performant sites drives metrics, but the same applies to any other feature.</strong></p>
<p>If you had to pick something that you wanted to speed up, choose one that users can perceive. <strong>In order for users to barely see a difference in time duration, <a href="https://www.smashingmagazine.com/2015/09/why-performance-matters-the-perception-of-time/">it has to be changed by a minimum of 20%</a>.</strong> Ideally, <a href="https://www.machmetrics.com/speed-blog/highlights-perfmatters-2018-web-performance-conference/">shoot for 30% speed improvements</a>.</p>
<h3 id="4-Educate-your-Colleagues"><a href="#4-Educate-your-Colleagues" class="headerlink" title="4. Educate your Colleagues"></a>4. Educate your Colleagues</h3><p>Have you ever been in a situation where some piece of code was removed or replaced because nobody understood what it did? Most of us have been there. The author was the only one who could maintain it and make sense of it. What happens if that person goes on vacation, parental leave, gets sick, leaves the company…?</p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527951108/fostering-web-performance-culture/github-remove-code.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527951108/fostering-web-performance-culture/github-remove-code.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527951108/fostering-web-performance-culture/github-remove-code.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527951108/fostering-web-performance-culture/github-remove-code.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527951108/fostering-web-performance-culture/github-remove-code.jpg"
    alt="Taking advantage of John’s absence, let’s simplify this thing." />
<small class="caption">Taking advantage of John’s absence, let’s simplify this thing.</small></p>
<p>Most of us work in a team and we need to put emphasis in choosing solutions that most colleagues understand. <strong>Find what the lowest common denominator is in the team, and avoid over-engineered solutions just because they are fun to build</strong>. When it comes to performance optimization, it is very easy to introduce a lot of complexity for the sake of small savings.</p>
<p>A few months ago <a href="https://medium.com/@jmperezperez/lazy-loading-images-on-the-web-to-improve-loading-time-and-saving-bandwidth-ec988b710290">I wrote about image optimization and how to improve perceived performance</a>. It started with the obvious: avoid requests, choose the right format, optimize the images. However, most people only remember the creative use of the placeholders to have a smooth transition to the final image.</p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527953176/fostering-web-performance-culture/placeholder-options.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527953176/fostering-web-performance-culture/placeholder-options.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527953176/fostering-web-performance-culture/placeholder-options.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527953176/fostering-web-performance-culture/placeholder-options.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527953176/fostering-web-performance-culture/placeholder-options.png"
    alt="Different content that we can show in the placeholder before the image is loaded." />
<small class="caption">Different content that we can show in the placeholder before the image is loaded.</small></p>
<p>Sure, that’s the most fun and innovative part! Now, go to your team and tell them you are going to create a backend service that will process images in a queue and store a tiny thumbnail that is served inline when rendering. When will that be run? How long does it take to run? Where do you store? How do you scale it through different servers?</p>
<p>The most savings are accomplished by not serving images and optimize the ones you serve. That’s the sweet spot. Aim for that.</p>
<p>Apart from choosing “good enough” solutions that most of your team understand, <strong>think about ways to raise the bar in your team</strong>. Are you an expert in a certain area? Arrange a presentation and show them. Get them excited.</p>
<p>If you are the only one pushing for an idea, it will die sooner than later.</p>
<h3 id="5-Share-and-celebrate-success-and-failure-stories"><a href="#5-Share-and-celebrate-success-and-failure-stories" class="headerlink" title="5. Share and celebrate success (and failure) stories"></a>5. Share and celebrate success (and failure) stories</h3><p>Changing the culture of a company starts with small battles, usually at a team level. Share the results of your experiments beyond your team.</p>
<p>Within the company, <strong>it will get colleagues inspired and it will spin off larger initiatives</strong>. It will be easier to get support for infrastructure or services if several teams have the same needs.</p>
<p>Externally, <strong>it’s a way to attract talent and show a compromise with clients and users</strong>.</p>
<p>I’m particularly fond of Etsy’s openness when it comes to web performance. Internally:</p>
<blockquote>
<p>“The performance team at Etsy maintains a dashboard celebrating people on other teams who contribute to performance improvements. we include their photo, a graph showing the performance improvement, and a brief description of their solution.” — <a href="http://designingforperformance.com/changing-culture/">Lara Hogan on “Changing Culture at Your Organization</a>”</p>
</blockquote>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 600px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527953178/fostering-web-performance-culture/chris-fairbanks.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/f_auto/v1527953178/fostering-web-performance-culture/chris-fairbanks.jpg 600w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527953178/fostering-web-performance-culture/chris-fairbanks.jpg"
    alt="Chris Fairbanks acknowledged for optimizing the mobile purchases page at Etsy" />
<small class="caption">Chris Fairbanks acknowledged for optimizing the mobile purchases page at Etsy</small></p>
<p>And externally, <a href="https://www.slideshare.net/mikebrittain/web-performance-culture-and-tools-at-etsy">they have been talking and posting for years</a> about their challenges and performance state.</p>
<p><img
    style="max-width:100%;"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527951166/fostering-web-performance-culture/etsy-performance-reports.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527951166/fostering-web-performance-culture/etsy-performance-reports.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527951166/fostering-web-performance-culture/etsy-performance-reports.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527951166/fostering-web-performance-culture/etsy-performance-reports.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527951166/fostering-web-performance-culture/etsy-performance-reports.jpg"
    alt="Site performance reports on Etsy's blog." />
<small class="caption"><a href="https://codeascraft.com/category/performance/">Site performance reports on Etsy’s blog</a>.</small></p>
<p>Before talking about performance improvements it is important to be open and clear about the current state and where we would like to take it. One of the best examples is <a href="https://www.voxmedia.com/a/go-deeper">Vox Media</a>, the company behind <a href="https://www.theverge.com/">The Verge</a> and other high trafficked sites. In May 2015, Vox Media wrote about the slowness of their site and commitment to make them faster.</p>
<blockquote>
<p>“Our main priority was to <strong>ship first and iterate later</strong> and we often had to move on to the next big project before we had time to fully polish and optimize our latest release, leading us to accumulate a rather <strong>significant amount of performance debt</strong>.” — Vox Media’s <a href="https://product.voxmedia.com/2015/5/6/8561867/declaring-performance-bankruptcy">Declaring performance bankruptcy</a> <em>(emphasis mine)</em></p>
</blockquote>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527953176/fostering-web-performance-culture/vox-media-speedcurve.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527953176/fostering-web-performance-culture/vox-media-speedcurve.png 800w, https://res.cloudinary.com/jmperez/image/upload/f_auto/v1527953176/fostering-web-performance-culture/vox-media-speedcurve.png 941w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527953176/fostering-web-performance-culture/vox-media-speedcurve.png"
    alt="SpeedCurve report for several news sites, including Vox Media’s The Verge" />
<small class="caption">SpeedCurve report for several news sites, including Vox Media’s The Verge (<a href="https://product.voxmedia.com/2015/5/6/8561867/declaring-performance-bankruptcy">source</a>).</small></p>
<p>Vox Media took some performance metrics (first paint, page complete and speed index) and decided on a target. Then, they committed to improve it and posted performance update posts regularly.</p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527953183/fostering-web-performance-culture/vox-media-performance-update.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527953183/fostering-web-performance-culture/vox-media-performance-update.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527953183/fostering-web-performance-culture/vox-media-performance-update.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527953183/fostering-web-performance-culture/vox-media-performance-update.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527953183/fostering-web-performance-culture/vox-media-performance-update.jpg"
    alt="One of Vox Media's posts where they gave an update on their efforts." />
<small class="caption">One of Vox Media’s posts where they gave an update on their efforts.</small></p>
<p>In summary, don’t be afraid of recognizing that your product has a bad performance and be public about it. You will find people that want to help fixing it and it will show you are committed to improve it.</p>
<h3 id="6-Make-performance-part-of-your-workflow"><a href="#6-Make-performance-part-of-your-workflow" class="headerlink" title="6. Make performance part of your workflow"></a>6. Make performance part of your workflow</h3><p>It’s important that your performance checks are integrated in the regular workflow of your team, and are as automated as possible. This way you will be more likely to succeed when evangelizing about performance.</p>
<p>There are great tools to detect performance issues like <a href="http://webpagetest.org/">WebPagetest</a>, <a href="https://developers.google.com/speed/pagespeed/insights/">Pagespeed Insights</a> or the <a href="https://developers.google.com/web/tools/lighthouse/">Audits on Chrome Dev Tools</a>. They are good for getting a quick report of your site’s performance.</p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527953183/fostering-web-performance-culture/webpagetest.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527953183/fostering-web-performance-culture/webpagetest.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527953183/fostering-web-performance-culture/webpagetest.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527953183/fostering-web-performance-culture/webpagetest.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527953183/fostering-web-performance-culture/webpagetest.jpg"
    alt="A screenshot of WebPagetest." />
<small class="caption">WebPagetest is very useful for creating performance reports.</small></p>
<p>You will want to automate the reports to detect issues without having to rely on developers running these tools manually.</p>
<p>The MVP is to set a <a href="https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/">performance budget</a>, run performance audits on your production site on a daily basis, and be notified when those budgets aren’t met. This will help you catching issues and narrow down what deployments might have caused it, and you barely need to set it up.</p>
<p>If you want to go beyond, run the tests as part of your pull-request checks. That way you won’t merge nor deploy code that decreases the performance. This type of testing is called <a href="https://www.oreilly.com/ideas/web-performance-tools-synthetic-vs-rum">synthetic</a>, since it’s performed automatically by a script with a predefined environment (device, network speed, location…).</p>
<p>A complement to synthetic tests are RUM tests. These are based on real users browsing your site. The idea is to collect some metrics like load time or <a href="https://medium.com/@jmperezperez/performanceobserver-and-paint-timing-api-72d3e5b384ea">first-paint</a>, and post them to some service that you can use to visualize and compare them.</p>
<p>Although you can use something basic like Google Analytics with custom events, I recommend you to use tools tailor-made for this. Check <a href="https://calibreapp.com/">Calibre</a>, <a href="https://speedcurve.com/">SpeedCurve</a> or <a href="https://www.sitespeed.io/">SiteSpeed</a>.</p>
<video controls style="display:block; margin: 0 auto" width="594" height="516">
  <source src="https://res.cloudinary.com/jmperez/video/upload/v1527954529/fostering-web-performance-culture/calibre.mp4" type="video/mp4">
</video>
<small class="caption">Calibre’s integration with Slack. Whenever a budget is exceeded, Calibre will notify you.</small>

<p><strong>Performance monitoring should be effortless. You should only know about it when you need to act on it.</strong></p>
<p>In general, using these tools cost money in form of a subscription. Other open-source tools like SiteSpeed will require you to host it, so take into account the time to set it up. It’s essential that you think twice how you are going to propose adding these tools.</p>
<h2 id="A-concrete-example-to-wrap-up"><a href="#A-concrete-example-to-wrap-up" class="headerlink" title="A concrete example to wrap-up"></a>A concrete example to wrap-up</h2><p>A few months ago I proposed to use Calibre to monitor web performance. In the past I would have proposed it as another happy idea but this time I wanted it to succeed. This is what I did:</p>
<ul>
<li><p><strong>Try the product out for myself.</strong> Sign up for a trial, set up monitoring for our websites, use realistic conditions (locations, network speed) and start gathering data.</p>
</li>
<li><p><strong>Present it to the team.</strong> Once I was convinced about the product, I prepared presentation for my team exposing the problems we had and how a tool like this could improve the situation. I went through the tool and proposed using it for 3 months, taking a decision on whether to continue using it.</p>
</li>
<li><p><strong>Formalize it.</strong> I wrote a formal proposal so stakeholders could review. This included sections like “Why use something at all”, “Why use Calibre”, “Advantages”, “Disadvantages” and “Roadmap”. Having a deadline to take a decision whether to use a paid product is appreciated by everyone.</p>
</li>
</ul>
<p>Why was the proposal valuable? It ticked all the 6 ideas that I have talked about in the article.</p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1527949830/fostering-web-performance-culture/six-ideas.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1527949830/fostering-web-performance-culture/six-ideas.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1527949830/fostering-web-performance-culture/six-ideas.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1527949830/fostering-web-performance-culture/six-ideas.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1527949830/fostering-web-performance-culture/six-ideas.png"
    alt="Six ideas to set a performance culture." /></p>
<ol>
<li><p> It tested the sites using several locations and constraints, as opposed to our ideal office conditions.</p>
</li>
<li><p> It was library/framework independent. You can choose whatever tool to build your website, in the end we care about a fast experience.</p>
</li>
<li><p> It was applied to our projects, what made the solution relevant, not just another link to a random article.</p>
</li>
<li><p> The team was informed, knew how to use the tool and collectively agreed to move this forward.</p>
</li>
<li><p> It helped visualize performance and see its evolution, which was useful to share results with the rest of web developers at the company. These tools force you to set thresholds for rejecting PRs or getting notified, which become your performance budget.</p>
</li>
<li><p> It was part of our workflow and could run effortless, not jeopardizing other tasks.</p>
</li>
</ol>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Thanks for reading! I hope I gave you some tips to help you in the quest of building more performant sites.</p>
]]></content>
    
    <summary type="html">
    
      Some ideas to create awareness around performance optimization in a team and company.
    
    </summary>
    
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Increase the Performance of your Site with Lazy-Loading and Code-Splitting</title>
    <link href="https://jmperezperez.com//high-performance-lazy-loading"/>
    <id>https://jmperezperez.com//high-performance-lazy-loading</id>
    <published>2018-04-06T04:00:00.000Z</published>
    <updated>2021-12-14T07:52:53.533Z</updated>
    
    <content type="html"><![CDATA[<p>Componentization has marked a before and after in web development. The main advantages that are usually mentioned is reusability and modularization. Well defined pieces that we can use to build our sites, like bricks of Legos. It turns out this component structure provides a great foundation to improve the performance of our sites.</p>
<p><img
    loading="lazy"
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995807/high-performance_mbjoct.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995807/high-performance_mbjoct.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995807/high-performance_mbjoct.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995807/high-performance_mbjoct.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995807/high-performance_mbjoct.jpg"
    alt="" /></p>
<p>We are explicit about our dependencies, so we know what code we need to run to run a specific component. Lazy-loading and bundle splitting can have a huge impact on page performance: less code requested, parsed, and executed. And this not only applies to JavaScript, but every type of asset.</p>
<p>I see many sites that could take advantage of this, and I wanted to show how some basic techniques to load content as needed.</p>
<span id="more"></span>

<p>The article will be using Preact/React, yet the ideas can be applied to any other component library.</p>
<p>We are going to cover several topics:</p>
<ol>
<li> <a href="#Compositional-Patterns">Compositional Patterns</a>: Overview of a couple of patterns that we can use to build complex components.</li>
<li> <a href="#Improving-performance-of-our-sites-by-loading-only-what-is-needed">Improving performance of our sites by loading only what is needed</a>: A practical case where we will apply lazy-loading.</li>
<li> <a href="#A-small-component-to-detect-when-an-area-is-visible">A small component to detect visibility</a>: A simple component that wraps the logic to notify when an element appears on screen.</li>
<li> <a href="#More-use-cases">More use cases</a>: We will see that a component to detect visibility can also be useful in other situations.</li>
<li> <a href="#Polyfilling-IntersectionObserver-on-demand">Polyfilling IntersectionObserver on-demand</a>: How we can include a polyfill only when needed.</li>
<li> <a href="#Code-Splitting-and-CSS-in-JS">Code Splitting and CSS-in-JS</a>: How CSS-in-JS extends code-splitting and lazy-loading to CSS, SVGs and other resources.</li>
<li> <a href="#Useful-implementations">Useful implementations</a>: Existing npm libraries that implement the pattern we have gone through.</li>
</ol>
<p>Let’s start!</p>
<h2 id="Compositional-Patterns"><a href="#Compositional-Patterns" class="headerlink" title="Compositional Patterns"></a>Compositional Patterns</h2><p>In a component world components aren’t only used for rendering actual pixels on the screen. They can also wrap functionality that is passed to children components.</p>
<p>This is usually achieved using <a href="https://reactjs.org/docs/higher-order-components.html">High Order Components (HOC)</a>. These components receive another component and add some functionality, like a behavior.</p>
<p>If you have used redux, the <code>connect</code> function is a HOC that receives your not-connected component. You can find more examples on “<a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e">React Higher Order Components in depth</a>“ by Fran Guijarro.</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>id<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">-</span> <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// ...</span>

<span class="token keyword">const</span> ConnectedComponent <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>
  mapStateToProps<span class="token punctuation">,</span>
  mapDispatchToProps
<span class="token punctuation">)</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Function as Child Component (also known as “<a href="https://reactpatterns.com/#render-callback">Render Callback</a>“) is another pattern used in similar scenarios. It is getting quite popular these days. You might have come across them in <a href="https://github.com/ReactTraining/react-media">react-media</a> or <a href="https://github.com/jamiebuilds/unstated">unstated</a>.</p>
<p>Look at this example taken from react-media:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Media</span> <span class="token attr-name">query</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(max-width:</span> <span class="token attr-name">599px)"</span><span class="token punctuation">></span></span>
    <span class="token entity" title="&#123;">&amp;#123;</span>matches <span class="token operator">=</span><span class="token operator">></span>
      matches <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The document is less than 600px wide<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The document is at least 600px wide<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token punctuation">)</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Media</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The <code>Media</code> component calls its children passing a <code>matches</code> argument. This way, the children components don’t need to know about the media query. Componentizing generally makes testing and maintenance easier.</p>
<h2 id="Improving-performance-of-our-sites-by-loading-only-what-is-needed"><a href="#Improving-performance-of-our-sites-by-loading-only-what-is-needed" class="headerlink" title="Improving performance of our sites by loading only what is needed"></a>Improving performance of our sites by loading only what is needed</h2><p>Imagine a typical web page. You can check <a href="https://css-tricks.com/website-sameness/">Website Sameness</a> or <a href="https://www.friday.ie/journal/why-do-all-websites-look-the-same/">Web Design Trends: Why Do All Websites Look The Same?</a> for some inspiration :) . The example page we are going to use contains several sections or blocks:</p>
<ul>
<li>a header (these days, a large hero image taking the whole above-the-fold area)</li>
<li>a section with a few images</li>
<li>another section with a heavy component like a map</li>
<li>a footer</li>
</ul>
<p style="max-width:300px;display:block;margin-left:auto;margin-right:auto">
<img
    loading="lazy"
    style="max-width:100%"
    sizes="300px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:300,f_auto/v1523084060/observer/site.png 300w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:600,f_auto/v1523084060/observer/site.png 600w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:900,f_auto/v1523084060/observer/site.png 900w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1523084060/observer/site.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:300,f_auto/v1523084060/observer/site.png"
    alt="A typical website" />
<small class="caption">The basic structure of a page we will be using as example.</small>
</p>

<p>This, mapped into React components, would be something like this:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gallery</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Map</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
</code></pre>
<p>When the user visits the page, it is highly likely that they will see the header on screen. After all, it’s the top most component. It is less likely that they see the gallery, map and footer, unless they scroll.</p>
<p>Most times you would include all the scripts and CSS needed to render all sections as soon as the user visits the page. Until recently it was difficult to define a module’s dependencies, and load what was needed.</p>
<p>Years ago, pre-ES6, large companies came up with their own solutions to define dependencies and load them as needed. Yahoo built <a href="https://books.google.com/books?id=E7p-07kNfXYC&pg=PA65&lpg=PA65&dq=yahoo+yui+loader&source=bl&ots=UOcpQHdaRp&sig=AGTHNZvPYXWdU9lkj9klzTEa3ys&hl=en&sa=X&ved=0ahUKEwjn26Wti8PZAhUJDSwKHQOsCbIQ6AEIVDAG#v=onepage&q=yahoo%20yui%20loader&f=false">YUI Loader</a> and Facebook wrote <a href="/facebook-frontend-javascript/">Haste, Bootloader and Primer</a>.</p>
<p>When you send the user code that is not needed, you waste resources from your end, and from the user’s end. More bandwidth to transfer the data, more CPU to parse and execute them, and more memory to keep around. And those assets will steal the limited resources from other critical assets that need it more urgently.</p>
<p>What’s the point in requesting resources that the user will not need, like images that the user won’t reach? Or loading a 3rd party component like a Google Map, with all its additional assets needed to render the thing?</p>
<p>A code coverage report, like <a href="https://developers.google.com/web/updates/2017/04/devtools-release-notes#coverage">the one Google Chrome provides</a> <strong>won’t help us much</strong>. The JS code will be executed and the CSS applied to elements that aren’t visible.</p>
<p><img
    loading="lazy"
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995652/observer/chrome-coverage.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995652/observer/chrome-coverage.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995652/observer/chrome-coverage.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995652/observer/chrome-coverage.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995652/observer/chrome-coverage.png"
    alt="Code coverage tab on Google Chrome" /></p>
<p><small class="caption">Code coverage tab on Google Chrome (<a href="https://developers.google.com/web/updates/2017/04/devtools-release-notes#coverage">source</a>)</small></p>
<p>As with everything else, <strong>there are trade-offs with lazy-loading</strong>. We don’t want to apply lazy-loading to everything. Here are some points to take into account.</p>
<ul>
<li><strong>Don’t lazy load above the fold</strong>. In most cases we want the above-the-fold content to be rendered as soon as possible. Every lazy-loading technique will introduce a delay. The browser has to run the JS that injects the HTML to the document, parse it and start requesting the referenced assets.</li>
</ul>
<p><img
    loading="lazy"
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995652/observer/fold.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995652/observer/fold.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995652/observer/fold.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995652/observer/fold.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995652/observer/fold.png"
    alt="Don't lazy load above the fold" /></p>
<p>Where to set the fold? This is tricky, and it will depend on the user’s device, which varies greatly, and your layout.</p>
<ul>
<li><strong>Lazy load a bit earlier than when it’s needed</strong>. You want to avoid showing void areas to the user. For this, you can load an asset that is needed when it’s closed enough to the visible area. For instance, a user scrolls down and if the image to load is, let’s say, 100px below the bottom of the viewport, start requesting it.</li>
</ul>
<p><img
    loading="lazy"
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995652/observer/preloading.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995652/observer/preloading.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995652/observer/preloading.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995652/observer/preloading.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995652/observer/preloading.png"
    alt="Lazy load a bit earlier than when it's needed" /></p>
<ul>
<li><p>**Invisible content in some scenarios**. You need to take into account that lazy-loaded content won't be shown in some situations:</p>
 - If the lazy-loaded content hasn't been loaded it won't show up when printing the page.
 - The same can happen when the page is shown in RSS readers that might not execute the Javascript needed to load the content.
 - When it comes to SEO, you might have issues indexing lazy-loaded content on Google. At the time of writing this article, Googlebot supports IntersectionObserver and it invokes its callback with changes in the viewport above the fold. However, **it won't trigger the callback for content below the fold**. Thus, **that content won't be seen nor indexed by Google**.
   If you content is important you can, for instance, render the text and lazy-load components like images and other widgets (eg maps).

<p>Here I’m rendering <a href="https://jmperezperez.com/lazy-load/89b6f20e1d79e9fb902242ab84217b12.html">a test page</a> (you can see the source <a href="https://github.com/JMPerez/lazy-load/blob/master/text-above-fold.js">here</a>) using Google Webmaster Tools’ “Fetch as Google”. Googlebot renders the content in the box shown within the viewport, but not the content below it.</p>
<div class="videoWrapper">
  <iframe width="1764" height="1080" src="https://www.youtube.com/embed/YEWaufLXX_Q" frameborder="0" allowfullscreen loading="lazy"></iframe>
</div>
<small class="caption">Rendering [a test page](https://jmperezperez.com/lazy-load/89b6f20e1d79e9fb902242ab84217b12.html) using Google Webmaster Tools' "Fetch as Google".</small></li>
</ul>
<div class="callout">
<strong>Update May 10th 2019</strong>: Google announced during I/O 2019 that <a href="https://webmasters.googleblog.com/2019/05/the-new-evergreen-googlebot.html">they will use an evergreen Googlebot</a>. This puts an end to using Chrome 41 to render pages and it adds support for IntersectionObserver. If you are using Google Search Console to test how Google renders one of your URLs, you will still get the Chrome 41 result. This is because <a href="https://youtu.be/Ey0N1Ry0BPM?t=381">Google hasn't updated their testing tools to use an evergreen Chrome</a>.
</div>

<h2 id="A-small-component-to-detect-when-an-area-is-visible"><a href="#A-small-component-to-detect-when-an-area-is-visible" class="headerlink" title="A small component to detect when an area is visible"></a>A small component to detect when an area is visible</h2><p>I have talked in the past about <a href="/lazy-loading-images/">lazy-loading images</a>. This is just a type of asset that we can lazy-load, but we can apply the technique to other elements.</p>
<p>Let’s build a simple component that will detect when the section is visible in the viewport. For brevity I will use the <a href="https://developer.mozilla.org/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a>, an experimental technology with <a href="https://caniuse.com/#search=intersectionobserver">quite good support</a>.</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> isVisible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">[</span>entry<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> isVisible<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>isIntersecting <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token comment" spellcheck="true">// we create a div to get a reference.</span>
      <span class="token comment" spellcheck="true">// It's possible to use findDOMNode() to avoid</span>
      <span class="token comment" spellcheck="true">// creating extra elements, but findDOMNode is discouraged</span>
      <span class="token operator">&lt;</span>div
        ref<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>div <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> div<span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token operator">></span>
        <span class="token entity" title="&#123;">&amp;#123;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
          <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>The component uses IntersectionObserver to detect that the container intersects with the viewport, that is, it’s visible. We take advantage of React’s lifecycle methods to clean up the IntersectionObserver <a href="https://developer.mozilla.org/docs/Web/API/IntersectionObserver/disconnect">disconnecting it</a> when unmounting.</p>
<p>This basic component could be extended with extra properties passed as <a href="https://developer.mozilla.org/docs/Web/API/Intersection_Observer_API#Intersection_observer_options">options to IntersectionObserver</a> like margins or thresholds, so we can detect elements close to but not intersecting with the viewport. The options are set in the constructor, and they are read-only. Thus, adding support for options means that we would need to reinstantiate the IntersectionObserver with new options when they change, adding some extra logic in <code>componentWillReceiveProps</code> that we are not going to cover here.</p>
<p>Now, we can use this component to lazy load two of our components, <code>Gallery</code> and <code>Map</code>:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Observer</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>isVisible <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gallery</span> <span class="token attr-name">isVisible</span> <span class="token punctuation">/></span></span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Observer</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Observer</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>isVisible <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Map</span> <span class="token attr-name">isVisible</span> <span class="token punctuation">/></span></span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Observer</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
</code></pre>
<p>In the code above I’m just passing the <code>isVisible</code> property to the <code>Gallery</code> and <code>Map</code> components so they handle it. Alternatively we could return the component if visible, or an empty element otherwise.</p>
<p>In any case <strong>make sure that you reserve the area for the lazy-loaded component</strong>. You don’t want content to jump around, so if you know that your <code>Map</code> is 400px height, render a 400px height empty container before the map is rendered.</p>
<p>How do the <code>Map</code> and <code>Gallery</code> components use the <code>isVisible</code> property? Let’s take a look at the <code>Map</code>:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Map</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> initialized<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>

  <span class="token function">initializeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> initialized<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// loadScript loads an external script, its definition is not included here.</span>
    <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'https://maps.google.com/maps/api/js?key=&lt;your_key>'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">const</span> latlng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">google<span class="token punctuation">.</span>maps<span class="token punctuation">.</span>LatLng</span><span class="token punctuation">(</span><span class="token number">38.34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> myOptions <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> zoom<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> center<span class="token punctuation">:</span> latlng <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">google<span class="token punctuation">.</span>maps<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">,</span> myOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initializeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>

  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>initialized <span class="token operator">&amp;&amp;</span> nextProps<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initializeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div
        ref<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>div <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> div<span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>When the container is displayed in the viewport we make a request to inject Google Map’s script, and once loaded we create the map. This is a good example of lazy-loading JavaScript that is not needed from the beginning, and the rest of resources needed to display the map.</p>
<p>The component has a state to avoid reinjecting the Google Map’s script.</p>
<p>Let’s have a look at the <code>Gallery</code> component:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Gallery</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible <span class="token operator">&amp;&amp;</span> nextProps<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Some pictures<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        Picture <span class="token number">1</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible <span class="token operator">?</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/image01.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
        Picture <span class="token number">2</span>
        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible <span class="token operator">?</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/image02.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>The above example defines another stateful component. In fact, we are storing in the state the same information as we did with the <code>Map</code>.</p>
<p>If the Gallery is shown within the viewport, and afterwards it is outside the viewport, the images will remain in the DOM. In most cases this is what we want when working with images.</p>
<h3 id="Stateless-Child-Components"><a href="#Stateless-Child-Components" class="headerlink" title="Stateless Child Components"></a>Stateless Child Components</h3><p>A stateless component could also be interesting. It would allow us to unload images that are not visible anymore, showing back the placeholders:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Gallery <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> isVisible <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Some pictures<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    Picture <span class="token number">1</span><span class="token entity" title="&#123;">&amp;#123;</span>isVisible <span class="token operator">?</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/image01.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
    Picture <span class="token number">2</span>
    <span class="token entity" title="&#123;">&amp;#123;</span>isVisible <span class="token operator">?</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/image02.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>If you do this, <strong>make sure that the images have the right cache response headers</strong> so subsequent requests from the browser hit the cache and it doesn’t download the images again.</p>
<p>If you see yourself making your lazy-loaded components stateful only to track that they have been visible at least once, you can add this logic to the <code>Observer</code> component. After all, <code>Observer</code> is already stateful and it can easily call its children with an additional <code>hasBeenVisible</code> argument.</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token operator">...</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Observer</span><span class="token punctuation">></span></span>
    <span class="token entity" title="&#123;">&amp;#123;</span><span class="token punctuation">(</span>isVisible<span class="token punctuation">,</span> hasBeenVisible<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gallery</span> <span class="token attr-name">hasBeenVisible</span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">// Gallery can be now stateless</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Observer</span><span class="token punctuation">></span></span>
  <span class="token operator">...</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>Another option is to have a variant of the <code>Observer</code> component that only passes a prop like <code>hasBeenVisible</code>. This has the advantage that we can disconnect the IntersectionObserver as soon as the element is in view, since we are not going to change its value. We will call this component <code>ObserverOnce</code>:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ObserverOnce</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>entries <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
      entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div
        ref<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>div <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> div<span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token operator">></span>
        <span class="token entity" title="&#123;">&amp;#123;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
          <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible<span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<h2 id="More-use-cases"><a href="#More-use-cases" class="headerlink" title="More use cases"></a>More use cases</h2><p>We have used the <code>Observer</code> component to load resources on-demand. We can also use it to start animating a component as soon as a user sees it.</p>
<p>Here is an example taken from the React Alicante website. It animates some conference numbers as soon as the user scrolls to that section.</p>
<div style="text-align:center">
  <video width="1064" height="618" controls src="https://res.cloudinary.com/jmperez/video/upload/dpr_auto,f_auto,q_auto/v1522995652/observer/react-alicante.mp4" />
</div>

<p>We could recreate it like this (see <a href="https://codepen.io/jmperez/pen/LQXjYv">example on Codepen</a>):</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ConferenceData</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> progress<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>animationDuration <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>startAnimation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isVisible <span class="token operator">&amp;&amp;</span>
      nextProps<span class="token punctuation">.</span>isVisible <span class="token operator">&amp;&amp;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">!==</span> <span class="token number">1</span>
    <span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>startAnimation <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> tick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
        <span class="token keyword">const</span> progress <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>
          <span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startAnimation<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>animationDuration
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> progress<span class="token punctuation">:</span> progress <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>progress <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>tick<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
      <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token entity" title="&#123;">&amp;#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span> days ·
        <span class="token entity" title="&#123;">&amp;#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">*</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span> talks ·
        <span class="token entity" title="&#123;">&amp;#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span> workshops ·
        <span class="token entity" title="&#123;">&amp;#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">*</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span> attendees
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>Then, we would use it exactly as the rest of components. This shows the power of abstracting the visibility detection logic outside the components that need them.</p>
<h2 id="Polyfilling-IntersectionObserver-on-demand"><a href="#Polyfilling-IntersectionObserver-on-demand" class="headerlink" title="Polyfilling IntersectionObserver on-demand"></a>Polyfilling IntersectionObserver on-demand</h2><p>So far we have been using IntersectionObserver to detect when an element becomes visible. At the time of this writing some browsers (eg Safari) don’t have support for it, so the instantiation of IntersectionObserver will fail.</p>
<p>An option would be to set <code>isVisible</code> to <code>true</code> when IntersectionObserver is not available, which in practice would disable lazy-loading. In a way we would consider lazy-loading as a progressive enhancement:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// isVisible is initialized to true if the browser</span>
    <span class="token comment" spellcheck="true">// does not support IntersectionObserver API</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> isVisible<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>IntersectionObserver<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// only initialize the IntersectionObserver if supported</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>IntersectionObserver<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>entries <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token operator">...</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>Another option, which I prefer, is to include a polyfill like <a href="https://github.com/w3c/IntersectionObserver/tree/master/polyfill">w3c’s IntersectionObserver polyfill</a>. This way IntersectionObserver will work in all browsers.</p>
<p>Following with the topic of loading resources on demand, and to lead by example, we will take advantage of code-splitting to only request the polyfill if needed. That way browsers supporting the API don’t need to fetch the polyfill:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>window<span class="token punctuation">.</span>IntersectionObserver
      <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'intersection-observer'</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>IntersectionObserver</span><span class="token punctuation">(</span>entries <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> isVisible<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>isIntersecting <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>You can see <a href="https://react-intersection-observer.stackblitz.io/">a demo here</a> (check <a href="https://stackblitz.com/edit/react-intersection-observer">the code source</a>). Safari will make an extra request to load the <code>intersection-observer</code> npm package, since it doesn’t support IntersectionObserver.</p>
<p><img
    loading="lazy"
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg"
    alt="Screenshot of the network panel in Safari, displaying a request for the polyfill" /></p>
<p><small class="caption">Safari requests the polyfill for intersection-observer on demand. No need to ship it to browsers that support it natively.</small></p>
<p>This is achieved thanks to code splitting. There are tools like <a href="https://parceljs.org/code_splitting.html">Parcel</a> or <a href="https://webpack.js.org/guides/code-splitting/">Webpack</a> that will create a bundle for that imported package, and the logic needed to request the file.</p>
<h2 id="Code-Splitting-and-CSS-in-JS"><a href="#Code-Splitting-and-CSS-in-JS" class="headerlink" title="Code Splitting and CSS-in-JS"></a>Code Splitting and CSS-in-JS</h2><p>So far we have seen how to use a HOC to detect that an element is within the viewport. We have also seen how to load extra JavaScript when needed.</p>
<p>Code-splitting is quite common and straightforward to implement at route level, so the browser loads additional bundles as the user navigates across different URLs on the site. Tools like <a href="https://github.com/ReactTraining/react-router">react-router</a> and <a href="https://github.com/zeit/next.js/">Next.js</a> have made this straightforward to implement.</p>
<p>Through the examples on this post we have seen that the same can be achieved within the same route, loading the code for components on-demand. This is very useful if we have components that need a lot of specific code, not only JavaScript.</p>
<p>A component could link to other resources or even inline them. Think of SVGs or CSS styles.</p>
<p>There is no point in requesting styles that aren’t going to be applied to any element. Dynamically requesting and injecting CSS causes a FOUC (Flash of Unstyled Content). The browser shows the HTML elements with the existing style, and once the additional styles are injected it re-styles the content. With the advent of CSS-in-JS (or JSS) solutions this is no longer a problem. CSS is inlined within the component, and we get true code splitting for our components. <strong>With CSS-in-JS we take code splitting further, loading CSS on demand.</strong></p>
<h2 id="Useful-implementations"><a href="#Useful-implementations" class="headerlink" title="Useful implementations"></a>Useful implementations</h2><p>In this post I have explained how to implement a basic Observer component. There are existing implementations of similar components that have been more battle-tested, support more options and extra ways to integrate in your project.</p>
<p>I definitely recommend you to check out these 2 libraries:</p>
<ul>
<li><a href="https://github.com/thebuilder/react-intersection-observer">thebuilder/react-intersection-observer</a></li>
<li><a href="https://github.com/researchgate/react-intersection-observer">researchgate/react-intersection-observer</a></li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Hopefully I have shown how componentization can make code-splitting and loading resources on demand easier than ever. Define what your code depends on and leverage bundlers and modern tools to request the dependencies as needed when the user navigates to new paths or new components are shown on the page.</p>
<hr>
<p>I would like to thank <a href="https://twitter.com/alexjoverm">@alexjoverm</a>, <a href="https://twitter.com/aarongarciah">@aarongarciah</a> and <a href="https://twitter.com/FlavioCorpa">@FlavioCorpa</a> for reviewing the post, researching similar topics and recommending tools to provide the examples on the page.</p>
<p><em>This post is also available <a href="/es/high-performance-lazy-loading/">in Spanish</a></em></p>
<p>Did you see any typo or wrong information? In that case, <a href="https://twitter.com/jmperezperez">drop me a line</a>.</p>
]]></content>
    
    <summary type="html">
    
      Using a High Order Component to detect visibility and lazy-load components and sections on our pages. Just serve what is needed.
    
    </summary>
    
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
      <category term="lazy-loading" scheme="https://jmperezperez.com/tags/lazy-loading/"/>
    
  </entry>
  
  <entry>
    <title>Cómo mejorar la performance de una web usando lazy-loading y code-splitting</title>
    <link href="https://jmperezperez.com//es/high-performance-lazy-loading"/>
    <id>https://jmperezperez.com//es/high-performance-lazy-loading</id>
    <published>2018-04-06T04:00:00.000Z</published>
    <updated>2021-12-14T07:52:53.541Z</updated>
    
    <content type="html"><![CDATA[<p>El desarrollo basado en componentes ha marcado un antes y un después en el desarrollo web. Las principales ventajas que suelen mencionarse son la reutilización y la modularización. Componentes bien definidos y encapsulados que podemos usar para construir nuestros sitios, como ladrillos de Legos. Una ventaja adicional es que esta estructura de componentes proporciona una base sólida para mejorar la performance de nuestras webs.</p>
<p><img
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995807/high-performance_mbjoct.jpg 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995807/high-performance_mbjoct.jpg 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995807/high-performance_mbjoct.jpg 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995807/high-performance_mbjoct.jpg 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995807/high-performance_mbjoct.jpg"
    alt="" /></p>
<p>Nuestras dependencias son explícitas, por lo que sabemos qué código necesitamos ejecutar para cargar un componente específico. Lazy-loading y bundle-splitting pueden tener un gran impacto en el rendimiento de la página: requests con menos payload, código parseado y ejecutado. Y esto no solo se aplica a JavaScript, sino a cualquier tipo de asset.</p>
<p>Creo que muchas webs pueden aprovecharse de estas técnicas, y me gustaría mostrar algunos ejemplos básicos para solicitar recursos cuando sean necesarios.</p>
<span id="more"></span>

<p>En este post usaremos Preact/React, pero la idea se puede aplicar a cualquier otra librería basada en componentes.</p>
<p>Vamos a cubrir varios temas:</p>
<ol>
<li> <a href="#Patrones-de-composicion">Patrones de composición</a>: Descripción general de dos patrones que podemos usar para construir componentes complejos.</li>
<li> <a href="#Mejorando-el-rendimiento-de-nuestras-webs-cargando-solo-lo-necesario">Mejorando el rendimiento de nuestras webs cargando sólo lo necesario</a>: Un caso práctico donde aplicaremos lazy-loading.</li>
<li> <a href="#Un-pequeno-componente-para-detectar-cuando-una-area-es-visible">Un pequeño componente para detectar visibilidad</a>: Un componente sencillo que contiene la lógica para notificar cuándo aparece un elemento en la pantalla.</li>
<li> <a href="#Mas-casos-de-uso">Más casos de uso</a>: Veremos que un componente para detectar la visibilidad también puede ser útil en otras situaciones.</li>
<li> <a href="#Haciendo-polyfill-de-IntersectionObserver-bajo-demanda">Haciendo un polyfill de IntersectionObserver bajo demanda</a>: cómo podemos incluir un polyfill solo cuando sea necesario.</li>
<li> <a href="#Code-Splitting-y-CSS-in-JS">Code Splitting y CSS-in-JS</a>: cómo CSS-in-JS nos permite extender el code-splitting y lazy-loading a CSS, SVGs y otros recursos.</li>
<li> <a href="#Implementaciones-utiles">Implementaciones útiles</a>: librerías npm existentes que implementan el patrón que hemos explicado.</li>
</ol>
<p>¡Comencemos!</p>
<h2 id="Patrones-de-composicion"><a href="#Patrones-de-composicion" class="headerlink" title="Patrones de composición"></a>Patrones de composición</h2><p>En el desarrollo web basado en componentes éstos no se usan sólo para renderizar píxeles en la pantalla. También pueden encapsular una funcionalidad o comportamiento que se pasa a los componentes hijo.</p>
<p>Para esto se suelen utilizar <a href="https://reactjs.org/docs/higher-order-components.html">High Order Components (HOC)</a>. Estos componentes reciben otro componente y aumentan su funcionalidad.</p>
<p>Si has usado redux, la función <code>connect</code> es un HOC que recibe otro componente. Puedes encontrar más ejemplos en “<a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e">React Higher Order Components in depth</a>“ de Fran Guijarro.</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>id<span class="token entity" title="&#125;">&amp;#125;</span> <span class="token operator">-</span> <span class="token entity" title="&#123;">&amp;#123;</span>props<span class="token punctuation">.</span>name<span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// ...</span>

<span class="token keyword">const</span> ConnectedComponent <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>
  mapStateToProps<span class="token punctuation">,</span>
  mapDispatchToProps
<span class="token punctuation">)</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Function as Child Component (también llamado “<a href="https://reactpatterns.com/#render-callback">Render Callback</a>“) es otro patrón que se usa en situaciones similares. Cada vez es más popular, y puede que lo hayas visto en librerías como <a href="https://github.com/ReactTraining/react-media">react-media</a> o <a href="https://github.com/jamiebuilds/unstated">unstated</a>.</p>
<p>Veamos este ejemplo tomado de react-media:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Media</span> <span class="token attr-name">query</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(max-width:</span> <span class="token attr-name">599px)"</span><span class="token punctuation">></span></span>
    <span class="token entity" title="&#123;">&amp;#123;</span>matches <span class="token operator">=</span><span class="token operator">></span>
      matches <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The document is less than 600px wide<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The document is at least 600px wide<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token punctuation">)</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Media</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>El componente <code>Media</code> llama a sus hijos pasando un argumento <code>matches</code>. De esta forma los componentes hijos no necesitan saber sobre la media query. La componentización suele hacer más fácil el testeo y mantenimiento del código.</p>
<h2 id="Mejorando-el-rendimiento-de-nuestras-webs-cargando-solo-lo-necesario"><a href="#Mejorando-el-rendimiento-de-nuestras-webs-cargando-solo-lo-necesario" class="headerlink" title="Mejorando el rendimiento de nuestras webs cargando sólo lo necesario"></a>Mejorando el rendimiento de nuestras webs cargando sólo lo necesario</h2><p>Imagina una página web típica. Puedes echar un ojo a <a href="https://css-tricks.com/website-sameness/">Website Sameness</a> o <a href="https://www.friday.ie/journal/why-do-all-websites-look-the-same/">Web Design Trends: Why Do All Websites Look The Same?</a> para más inspiración :) . La página de ejemplo que vamos a usar contiene varias secciones o bloques:</p>
<ul>
<li>una cabecera (estos días, una imagen grande o “hero image” que ocupa toda el área por encima del fold)</li>
<li>una sección con algunas imágenes</li>
<li>otra sección con un componente pesado como un mapa</li>
<li>un footer</li>
</ul>
<p style="max-width:300px;display:block;margin-left:auto;margin-right:auto">
<img
    style="max-width:100%"
    sizes="300px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:300,f_auto/v1523084060/observer/site.png 300w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:600,f_auto/v1523084060/observer/site.png 600w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:900,f_auto/v1523084060/observer/site.png 900w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1523084060/observer/site.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:300,f_auto/v1523084060/observer/site.png"
    alt="Una web típica" />
<small class="caption">La estructura básica de una página que estaremos usando como ejemplo.</small>
</p>

<p>Mapeado a componentes React sería algo como esto:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gallery</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Map</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
</code></pre>
<p>Cuando el usuario visita la página, es muy probable que vea la cabecera en la pantalla. Es menos probable que vea la galería, el mapa y el pie de página, a menos que haga scroll.</p>
<p>Seguramente sueles incluir todos los scripts y CSS necesarios para renderizar todas las secciones cuando el usuario carga la página. Hasta hace poco, era difícil definir las dependencias de un módulo y cargar sólo lo que se necesitaba.</p>
<p>Hace años, antes de ES6, algunas empresas con webs grandes crearon soluciones propias para definir dependencias y cargarlas bajo demanda. Yahoo creó <a href="https://books.google.com/books?id=E7p-07kNfXYC&pg=PA65&lpg=PA65&dq=yahoo+yui+loader&source=bl&ots=UOcpQHdaRp&sig=AGTHNZvPYXWdU9lkj9klzTEa3ys&hl=en&sa=X&ved=0ahUKEwjn26Wti8PZAhUJDSwKHQOsCbIQ6AEIVDAG#v=onepage&q=yahoo%20yui%20loader&f=false">YUI Loader</a> y Facebook hizo lo propio con <a href="/facebook-frontend-javascript/">Haste, Bootloader y Primer</a>.</p>
<p>Cuando envías código innecesario al usuario se desperdician tus recursos y los suyos. Más ancho de banda para transferir los datos, más CPU para parsearlos y ejecutarlos, y más memoria utilizada. Y esos assets robarán los recursos limitados de otros assets críticos que lo necesitan con más urgencia.</p>
<p>¿De qué sirve hacer peticiones innecesarias, como imágenes que el usuario nunca verá? ¿O cargar un componente de terceros como un mapa de Google, con todas sus peticiones adicionales necesarias para procesar?</p>
<p>Un informe de cobertura de código, como <a href="https://developers.google.com/web/updates/2017/04/devtools-release-notes#coverage">el que proporciona Google Chrome</a> <strong>no nos será de mucha ayuda</strong>. El código JS será ejecutado y el CSS aplicado a elementos que no están visibles.</p>
<img
      style="max-width:100%"
      sizes="(max-width: 768px) 100vw, 684px"
      loading=lazy
      srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995652/observer/chrome-coverage.png 400w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995652/observer/chrome-coverage.png 800w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995652/observer/chrome-coverage.png 1200w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995652/observer/chrome-coverage.png 1400w"
        src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995652/observer/chrome-coverage.png"
        alt="La pestaña de Cobertura en Google Chrome" />
<p><small class="caption">Pestaña de cobertura de código en Google Chrome (<a href="https://developers.google.com/web/updates/2017/04/devtools-release-notes#coverage">fuente</a>)</small></p>
<p>Como en todo, <strong>hay pros y contras cuando se usa lazy-loading</strong>. No queremos aplicar lazy-loading a todos los elementos. Debemos tener en cuenta algunas cosas.</p>
<ul>
<li><strong>No usar lazy-loading por encima del fold</strong>. En la mayoría de casos queremos que el contenido por encima del fold se renderice tan pronto como sea posible. Todas las técnicas de lazy-loading introducen un retraso. El navegador tiene que ejecutar el JS que inyecta el HTML en el documento, parsearlo y comenzar a pedir los assets referenciados.</li>
</ul>
<img
      style="max-width:100%"
      sizes="(max-width: 768px) 100vw, 684px"
      loading=lazy
      srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995652/observer/fold.png 400w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995652/observer/fold.png 800w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995652/observer/fold.png 1200w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995652/observer/fold.png 1400w"
        src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995652/observer/fold.png"
        alt="No hagas lazy-loading por encima del fold" />

<p>¿Cómo sabemos dónde queda el fold? La verdad es que es difícil y depende del dispositivo del usuario y de tu layout.</p>
<ul>
<li><strong>Si usas lazy-loading, carga los elementos un poco antes de cuando se necesitan</strong>. Es buena idea evitar mostrar áreas vacías en tu web. Para ello, puedes cargar un elemento cuando esté lo suficientemente cerca del área visible. Por ejemplo, cuando el usuario hace scroll hacia abajo y la imagen a cargar está 100px más abajo, empieza a solicitarla.</li>
</ul>
<img
      style="max-width:100%"
      sizes="(max-width: 768px) 100vw, 684px"
      loading=lazy
      srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995652/observer/preloading.png 400w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995652/observer/preloading.png 800w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995652/observer/preloading.png 1200w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995652/observer/preloading.png 1400w"
        src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995652/observer/preloading.png"
        alt="Comienza a cargar un poco antes de cuando se necesite" />

<ul>
<li><p>**Contenido invisible en algunos casos**. Debes tener en cuenta que el contenido cargado usando lazy-loading no se mostrará en estas situaciones:</p>
 - Si el contenido cargado lazy-loading no se ha cargado no se mostrará al intentar imprimir la página.
 - Lo mismo ocurre cuando la página se muestra en lectores RSS que no ejecuten el JS necesario para cargar el contenido.
 - Puedes tener problemas con SEO al indexar contenido cargado con lazy-loading en Google. En el momento de escribir este artículo, Googlebot soporta IntersectionObserver e invoca su callback con cambios en el viewport por encima del fold. Sin embargo, **no invoca el callback para contenido por debajo del fold**. Por lo tanto, **ese contenido no será visto ni indexado por Google**.
   Si tu contenido es importante puedes renderizar el texto y dejar lazy-loading para componentes como imágenes y otros widgets (por ejemplo mapas).

<p>Aquí estoy cargando <a href="https://jmperezperez.com/lazy-load/89b6f20e1d79e9fb902242ab84217b12.html">una página de test</a> (puedes ver el código fuente <a href="https://github.com/JMPerez/lazy-load/blob/master/text-above-fold.js">aquí</a>) usando la función “Fetch as Google” de Google Webmaster Tools. Googlebot renderiza el contenido que queda dentro del viewport, pero no el que se cargaría debajo.</p>
<div class="videoWrapper">
  <iframe width="1764" height="1080" src="https://www.youtube.com/embed/YEWaufLXX_Q" frameborder="0" allowfullscreen loading="lazy"></iframe>
</div>
<small class="caption">Renderizando [una página de prueba](https://jmperezperez.com/lazy-load/89b6f20e1d79e9fb902242ab84217b12.html) usando "Fetch as Google" de Google Webmaster Tools.</small></li>
</ul>
<div class="callout">
<strong>Actualización a 10 de mayo de 2019</strong>: Google anunció durante el I/O 2019 que <a href="https://webmasters.googleblog.com/2019/05/the-new-evergreen-googlebot.html">actualizarán Googlebot para usar la última versión de Chrome</a>. Esto acaba con el problema de que Googlebot use Chrome 41 para renderizar páginas, y añade soporte para IntersectionObserver. Si utilizas Google Search Console para comprobar cómo Google renderiza una de tus URLs, todavía recibirás el resultado de renderizar usando Chrome 41. Esto es porque <a href="https://youtu.be/Ey0N1Ry0BPM?t=381">Google aún no ha actualizado sus herramientas de testeo para utilizar un Chrome <em>evergreen</em>.
</div>

<h2 id="Un-pequeno-componente-para-detectar-cuando-una-area-es-visible"><a href="#Un-pequeno-componente-para-detectar-cuando-una-area-es-visible" class="headerlink" title="Un pequeño componente para detectar cuando una área es visible"></a>Un pequeño componente para detectar cuando una área es visible</h2><p>En el pasado hablé sobre <a href="/lazy-loading-images/">lazy-load de imágenes</a>. La misma técnica se puede aplicar a otros elemetos.</p>
<p>Vamos a escribir un componente sencillo que detectará cuando una sección es visible en el viewport. Para hacerlo más breve usaré la <a href="https://developer.mozilla.org/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a>, una tecnología experimental con <a href="https://caniuse.com/#search=intersectionobserver">bastante buen soporte</a>.</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> isVisible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">[</span>entry<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> isVisible<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>isIntersecting <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token comment" spellcheck="true">// creamos un div para obtener una referencia.</span>
      <span class="token comment" spellcheck="true">// Es posible usar findDOMNode() para evitar</span>
      <span class="token comment" spellcheck="true">// crear elementos extras, pero findDOMNode está desaconsejado</span>
      <span class="token operator">&lt;</span>div
        ref<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>div <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> div<span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token operator">></span>
        <span class="token entity" title="&#123;">&amp;#123;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
          <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>El componente usa IntersectionObserver para detectar si el contenedor intersecta con el viewport, es decir, si está visible. Aprovechamos los métodos del lifecycle de React para limpiar el IntersectionObserver <a href="https://developer.mozilla.org/docs/Web/API/IntersectionObserver/disconnect">desconectándolo</a> al desmontar.</p>
<p>Este componente básico puede extenderse con propiedades adicionales pasadas como <a href="https://developer.mozilla.org/docs/Web/API/Intersection_Observer_API#Intersection_observer_options">opciones para el IntersectionObserver</a> como márgenes o umbrales. Así, podríamos detectar elementos cercanos pero que no intersectan con el viewport. Las opciones se establecen en el constructor y son de sólo lectura. Añadir soporte para opciones requeriría reinstanciar el IntersectionObserver con nuevas opciones cuando cambien, añadiendo lógica extra en <code>componentWillReceiveProps</code> que no vamos a cubrir aquí.</p>
<p>Podemos usar este componente para hacer lazy-loading de dos de nuestros componentes, <code>Gallery</code> y <code>Map</code>:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Observer</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>isVisible <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gallery</span> <span class="token attr-name">isVisible</span> <span class="token punctuation">/></span></span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Observer</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Observer</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>isVisible <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Map</span> <span class="token attr-name">isVisible</span> <span class="token punctuation">/></span></span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Observer</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
</code></pre>
<p>En el código anterior paso la propiedad <code>isVisible</code> a los componentes <code>Gallery</code> y <code>Map</code> para que ellos la gestionen. Otra forma de hacerlo es devolver el componente si está visible, o un elemento vacío en caso contrario.</p>
<p>En cualquier caso <strong>asegúrate de que reservas el área para el componente</strong>. No es buena idea que el contenido “salte” cuando el componente se carga, así que si sabes que tu <code>Map</code> tiene un alto de 400px, renderiza un contenedor vacío de 400px de altura antes de que el mapa se cargue.</p>
<p>¿Cómo usan los componentes <code>Map</code> y <code>Gallery</code> la propiedad <code>isVisible</code>? Veamos el componente <code>Map</code>:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Map</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> initialized<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>

  <span class="token function">initializeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> initialized<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// loadScript carga un script externo, su definición no se incluye aquí.</span>
    <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'https://maps.google.com/maps/api/js?key=&lt;your_key>'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">const</span> latlng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">google<span class="token punctuation">.</span>maps<span class="token punctuation">.</span>LatLng</span><span class="token punctuation">(</span><span class="token number">38.34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> myOptions <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> zoom<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> center<span class="token punctuation">:</span> latlng <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">google<span class="token punctuation">.</span>maps<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">,</span> myOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initializeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>

  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>initialized <span class="token operator">&amp;&amp;</span> nextProps<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initializeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div
        ref<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>div <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> div<span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>Cuando se muestra el contenedor en el viewport, hacemos una petición para inyectar el script de Google Maps, y una vez cargado instanciamos el mapa. Éste es un buen ejemplo de código JavaScript que no se necesita al principio y podemos cargar bajo demanda, y por consiguiente el resto de recursos necesarios para mostrar el mapa.</p>
<p>El componente tiene estado propio para evitar volver a inyectar el script de Google Maps.</p>
<p>Veamos el componente <code>Gallery</code>:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Gallery</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible <span class="token operator">&amp;&amp;</span> nextProps<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Some pictures<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        Picture <span class="token number">1</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible <span class="token operator">?</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/image01.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
        Picture <span class="token number">2</span>
        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible <span class="token operator">?</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/image02.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>El ejemplo anterior define otro componente con estado. De hecho, estamos almacenando en el estado la misma información que almacena <code>Map</code>.</p>
<p>Si la galería se muestra dentro del viewport y más tarde el usuario hace scroll y la galería deja de estar visible, las imágenes permanecerán en el DOM. En la mayoría de los casos, esto es lo que queremos cuando trabajamos con imágenes.</p>
<h3 id="Componentes-hijo-sin-estado"><a href="#Componentes-hijo-sin-estado" class="headerlink" title="Componentes hijo sin estado"></a>Componentes hijo sin estado</h3><p>Un componente sin estado (stateless) también resulta interesante. Nos permitiría quitar de la memoria las imágenes que ya no estén visibles, mostrando placeholders:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Gallery <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> isVisible <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Some pictures<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    Picture <span class="token number">1</span><span class="token entity" title="&#123;">&amp;#123;</span>isVisible <span class="token operator">?</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/image01.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
    Picture <span class="token number">2</span>
    <span class="token entity" title="&#123;">&amp;#123;</span>isVisible <span class="token operator">?</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com/image02.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Si haces esto, <strong>asegúrate de que las imágenes tienen las cabeceras de respuesta adecuadas</strong> para que las peticiones subsecuentes usen la caché y no descarguen las imágenes otra vez.</p>
<p>Puedes mover la lógica al componente <code>Observer</code> si ves que creas componentes con estado sólo para almacenar si se han mostrado al menos una vez. <code>Observer</code> ya tiene estado y puede llamar a sus hijos fácilmente con un argumento adicional <code>hasBeenVisible</code>.</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token operator">...</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Observer</span><span class="token punctuation">></span></span>
    <span class="token entity" title="&#123;">&amp;#123;</span><span class="token punctuation">(</span>isVisible<span class="token punctuation">,</span> hasBeenVisible<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Gallery</span> <span class="token attr-name">hasBeenVisible</span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">// Gallery ya no necesita estado</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Observer</span><span class="token punctuation">></span></span>
  <span class="token operator">...</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>Otra opción es tener una variación del componente <code>Observer</code> que sólo pase una prop como <code>hasBeenVisible</code>. Esto tiene la ventaja de que podemos desconectar el IntersectionObserver tan pronto como el elemento se muestre, ya que no vamos a cambiar su valor. Llamaremos a este componente <code>ObserverOnce</code>:</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ObserverOnce</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>entries <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
      entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> hasBeenVisible<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">,</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div
        ref<span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>div <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> div<span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token operator">></span>
        <span class="token entity" title="&#123;">&amp;#123;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
          <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasBeenVisible<span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<h2 id="Mas-casos-de-uso"><a href="#Mas-casos-de-uso" class="headerlink" title="Más casos de uso"></a>Más casos de uso</h2><p>Hemos utilizado el componente <code>Observer</code> para cargar recursos bajo demanda. También lo podemos utilizar para comenzar la animación de un componente cuando se muestre en pantalla.</p>
<p>En este ejemplo tomado de la web de React Alicante se animan unas cifras cuando el usuario hace scroll hasta esa sección.</p>
<div style="text-align:center">
  <video width="1064" height="618" controls src="https://res.cloudinary.com/jmperez/video/upload/dpr_auto,f_auto,q_auto/v1522995652/observer/react-alicante.mp4" />
</div>

<p>Podemos recrearlo con este código (puedes verlo y editarlo <a href="https://codepen.io/jmperez/pen/LQXjYv">en Codepen</a>):</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ConferenceData</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token entity" title="&#123;">&amp;#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span> progress<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>animationDuration <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>startAnimation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isVisible <span class="token operator">&amp;&amp;</span>
      nextProps<span class="token punctuation">.</span>isVisible <span class="token operator">&amp;&amp;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">!==</span> <span class="token number">1</span>
    <span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>startAnimation <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> tick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token entity" title="&#123;">&amp;#123;</span>
        <span class="token keyword">const</span> progress <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>
          <span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startAnimation<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>animationDuration
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token entity" title="&#123;">&amp;#123;</span> progress<span class="token punctuation">:</span> progress <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>progress <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
          <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>tick<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token entity" title="&#125;">&amp;#125;</span>
      <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>
      <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token entity" title="&#123;">&amp;#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span> days ·
        <span class="token entity" title="&#123;">&amp;#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">*</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span> talks ·
        <span class="token entity" title="&#123;">&amp;#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span> workshops ·
        <span class="token entity" title="&#123;">&amp;#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>progress <span class="token operator">*</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token entity" title="&#125;">&amp;#125;</span> attendees
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<p>Una vez definido podemos utilizarlo de la misma forma que el resto de componentes. Esta es una muestra del potencial de abstraer la lógica para detectar la visibilidad fuera de los componentes que la necesitan.</p>
<h2 id="Haciendo-polyfill-de-IntersectionObserver-bajo-demanda"><a href="#Haciendo-polyfill-de-IntersectionObserver-bajo-demanda" class="headerlink" title="Haciendo polyfill de IntersectionObserver bajo demanda"></a>Haciendo polyfill de IntersectionObserver bajo demanda</h2><p>Hasta ahora hemos utilizado IntersectionObserver para detectar cuándo un elemento se muestra en pantalla. En el momento de escribir este artículo algunos navegadores, como Safari, no soportan IntersecionObserver. Si lo intentamos instanciar el navegador lanzará un error.</p>
<p>Podríamos establecer <code>isVisible</code> a <code>true</code> cuando IntersectionObserver no esté disponible, lo que en la práctica desactivaría el lazy-loading. En cierta manera consideraríamos lazy-loading como un progressive enhancement:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// isVisible se inicializa a true si el</span>
    <span class="token comment" spellcheck="true">// navegador no soporta IntersectionObserver</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> isVisible<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>IntersectionObserver<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// sólo inicializamos IntersectionObserver si está soportado</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>IntersectionObserver<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>entries <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token operator">...</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>Mi opción favorita es incluir un polyfill como el <a href="https://github.com/w3c/IntersectionObserver/tree/master/polyfill">polyfill para IntersectionObserver de w3c</a>. Así, IntersectionObserver funciona en todos los navegadores.</p>
<p>Como estamos hablando de cargar assets bajo demanda, qué mejor que aplicarlo a este caso. Usaremos code-splitting para hacer la petición del polyfill sólo si nos hace falta, es decir, si el navegador no tiene soporte para IntersectionObserver:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>window<span class="token punctuation">.</span>IntersectionObserver
      <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'intersection-observer'</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>IntersectionObserver</span><span class="token punctuation">(</span>entries <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> isVisible<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>isIntersecting <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>Puedes ver <a href="https://react-intersection-observer.stackblitz.io/">una demostración aquí</a> (<a href="https://stackblitz.com/edit/react-intersection-observer">código fuente</a>). Safari hará una petición extra para cargar el paquete npm <code>intersection-observer</code> dado que no soporta IntersectionObserver.</p>
<img
      style="max-width:100%"
      sizes="(max-width: 768px) 100vw, 684px"
      loading=lazy
      srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg 400w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg 800w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg 1200w,
        https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg 1400w"
        src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522995652/observer/safari-intersection-observer-2.jpg"
        alt="Captura de pantalla del panel de Red en Safari, mostrando la petición para el polyfill" />

<p><small class="caption">Safari hace una request para el polyfill de intersection-observer bajo demanda. No necesitamos cargarlo en navegadores que lo soportan nativamente.</small></p>
<p>La solución se basa en code splitting. Hay herramientas como <a href="https://parceljs.org/code_splitting.html">Parcel</a> o <a href="https://webpack.js.org/guides/code-splitting/">Webpack</a> que crearán un bundle para ese paquete importado, así como la lógica para hacer la petición para ese fichero.</p>
<h2 id="Code-Splitting-y-CSS-in-JS"><a href="#Code-Splitting-y-CSS-in-JS" class="headerlink" title="Code Splitting y CSS-in-JS"></a>Code Splitting y CSS-in-JS</h2><p>Hasta ahora hemos visto cómo usar un HOC para detectar que un elemento está en el viewport. También hemos aprendido cómo cargar JavaScript adicional cuando hace falta.</p>
<p>Code-splitting es bastante común y fácil de implementar a nivel de ruta. El navegador carga bundles adicionales cuando el usuario va navegando a través de diferentes URLs de la web. Herramientas como <a href="https://github.com/ReactTraining/react-router">react-router</a> y <a href="https://github.com/zeit/next.js/">Next.js</a> han popularizado code-splitting, integrándolo como parte de dynamic imports.</p>
<p>A través de varios ejemplos hemos visto que se puede implementar code-splitting dentro de una misma ruta, cargando el código para los componentes bajo demanda. Esto es muy útil si tenemos componentes que necesitan mucho código específico, no sólo JavaScript.</p>
<p>Un componente puede referenciar otros recursos o incluso contenerlos “inline”. Un ejemplo son SVGs o estilos CSS.</p>
<p>No tiene sentido solicitar estilos que no se van a aplicar a ningún elemento. Solicitar estilos e inyectarlos dinámicamente causa un FOUC (Flash of Unstyled Content). El navegador muestra los elementos HTML con el estilo existente, y una vez que los estilos adicionales son inyectados re-estila el contenido. Con la aparición de soluciones CSS-in-KS (o JSS) esto ya no es un problema. El CSS se incluye inline en el componente, y conseguimos code-splitting verdadero para nuestros componentes. <strong>Con CSS-in-JS llevamos code-splitting más allá, cargando CSS bajo demanda.</strong></p>
<h2 id="Implementaciones-utiles"><a href="#Implementaciones-utiles" class="headerlink" title="Implementaciones útiles"></a>Implementaciones útiles</h2><p>En este post he explicado cómo implementar un componente Observer básico. Existing implementaciones de componentes similares que han sido probadas en muchas aplicaciones y soportan más opciones y formas de integrarse en tu proyecto.</p>
<p>Recomiendo echar un vistazo a estas dos librerías:</p>
<ul>
<li><a href="https://github.com/thebuilder/react-intersection-observer">thebuilder/react-intersection-observer</a></li>
<li><a href="https://github.com/researchgate/react-intersection-observer">researchgate/react-intersection-observer</a></li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusión"></a>Conclusión</h2><p>La componentización hace el code-splitting y la carga de recursos bajo demanda más fácil que nunca. Define las dependencias de tu código y usa los bundlers y otras herramientas modernas para hacer peticiones para las dependencias cuando el usuario navegue a nuevas rutas o se muestren nuevos componentes en la página.</p>
<hr>
<p>Me gustaría dar las gracias a <a href="https://twitter.com/alexjoverm">@alexjoverm</a>, <a href="https://twitter.com/aarongarciah">@aarongarciah</a> y <a href="https://twitter.com/FlavioCorpa">@FlavioCorpa</a> por revisar este artículo, investigar lazy-loading desde varios puntos de vista, y recomendar herramientas para crear los ejemplos.</p>
<p>Si encuentras alguna errata o información errónea, <a href="https://twitter.com/jmperezperez">no dudes en escribirme</a>.</p>
]]></content>
    
    <summary type="html">
    
      Cómo usar un High Order Component para detectar cuándo un elemento está visible y hacer lazy-loading de componentes y secciones de nuestras páginas. Manda al navegador sólo lo que es necesario.
    
    </summary>
    
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
      <category term="lazy-loading" scheme="https://jmperezperez.com/tags/lazy-loading/"/>
    
  </entry>
  
  <entry>
    <title>Displaying Page Load Metrics on Your Site</title>
    <link href="https://jmperezperez.com//page-load-footer"/>
    <id>https://jmperezperez.com//page-load-footer</id>
    <published>2018-03-30T05:00:00.000Z</published>
    <updated>2021-12-14T07:52:53.532Z</updated>
    
    <content type="html"><![CDATA[<p>I was browsing <a href="https://timkadlec.com/">Tim Kadlec’s website</a> and I noticed he had added page load time metrics in the footer.</p>
<p><img
    loading="lazy"
    style="max-width:100%; border: 0"
    sizes="(max-width: 768px) 100vw, 684px"
    srcset="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:400,f_auto/v1522388675/load-time/tim-kadlec-load-time.png 400w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:800,f_auto/v1522388675/load-time/tim-kadlec-load-time.png 800w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1200,f_auto/v1522388675/load-time/tim-kadlec-load-time.png 1200w, https://res.cloudinary.com/jmperez/image/upload/w_auto:100:1400,f_auto/v1522388675/load-time/tim-kadlec-load-time.png 1400w"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto/v1522388675/load-time/tim-kadlec-load-time.png"
    alt="Tim Kadlec's site shows how long the page took to load in the footer" />
<small class="caption">Tim Kadlec’s site shows how long the page took to load in the footer.</small></p>
<p>Stoyan Stefanov also realized and wrote <a href="http://www.phpied.com/this-page-loaded-in-x-seconds/">“This page loaded in X seconds”</a>, a blog post describing the code used for this. Stoyan also created a bookmark that shows an alert with the load time of the current page. The data is obtained from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/performance"><code>window.performance</code></a>.</p>
<p>I liked the idea and added a similar snippet that shows the page load time in the footer (you should see it if you scroll to the bottom). If your browser supports the <a href="https://css-tricks.com/paint-timing-api/">Paint Timing API</a> you will see a couple of extra metrics: First Paint and First Contentful Paint.</p>
<span id="more"></span>

<h2 id="First-Paint-and-First-Contentful-Paint"><a href="#First-Paint-and-First-Contentful-Paint" class="headerlink" title="First Paint and First Contentful Paint"></a>First Paint and First Contentful Paint</h2><p>Page load time is a metric that tells us part of the story. Yet it might not reflect how fast the visible area loads. For instance, a page with lots of images will report a large page load time, since the <code>load</code> event will be triggered when all of them are fetched, even though the above-the-fold content might load way earlier. It is still a good idea, since it forces us to think about lazy-loading the resources when needed.</p>
<p>I have written before about <a href="https://www.smashingmagazine.com/2018/02/progressive-image-loading-user-perceived-performance/">user perceived performance</a> and metrics that tell how long it takes to render something on the page. Using the <a href="/paint-timing-api/">Paint Timing API</a> we can get the <a href="https://w3c.github.io/paint-timing/#sec-terminology">First Paint and First Contentful Paint metrics</a>.</p>
<p>My code snippet extends Tim’s and Stoyan’s to report these metrics, obtained running <code>performance.getEntriesByType(&#39;paint&#39;)</code>:</p>
<pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">;</span>
    <span class="token keyword">const</span> round2 <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> timingStats <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.timing-stats'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> loadTime <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> timingStatsHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`This page loaded in $&amp;#123;round2(loadTime)&amp;#125; seconds. `</span></span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> perfEntries <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">'paint'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      perfEntries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>perfEntry<span class="token punctuation">,</span> i<span class="token punctuation">,</span> entries<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        timingStatsHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`$&amp;#123;perfEntry.name&amp;#125; was $&amp;#123;round2(
          perfEntry.startTime / 1000
        )&amp;#125; seconds. `</span></span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      timingStats<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> timingStatsHTML<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>In the future I would like to extend the reported metrics to include <a href="https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint">First Meaningful Paint</a> (whenever it is implemented, see <a href="https://docs.google.com/document/d/1BR94tJdZLsin5poeet0XoTW60M0SjvOJQttKT-JK8HI/view">a description of the heuristics here</a>) and <a href="https://developers.google.com/web/tools/lighthouse/audits/first-interactive">Time to Interactive</a> (using <a href="https://github.com/GoogleChromeLabs/tti-polyfill">GoogleChromeLabs/tti-polyfill</a>).</p>
<p><img
    loading="lazy"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto,c_scale/v1522388641/load-time/performance-metrics.jpg"
    sizes="(max-width: 768px) 100vw, 684px" />
<small class="caption">Slide from <a href="https://www.youtube.com/watch?v=6Ljq-Jn-EgU">Web Performance: Leveraging the Metrics that Most Affect User Experience from Google I/O ‘17</a> showing different key moments during a page load.</small></p>
<p><a href="https://twitter.com/Zizzamia">Leonardo Zizzamia</a> has been working on <a href="http://zizzamia.github.io/perfume/">Perfume.js</a>, a library to measure these metrics, annotate them to the dev tools timeline and optionally reporting them to Google Analytics. It also has a fallback for browsers that do not support the Paint Timing API.</p>
<p>You can read more about the library on his posts “<a href="https://medium.com/@zizzamia/first-contentful-paint-with-a-touch-of-perfume-js-cd11dfd2e18f">First (Contentful) Paint with a touch of Perfume(.js)</a> and “<a href="https://medium.com/@zizzamia/time-to-interactive-with-rum-862ba874392c">Time to Interactive with RUM</a>“.</p>
<p>If you are into this topic, I also recommend you to watch the talk <a href="https://www.youtube.com/watch?v=6Ljq-Jn-EgU">Web Performance: Leveraging the Metrics that Most Affect User Experience from Google I/O ‘17</a>.</p>
<h2 id="How-to-Calculate-the-Transfer-Size"><a href="#How-to-Calculate-the-Transfer-Size" class="headerlink" title="How to Calculate the Transfer Size"></a>How to Calculate the Transfer Size</h2><p>The Resource Timing API allows to <a href="https://developer.mozilla.org/docs/Web/API/Resource_Timing_API/Using_the_Resource_Timing_API#Size_matters">know the transfer size of the assets fetched by the page</a>. For CORS requests is necessary to <a href="https://developer.mozilla.org/docs/Web/API/Resource_Timing_API/Using_the_Resource_Timing_API#Coping_with_CORS">include the <code>timing-allow-origin</code> header</a> set up properly to return the transfer size. Otherwise they will report 0 as the transfer size.</p>
<p>Another caveat is that there doesn’t seem to be a way to know the transfer size of the page itself. One could calculate the length of the document’s innerHTML, but that won’t match the transfer size if the response was compressed (which hopefully was).</p>
<p>Let’s have a look at an example:</p>
<p><img
    loading="lazy"
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto,c_scale,dpr_auto/v1522831856/load-time/resource-timing-api-page-size.jpg"
    sizes="(max-width: 768px) 100vw, 684px"
    alt="Calculating the transferred size of the requests using Resource Timing API." />
<small class="caption">Calculating the transferred size of the request susing Resource Timing API.</small></p>
<p>The page that I’m loading, served from jmperezperez.com, makes requests to fetch assets from res.cloudinary.com and <a href="http://www.google-analytics.com/">www.google-analytics.com</a>, which are external domains. Once loaded, I run this code to calculate the transferred size:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> totalBytes <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">'resource'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> r<span class="token punctuation">.</span>transferSize<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Page size is $&amp;#123;Math.round(totalBytes / 1024)&amp;#125; kB`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The reported transferred size according to the dev tools is 113 kB, while the calculated using the code above (Resource Timing API) is 107 kB. Both res.cloudinary.com and <a href="http://www.google-analytics.com/">www.google-analytics.com</a> set the <code>timing-allow-origin: *</code> response header, which let us get the right <code>transferSize</code>.</p>
<p>You can read more about Cloudinary’s usage of Server Timing on their recent post “<a href="https://cloudinary.com/blog/inside_the_black_box_with_server_timing">Inside the Black Box with Server-Timing</a>”.</p>
<p>Although we can’t get the exact page load size, using these APIs get us way closer.</p>
<h2 id="Reporting-Metrics-Inline-and-RUM"><a href="#Reporting-Metrics-Inline-and-RUM" class="headerlink" title="Reporting Metrics Inline and RUM"></a>Reporting Metrics Inline and RUM</h2><p>These new browser APIs allow us to access metrics from JavaScript, which previously could only be accessed manually using the developer tools. Access from the browser means we can show them to the user or report them to a Real User Monitoring solution to track and optimize user’s experience.</p>
<p>Displaying these metrics on our sites is a way to communicate publicly that we are taking performance seriously.</p>
]]></content>
    
    <summary type="html">
    
      Showing page load, First Paint, and First Contentful Paint Displaying on your site to prove you care about web performance.
    
    </summary>
    
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>PerformanceObserver and Paint Timing API</title>
    <link href="https://jmperezperez.com//paint-timing-api"/>
    <id>https://jmperezperez.com//paint-timing-api</id>
    <published>2017-06-17T07:15:00.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="https://blog.chromium.org/2017/06/chrome-60-beta-paint-timing-api-css.html">a recent post about Chrome 60 Beta</a>, Google announced the support of the Paint Timing API to get metrics on when your page starts rendering and when the user gets content that can be consumed (more info on the definition of the events below). Here I’m going to describe this new API a bit and show you how to use it.</p>
<span id="more"></span>

<p><img
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto,c_scale/v1510494808/paint-timing-example_byc6z2.png"
    sizes="(max-width: 768px) 100vw, 684px" alt="Example of Paint Timing API entries"/>
<small class="caption">Image taken from the <a href="https://blog.chromium.org/2017/06/chrome-60-beta-paint-timing-api-css.html">Chrome 60 blog post</a>, which first appeared in <a href="https://youtu.be/6Ljq-Jn-EgU">“Web Performance: Leveraging the Metrics that Most Affect User Experience”</a> at Google I/O 2017</small></p>
<p>Up until now we have been measuring performance through other metrics, mostly using the <a href="https://developer.mozilla.org/docs/Web/API/Navigation_timing_API">Navigation Timing API</a>, which is also what Google Analytics uses for their <a href="http://www.ericmobley.net/measuring-performance-google-analytics/">Site Speed report</a>. Yet those metrics don’t tell us the whole picture about the rendering experience.</p>
<p>The <a href="https://github.com/WICG/paint-timing">Paint Timing API</a> aims to improve this by exposing metrics on paint events that are grouped in two types of entries. By <a href="https://w3c.github.io/paint-timing/#sec-terminology">its definition</a>:</p>
<ul>
<li>  <code>&quot;first-paint&quot;</code> entries contain a <code>DOMHighResTimeStamp</code> reporting the time when the browser first rendered after navigation. This excludes the default background paint, but includes non-default background paint. This is the first key moment developers care about in page load – when the browser has started to render the page.</li>
<li>  <code>&quot;first-contentful-paint&quot;</code> contain a <code>DOMHighResTimestamp</code> reporting the time when the browser first rendered any text, image (including background images), non-white canvas or SVG. This includes text with pending webfonts. This is the first time users could start consuming page content.</li>
</ul>
<p>A picture is worth a thousand words, so let’s see how these entries would be reported by some real web sites:</p>
<p><img
    src="https://res.cloudinary.com/jmperez/image/upload/w_auto:100:684,f_auto,c_scale/v1510476598/paint-timing-filmstrip_anq3pv.png"
    sizes="(max-width: 768px) 100vw, 684px" alt="Filmstrip from several sites showing when Paint Timing API entries are triggered"/>
<small class="caption">Image taken from the <a href="https://github.com/WICG/paint-timing#examples">Paint timing API repo on WICG</a>.</small></p>
<h4 id="Hacking-on-it"><a href="#Hacking-on-it" class="headerlink" title="Hacking on it"></a>Hacking on it</h4><p>As a hack project I decided to give it a try and implement it on a web site. You have a basic example <a href="https://github.com/WICG/paint-timing#usage">on the Paint timing page</a>:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> perfEntries <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> perfEntries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">// Process entries</span>
     <span class="token comment" spellcheck="true">// report back for analytics and monitoring</span>
     <span class="token comment" spellcheck="true">// ...</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// register observer for long task notifications</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>entryTypes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"paint"</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>In practice you will probably want to report the information somewhere you can track it. If you are using Google Analytics, you can use <a href="https://developers.google.com/web/updates/2017/06/user-centric-performance-metrics#tracking_fpfcp">this snippet from Google’s Developer site</a> (ES6):</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// `name` will be either 'first-paint' or 'first-contentful-paint'.</span>
    <span class="token keyword">const</span> metricName <span class="token operator">=</span> entry<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">const</span> time <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>startTime <span class="token operator">+</span> entry<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">ga</span><span class="token punctuation">(</span><span class="token string">'send'</span><span class="token punctuation">,</span> <span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      eventCategory<span class="token punctuation">:</span> <span class="token string">'Performance Metrics'</span><span class="token punctuation">,</span>
      eventAction<span class="token punctuation">:</span> metricName<span class="token punctuation">,</span>
      eventValue<span class="token punctuation">:</span> time<span class="token punctuation">,</span>
      nonInteraction<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Start observing paint entries.</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>entryTypes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'paint'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="Word-of-Caution"><a href="#Word-of-Caution" class="headerlink" title="Word of Caution"></a>Word of Caution</h4><p>The API is still experimental and <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver">in “Editor’s Draft” state</a>. Also, the fact that a browser supports PerformanceObserver doesn’t mean that it supports the Paint events.</p>
<p>In the quick test I run, the above snippet would throw an exception:</p>
<pre><code>Uncaught TypeError: Failed to execute ‘observe’ on
‘PerformanceObserver’: A Performance Observer MUST
have at least one valid entryType in its entryTypes
attribute.
</code></pre>
<p>It turns out that if you only observe the <code>paint</code> entryType and this is not supported in the browser, <strong>it will throw an exception</strong>. According to <a href="https://w3c.github.io/performance-timeline/#dom-performanceobserverinit-entrytypes">the specification</a>:</p>
<blockquote>
<p><code>entryTypes</code>: A list of entry names to be observed. The list must not be empty and types not recognized by the user agent must be ignored.</p>
</blockquote>
<p>In short, if you are giving this API a try, make sure you <code>try...catch</code> the <code>observer.observe()</code> call.</p>
<h4 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h4><p>This is a bit in early stages but I’m looking forward to see how the API evolves and we can use it to track Web Performance even better. This will also be a great addition to <a href="https://developers.google.com/web/tools/lighthouse/">LightHouse</a>, <a href="http://www.webpagetest.org/">WebPageTest</a>, <a href="https://calibreapp.com/">Calibre</a> and the rest of tools we use to monitor metrics on our sites.</p>
]]></content>
    
    <summary type="html">
    
      A quick look at the Paint Timing API to get metrics about render events on our pages.
    
    </summary>
    
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Revisitando la nueva web del Senado</title>
    <link href="https://jmperezperez.com//revisitando-nueva-web-senado"/>
    <id>https://jmperezperez.com//revisitando-nueva-web-senado</id>
    <published>2012-12-03T20:20:16.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hace unos días hacía un <a href="/estudiando-el-rediseno-de-la-web-del-senado-de-espana/">análisis del rediseño de la web del Senado</a>, justo tras su lanzamiento, desde el punto de vista de rendimiento web y mejores prácticas a la hora de desarrollar sitios web. La nueva web del Senado sufría múltiples problemas poco más que inaceptables para un proyecto tan reciente y con tal presupuesto.</p>
<span id="more"></span>
<p>Pero al igual que destacaba dichos problemas, unas semanas después debo mencionar que varios de ellos han sido resueltos. Aunque aún quedan algunos por resolver, es de destacar que hayan seguido trabajando en el sitio.
<img src="/assets/images/posts/web-senado.jpg" alt="Web del Senado de España"></p>
<h2 id="Mejoras"><a href="#Mejoras" class="headerlink" title="Mejoras"></a>Mejoras</h2><h3 id="Senado-es-ya-funciona-sin-www"><a href="#Senado-es-ya-funciona-sin-www" class="headerlink" title="Senado.es ya funciona sin www"></a>Senado.es ya funciona sin www</h3><p>Ahora, la URL <a href="http://senado.es/">senado.es</a> redirecciona a <a href="http://www.senado.es/">www.senado.es</a> (<a href="http://www.webpagetest.org/result/121203_ZZ_4QD/1/details/">fuente</a>)</p>
<h3 id="Indexable-por-robots"><a href="#Indexable-por-robots" class="headerlink" title="Indexable por robots"></a>Indexable por robots</h3><p>Su <a href="http://www.senado.es/robots.txt">robots.txt</a> ha cambiado y ahora permite a los buscadores indexar el contenido del sitio.</p>
<h3 id="Compresi-243-n-Gzip"><a href="#Compresi-243-n-Gzip" class="headerlink" title="Compresi&#243;n Gzip"></a>Compresi&#243;n Gzip</h3><p>Ahora los recursos se sirven con compresión GZIP habilitada (<a href="http://gtmetrix.com/compare/BN8ZgvCB/3gwi5Qp4">fuente</a>). Entre otras mejoras, la página principal <em>pesa</em> ahora menos de la mitad, y han mejorado considerablemente el índica PageSpeed y YSlow (<a href="http://gtmetrix.com/reports/www.senado.es/eS68ECWL">fuente</a>).</p>
<h3 id="Errores-404"><a href="#Errores-404" class="headerlink" title="Errores 404"></a>Errores 404</h3><p>Ahora en la página principal, ya sólo hay 1 request que da error 404 (<a href="http://www.webpagetest.org/result/121203_ZZ_4QD/1/details/">fuente</a>).</p>
<h2 id="Todav-237-a-hay-algunos-problemas-que-solucionar"><a href="#Todav-237-a-hay-algunos-problemas-que-solucionar" class="headerlink" title="Todav&#237;a hay algunos problemas que solucionar"></a>Todav&#237;a hay algunos problemas que solucionar</h2><p>Pese a todo, aún quedan mejoras por hacer, como la minificación de ficheros, optimización de imágenes, tratar de reducir el número de peticiones y corregir el Mime Type devuelto por el servidor.</p>
<p>Además, con la modificación del fichero <a href="http://www.senado.es/robots.txt">robots.txt</a> existen detalles dignos de mención. El fichero actual tiene este contenido:</p>
<pre><code>User-agent: *
Disallow: /cgi-bin/
Disallow: /detalleiniciativa/
Disallow: /expedientappendixblobservlet/
Disallow: /expedientdocblobservlet/
Disallow: /fichasenador/
Disallow: /resultadobuscador/
Disallow: /senstream/
Disallow: /*senstream*
Disallow: /legis9/publicaciones/html/textos/CG_B015.html
Disallow: /legis9/publicaciones/pdf/cortes/bocg/CG_B015.PDF
Disallow: /legis9/publicaciones/html/textos/CG_B100.html
Disallow: /legis9/publicaciones/pdf/cortes/bocg/CG_B100.PDF
Disallow: /legis4/publicaciones/pdf/senado/bocg/l0019.PDF
Disallow: /legis3/publicaciones/pdf/senado/bocg/l0342.PDF
Disallow: /legis3/publicaciones/pdf/senado/bocg/l0347.PDF
Disallow: /legis2/publicaciones/pdf/senado/bocg/l0140.PDF
Visit-time: 0200-0600
</code></pre>
<p>Si lo comparamos con <a href="/estudiando-el-rediseno-de-la-web-del-senado-de-espana/#no-indexable">la versión del mismo fichero</a> cuando publicaron el rediseño, ahora vemos nuevas direcciones bloqueadas.</p>
<p>Que se pretenda evitar el indexado de las iniciativas parlamentarias y fichas de los senadores atenta directamente contra la transparencia de información y el servicio que pretende dar esta web. Además, el bloqueo se realiza sobre una dirección que ni siquiera es la dirección donde está dicho contenido.</p>
<p>¿Por qué se evita el indexado del contenido más útil para el ciudadano?</p>
<p>Aunque en ese caso, en lugar de restringir /detalleiniciativa/, /web/actividadparlamentaria/iniciativas/detalleiniciativa/</p>
<p>Y en vez de /fichasenador/ deberían haber restringido algo como /web/composicionorganizacion/senadores/composicionsenado/fichasenador/</p>
<p>Por otra parte, se evita el indexado de una serie de documentos PDF y páginas HTML, también por alguna razón que me supera. Pero es casi peor el hecho de que de los 6 documentos, sólo 2 existen y las 2 páginas HTML tampoco existen.</p>
<p>Por último, han introducido la limitación del indexado de páginas para que se haga entre las 02:00 y 06:00 AM GMT.  A mí me parece un poco extraño querer limitar el rastreo a las horas de menos tráfico. Un documento creado durante el día no podrá aparecer en los resultados de búsqueda hasta el día siguiente como mínimo. Y no deja de ser una señal de que el sitio no se comporta bien con un tráfico normal más el tráfico que puedan generar los bots de los buscadores.</p>
<h2 id="Conclusiones"><a href="#Conclusiones" class="headerlink" title="Conclusiones"></a>Conclusiones</h2><p>En general, está bien que hayan continuado haciendo mejoras en el sitio, aunque por el camino han tomado decisiones ciertamente discutibles.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hace unos días hacía un &lt;a href=&quot;/estudiando-el-rediseno-de-la-web-del-senado-de-espana/&quot;&gt;análisis del rediseño de la web del Senado&lt;/a&gt;, justo tras su lanzamiento, desde el punto de vista de rendimiento web y mejores prácticas a la hora de desarrollar sitios web. La nueva web del Senado sufría múltiples problemas poco más que inaceptables para un proyecto tan reciente y con tal presupuesto.&lt;/p&gt;
    
    </summary>
    
    
      <category term="optimization" scheme="https://jmperezperez.com/tags/optimization/"/>
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
      <category term="javascript" scheme="https://jmperezperez.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Estudiando el rediseño de la web del Senado de España</title>
    <link href="https://jmperezperez.com//estudiando-el-rediseno-de-la-web-del-senado-de-espana"/>
    <id>https://jmperezperez.com//estudiando-el-rediseno-de-la-web-del-senado-de-espana</id>
    <published>2012-11-12T17:17:35.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Echa un vistazo al <a href="/revisitando-nueva-web-senado">análisis más reciente que he hecho de la web del Senado</a>, donde hablo sobre algunos cambios que han llevado a cabo desde que publicó el nuevo sitio.
<a href="/assets/images/posts/senado-es-portada.jpg"><img src="/assets/images/posts/senado-es-portada-300x175.jpg" alt="Portada de Senado.es"></a></p>
<span id="more"></span>
<p>Hoy se ha presentado el rediseño de la web del Senado de España. Sin entrar a valorar su coste o la necesidad, quería analizarla desde el punto de vista de implementación frontend.</p>
<p>Particularmente, me gustan los análisis que hacen webs como <a href="http://zoompf.com/blog">zoompf</a> sobre distintos sitios web, presentando los problemas encontrados y ofreciendo soluciones.</p>
<p>Aquí hablaré sobre algunos problemas de ámbito general y otros específicos sobre rendimiento web.</p>
<h2 id="Problemas-generales"><a href="#Problemas-generales" class="headerlink" title="Problemas generales"></a>Problemas generales</h2><p>Hay algunos problemas relacionados con XSS (que parece que ya se ha resuelto), indexado y navegación.</p>
<h3 id="senado-es-no-funciona-sin-www"><a href="#senado-es-no-funciona-sin-www" class="headerlink" title="senado.es no funciona sin www"></a>senado.es no funciona sin www</h3><p><a href="/assets/images/posts/www-senado.png"><img src="/assets/images/posts/www-senado-300x153.png" alt="Conversación en Twitter sobre redirección de la web del Senado"></a></p>
<p>Al igual que en la anterior versión de la web, la dirección <a href="http://senado.es/">senado.es</a> no funciona. Es necesario acceder a <a href="http://www.senado.es/">www.senado.es</a> para poder ver el contenido. Aunque se puede solucionar fácilmente, es un pena que se les haya pasado por alto.</p>
<p>Pese <a href="https://twitter.com/jmperezperez/status/267910552288911360">haber sido notificados</a>, 2 días después del lanzamiento, el problema persistía.</p>
<h3 id="No-indexable"><a href="#No-indexable" class="headerlink" title="No indexable"></a>No indexable</h3><p>Por alguna razón, han decidido que su <a href="http://www.senado.es/robots.txt">robots.txt</a> indique a los buscadores que su contenido no se indexe (<a href="https://twitter.com/polpitart/status/267930153592709120">fuente</a>).</p>
<pre><code>#No permitimos acceso a todos los robots de indexación
User-agent: Oracle Secure Enterprise Search
Disallow:
User-agent: *
Disallow: /
Disallow: /legis9/publicaciones/html/textos/CG_B015.html
Disallow: /legis9/publicaciones/pdf/cortes/bocg/CG_B015.PDF
Disallow: /legis9/publicaciones/html/textos/CG_B100.html
Disallow: /legis9/publicaciones/pdf/cortes/bocg/CG_B100.PDF
# No limitamos la hora de indexación
#Visit-time: 0300-0400
</code></pre>
<p>Además, no se ha implementado ningún tipo de redirección para mantener el acceso a las páginas de la antigua web que estaban indexadas en los motores de búsqueda (<a href="http://formatinternet.wordpress.com/2012/11/12/los-problemas-del-desarrollo-web-en-espana-resumidos-en-senado-es/">fuente</a>).</p>
<h3 id="Problemas-de-conexi-243-n"><a href="#Problemas-de-conexi-243-n" class="headerlink" title="Problemas de conexi&#243;n"></a>Problemas de conexi&#243;n</h3><p>Desde que se publicó, el nuevo sitio web ha estado sin funcionar varias veces, ya sea por supuestos ataques DOS o por cualquier otra causa. Esto muestra que la infraestructura no es adecuada o no se han previsto mecanismos para mantener la web operativa en situaciones de mucho tráfico.</p>
<h3 id="Selecci-243-n-de-idioma"><a href="#Selecci-243-n-de-idioma" class="headerlink" title="Selecci&#243;n de idioma"></a>Selecci&#243;n de idioma</h3><p>Aunque el sitio soporta múltiples idiomas, al cambiar el idioma se hace un envío de un formulario POST, se establece el idioma pero la URL se mantiene. Esto, unido a la política de indexación, hace imposible indexar el contenido en los distintos idiomas soportados por la web.</p>
<h3 id="No-responsive-ni-m-243-vil"><a href="#No-responsive-ni-m-243-vil" class="headerlink" title="No responsive ni m&#243;vil"></a>No responsive ni m&#243;vil</h3><p>La verdad es que es difícil justificar la inexistencia de un sitio móvil o soporte de responsive design cuando se lleva a cabo un sitio completamente nuevo. Unido al poco cuidado en la carga de los distintos componentes de la página, se hace poco recomendable utilizar el sitio desde un dispositivo móvil (<a href="http://mobitest.akamai.com/m/results.cgi?testid=121114_K2_5">fuente</a>).</p>
<h2 id="Rendimiento-web"><a href="#Rendimiento-web" class="headerlink" title="Rendimiento web"></a>Rendimiento web</h2><p>Si entramos a valorar el rendimiento web tenemos bastantes puntos que tratar. Puedes echar un vistazo a <a href="http://gtmetrix.com/reports/www.senado.es/cCUUkJUm">las puntuaciones Page Speed y YSlow de la página principal en GTmetrix</a>, el resultado de <a href="http://www.webpagetest.org/result/121112_7M_DP6/">WebPageTest usando Chrome desde París</a> y <a href="http://www.webpagetest.org/result/121112_RQ_F0H/">IE8 desde Madrid</a>, y el <a href="http://scans.zoompf.com/s/e2b8609e20721c1548291f3fd94acaed/report.html">análisis de zoompf</a>, este último teniendo en cuenta 146 páginas de la web del Senado.
<img src="/assets/images/posts/gtmetrix-senado-es.jpg" alt="Puntuación Page Speed y YSlow de www.senado.es">
<em>Puntuación Page Speed y YSlow de <a href="http://www.senado.es/">www.senado.es</a></em></p>
<h3 id="Compresi-243-n-gzip"><a href="#Compresi-243-n-gzip" class="headerlink" title="Compresi&#243;n gzip"></a>Compresi&#243;n gzip</h3><p>Sólo en la página principal se podría ahorrar 476.6KiB (un 30% del total) habilitando la compresión gzip (<a href="http://gtmetrix.com/reports/www.senado.es/cCUUkJUm">fuente</a>).</p>
<h3 id="Falta-de-cacheo"><a href="#Falta-de-cacheo" class="headerlink" title="Falta de cacheo"></a>Falta de cacheo</h3><p>No se especifica política alguna de cacheo de los distintos recursos (JS, PNG, JPG) por lo que el navegador decide si los cachea o no y por cuánto tiempo. Además, los recursos no especifican correctamente su tipo Mime (<a href="http://gtmetrix.com/reports/www.senado.es/cCUUkJUm">fuente</a>).</p>
<h3 id="Errores-404"><a href="#Errores-404" class="headerlink" title="Errores 404"></a>Errores 404</h3><p>Al menos en la página principal, hay 2 requests que resultan en errores 404 (<a href="http://www.webpagetest.org/result/121112_7M_DP6/1/details/">fuente</a>).
<img src="/assets/images/posts/404-senado-es.jpg" alt="Errores 404 en la web del Senado">
<em>Errores 404 en la web del Senado</em></p>
<h3 id="Im-225-genes-no-optimizadas"><a href="#Im-225-genes-no-optimizadas" class="headerlink" title="Im&#225;genes no optimizadas"></a>Im&#225;genes no optimizadas</h3><p>Las imágenes GIF, PNG y JPG pueden ser optimizadas ahorrando una cantidad valiosa de tráfico (<a href="http://scans.zoompf.com/s/e2b8609e20721c1548291f3fd94acaed/report.html#187">fuente</a>).</p>
<h3 id="No-sprites"><a href="#No-sprites" class="headerlink" title="No sprites"></a>No sprites</h3><p>Hay 51 peticiones a imágenes en la página principal (de las 66 que hay en total). Muchas de ellas se corresponden con pequeños iconos que podrían fácilmente formar parte de un sprite. Y, mejor aún, algunas imágenes podrían reemplazarse utilizando CSS3.</p>
<h3 id="Minificaci-243-n-de-ficheros"><a href="#Minificaci-243-n-de-ficheros" class="headerlink" title="Minificaci&#243;n de ficheros"></a>Minificaci&#243;n de ficheros</h3><p>El único CSS o JS minificado es la librería jQuery. Todo el resto de ficheros, incluida <a href="http://www.senado.es/web/js/jquery-ui-1.8-custom-v.js">una versión personalizada de jQuery UI</a>, está sin minificar. Claramente, no existe un proceso de <em>build</em> que tenga en cuenta la minificación de estos ficheros antes de subirlos al sitio web.</p>
<h3 id="Malas-pr-225-cticas-de-Javascript"><a href="#Malas-pr-225-cticas-de-Javascript" class="headerlink" title="Malas pr&#225;cticas de Javascript"></a>Malas pr&#225;cticas de Javascript</h3><p>Echando un vistazo a ficheros como <a href="http://www.senado.es/web/js/funciones.js">funciones.js</a>, vemos como se repiten una y otra vez los mismos selectores de elementos del DOM.</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inicializarVariablesGenerales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// No lleva el var por eso son globales</span>
    globales <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        monthNames<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calendario_nombre_meses option'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">]</span><span class="token punctuation">,</span>
        resultAjax<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        dateFormat<span class="token punctuation">:</span> <span class="token string">'ddmmyy'</span><span class="token punctuation">,</span>
        firstDay<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token operator">...</span>
</code></pre>
<h2 id="Otros-sitios-cubriendo-detalles-de-implementaci-243-n"><a href="#Otros-sitios-cubriendo-detalles-de-implementaci-243-n" class="headerlink" title="Otros sitios cubriendo detalles de implementaci&#243;n"></a>Otros sitios cubriendo detalles de implementaci&#243;n</h2><p>Otras webs están recogiendo también algunos problemas a nivel técnico:</p>
<ul>
<li><a href="http://formatinternet.wordpress.com/2012/11/12/los-problemas-del-desarrollo-web-en-espana-resumidos-en-senado-es/">Los problemas del desarrollo web en España resumidos en senado.es</a> en format internet</li>
<li><a href="http://www.pedroventura.com/desarrollo-web/la-nueva-timo-web-del-senado-que-cuesta-medio-millon-de-euros/">La nueva timo web del Senado que cuesta medio millón de euros</a> en pedroventura.com</li>
<li><a href="http://www.social4u.es/analisis-de-la-web-del-senado/">Análisis de la web del Senado</a> en social4u.es</li>
</ul>
<h2 id="M-225-s-problemas"><a href="#M-225-s-problemas" class="headerlink" title="M&#225;s problemas"></a>M&#225;s problemas</h2><p>Si sabes de algún problema más o alguna posible mejora, añádelo en los comentarios. El propósito de este post es promover las mejores prácticas en cuanto a desarrollo web se refiere.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Echa un vistazo al &lt;a href=&quot;/revisitando-nueva-web-senado&quot;&gt;análisis más reciente que he hecho de la web del Senado&lt;/a&gt;, donde hablo sobre algunos cambios que han llevado a cabo desde que publicó el nuevo sitio.
&lt;a href=&quot;/assets/images/posts/senado-es-portada.jpg&quot;&gt;&lt;img src=&quot;/assets/images/posts/senado-es-portada-300x175.jpg&quot; alt=&quot;Portada de Senado.es&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="optimization" scheme="https://jmperezperez.com/tags/optimization/"/>
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
      <category term="javascript" scheme="https://jmperezperez.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>The not so good web performance tips</title>
    <link href="https://jmperezperez.com//yahoo-tips-website-performance-flush-bottom"/>
    <id>https://jmperezperez.com//yahoo-tips-website-performance-flush-bottom</id>
    <published>2010-12-28T18:46:41.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday I was reading <a href="http://www.slideshare.net/nzakas/performance-yahoohomepage">Zakas’ Performance on the Yahoo! Homepage slideshare presentation</a>, and I got very surprised when I saw that Yahoo had realised that two of the wide accepted tips for improving website performance had not work so well for them.
<img src="/assets/images/posts/yahoo-homepage.jpg" alt="Yahoo&#39;s Home page"></p>
<span id="more"></span>
<p><strong>1) Put scripts at the bottom</strong> (slide 37)
Or at least that is <a href="http://developer.yahoo.com/performance/rules.html#js_bottom">what Yahoo recommends</a>, and it contributes as one of the indicators to calculate YSlow score. But they found out that page would stay frozen while fetching, executing and parsing Javascript and this was worse over slow connections.</p>
<p>The solution was loading Javascript using dynamic <code>script</code> tags. This solution is better applied when using progressive enhancement because users can try to perform actions that are provided by this non-blocking javascript.</p>
<p><strong>2) Flush after head</strong> (slide 51)
This is another <a href="http://developer.yahoo.com/performance/rules.html#flush">recommended practice by Yahoo</a>. They found out that the best solution was to flush at different points, especially when a block of a considerable size had been output. They also recommend to avoid having a big external <code>div</code> containing the different sections, and place directly the sections as <code>body</code> children.</p>
<p>In conclusion, the best you can do is test the different alternatives, especially when trying to find the one the provides the best user’s perceived page load time.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yesterday I was reading &lt;a href=&quot;http://www.slideshare.net/nzakas/performance-yahoohomepage&quot;&gt;Zakas’ Performance on the Yahoo! Homepage slideshare presentation&lt;/a&gt;, and I got very surprised when I saw that Yahoo had realised that two of the wide accepted tips for improving website performance had not work so well for them.
&lt;img src=&quot;/assets/images/posts/yahoo-homepage.jpg&quot; alt=&quot;Yahoo&amp;#39;s Home page&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="flush" scheme="https://jmperezperez.com/tags/flush/"/>
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
      <category term="yahoo" scheme="https://jmperezperez.com/tags/yahoo/"/>
    
  </entry>
  
  <entry>
    <title>Updates on BigPipe using ASP.NET MVC</title>
    <link href="https://jmperezperez.com//updates-on-bigpipe-using-asp-net-mvc"/>
    <id>https://jmperezperez.com//updates-on-bigpipe-using-asp-net-mvc</id>
    <published>2010-12-11T16:17:14.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been several weeks since I wrote <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1">a tutorial to implement BigPipe using C# and ASP.Net MVC</a>. And I have just read <a href="http://velocity.oreilly.com.cn/index.php?func=session&amp;name=Facebook%E7%BD%91%E7%AB%99%E7%9A%84Ajax%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%B5%81%E6%B0%B4%E7%BA%BF">a PDF from a presentation at Velocity China</a> in which Changhao Jiang, from Facebook, explains some details about Bigpipe, as well as other techniques they use to improve Time to interact (both real and perceived), as well as data savings. These techniques (named Quickling and PageCache) are based on hijax and an intelligent update of specific content of the page instead of the whole page when data changes.</p>
<span id="more"></span>
<p>According to Changhao Jiang, this is the improvement when using BigPipe on Facebook:
<img src="/assets/images/posts/bigpipe-tti-improvement-e1320910397828.png" alt="Improvement when using BigPipe on Facebook"></p>
<p>My first project using BigPipe as I explained is about to go online. Overall I can say that BigPipe approach has helped divide pages into independent chunks using RenderAction, opposite to overpopulating a single action to retrieve all data needed by the page. And I have faced some problems involving pagelet content.</p>
<p>##HTML to JSON
When using JavascriptSerializer (or JsonResult) to convert HTML content to JSON, the generated code is not as nice as Facebook’s.</p>
<p>While yours will look similar to</p>
<pre class=" language-js"><code class="language-js">bigpipe<span class="token punctuation">.</span><span class="token function">onPageletArrive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"Id"</span><span class="token punctuation">:</span><span class="token string">"my-pagelet"</span><span class="token punctuation">,</span><span class="token string">"Content"</span><span class="token punctuation">:</span>"\\r\n\r\n\u003cdiv <span class="token keyword">class</span><span class="token operator">=</span>\"my<span class="token operator">-</span>div\"\u003e\r\n    \u003c <span class="token operator">...</span>
</code></pre>
<p>Facebook’s is more like this:</p>
<pre class=" language-js"><code class="language-js">bigpipe<span class="token punctuation">.</span><span class="token function">onPageletArrive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"Id"</span><span class="token punctuation">:</span><span class="token string">"my-pagelet"</span><span class="token punctuation">,</span><span class="token string">"Content"</span><span class="token punctuation">:</span>"<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span>\"my<span class="token operator">-</span>div\"<span class="token operator">></span> <span class="token operator">...</span>
</code></pre>
<p>So (1) it can be a good idea to strip whitespace from your code and (2) maybe you would like to replace those \u003c and \u003e (see <a href="http://stackoverflow.com/questions/1058895/cant-get-to-show-up-in-json-string">this discussion at stackoverflow</a> and <a href="http://forums.asp.net/t/1440943.aspx">this other link</a>).</p>
<p>##Javascript code not being executed when appended to document using ajax
If your pagelet contains Javascript code, you’d better off moving it from the content of the pagelet to a javascript file to be downloaded and executed as I explain in the tutorial. When you append the content of the pagelet to the container, its Javascript code will not be executed, so take this into account.</p>
<p>In the next days I will update the code of the tutorial to include minor changes that I have found can improve it. And when I have more information about how my little bigpipe is performing I will write a post about it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s been several weeks since I wrote &lt;a href=&quot;/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1&quot;&gt;a tutorial to implement BigPipe using C# and ASP.Net MVC&lt;/a&gt;. And I have just read &lt;a href=&quot;http://velocity.oreilly.com.cn/index.php?func=session&amp;amp;name=Facebook%E7%BD%91%E7%AB%99%E7%9A%84Ajax%E5%8C%96%E3%80%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%B5%81%E6%B0%B4%E7%BA%BF&quot;&gt;a PDF from a presentation at Velocity China&lt;/a&gt; in which Changhao Jiang, from Facebook, explains some details about Bigpipe, as well as other techniques they use to improve Time to interact (both real and perceived), as well as data savings. These techniques (named Quickling and PageCache) are based on hijax and an intelligent update of specific content of the page instead of the whole page when data changes.&lt;/p&gt;
    
    </summary>
    
    
      <category term="bigpipe" scheme="https://jmperezperez.com/tags/bigpipe/"/>
    
      <category term="facebook" scheme="https://jmperezperez.com/tags/facebook/"/>
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Lazy loading Javascript: On-demand scripts to faster load times</title>
    <link href="https://jmperezperez.com//ondemand-javascript-lazy-loading-stubs"/>
    <id>https://jmperezperez.com//ondemand-javascript-lazy-loading-stubs</id>
    <published>2010-11-13T15:14:34.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Loading on-demand code can boost website performance in the sense that the browser does not need to request and execute Javascript code that is not needed. Depending on the script, a different approach can be taken to lazy load it.</p>
<span id="more"></span>
<h2 id="Progressive-enhancement-Javascript"><a href="#Progressive-enhancement-Javascript" class="headerlink" title="Progressive enhancement Javascript"></a>Progressive enhancement Javascript</h2><p>This is by far the best scenario. Javascript is used to improve user experience but the web page can work without Javascript (in example, browsers with Javascript disabled). In this case, script loading can be delayed to the very moment it is needed or it can be loaded after some timeout.</p>
<p>An example would be a form used to post a comment. This form could be ajaxify using a script that is requested when the textarea is focused. This way, this script would just be downloaded when potentially needed. Another example would be an input search that is improved using autocompletion once it is focused.</p>
<h2 id="Using-mocks-stubs-for-Javascript-only-functionality"><a href="#Using-mocks-stubs-for-Javascript-only-functionality" class="headerlink" title="Using mocks/stubs for Javascript-only functionality"></a>Using mocks/stubs for Javascript-only functionality</h2><p>Some times Javascript is used to allow functionality that cannot implemented other way. In this case, a mockup approach can be taken.</p>
<p>Mockup Javascript only defines the signatures of the functions and as
little functionality as possible. We can use mocks to load the “real”
Javascript and avoid calls to non-declared functions. This is similar to
how <a href="http://www.stevesouders.com/blog/2009/09/08/doloto-javascript-download-optimizer/">Microsoft Doloto</a> works. Stub functions can make as little as
just preventing undefined symbols, or as much as loading real script and
re-execute the javascript call so that the real script (that has
just overridden the stub function) executes. Steve Souders explains this
technique in his <a href="http://books.google.es/books?id=E7p-07kNfXYC&lpg=PA24&ots=ULjpQKecMk&dq=souders%20doloto&pg=PA24#v=onepage&q&f=false"><em>Even faster web sites</em> book</a>.</p>
<p>We would have one file to functions declarations (mockup) and another file that will override mockup:</p>
<p><strong>functions_mock.js</strong></p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loadJs</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'text/javascript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> loaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> loadFunction <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loaded<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    cb <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  script<span class="token punctuation">.</span>onload <span class="token operator">=</span> loadFunction<span class="token punctuation">;</span>
  script<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> loadFunction<span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token function">loadJs</span><span class="token punctuation">(</span><span class="token string">'functions.js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p><strong>functions.js</strong></p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p><strong>index.html</strong></p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>functions_mock.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(factorial(10));<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Factorial!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>Maybe the <code>factorial</code> function is not the best one. In fact, the size of mock file is greater than the “real” JavaScript file, but the idea is that mock file would replace large functions, achieving smaller files and faster execution times, especially if we use stubs to only prevent undefined symbols and load real scripts after some delay.</p>
<p>In the case of stub loading real script we should take into account that some functions may need synchronous downloading of real script file. This is the case of functions that return a value that is used later. In our example, if we change the button call function to something like:</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>var f <span class="token punctuation">=</span> factorial(10); alert(f);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Factorial!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
</code></pre>
<p>we will get an undefined value because factorial stub function returns before calling real function. This can be solved by loading functions.js in a blocking way, though this can affect user experience.</p>
<p>In conclusion, we should consider what is the best way to defer JavaScript execution (and if it is worth). Personally I think that it can be useful in the case of large JavaScript files with few global variables that we can manage properly.</p>
]]></content>
    
    <summary type="html">
    
      How to load JavaScript on-demand using stub functions and progressive enhancements
    
    </summary>
    
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
      <category term="javascript" scheme="https://jmperezperez.com/tags/javascript/"/>
    
      <category term="lazy loading" scheme="https://jmperezperez.com/tags/lazy-loading/"/>
    
      <category term="stub" scheme="https://jmperezperez.com/tags/stub/"/>
    
  </entry>
  
  <entry>
    <title>Tutorial: Implementing Facebook&#39;s BigPipe Using ASP.Net MVC - Part 1</title>
    <link href="https://jmperezperez.com//tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1"/>
    <id>https://jmperezperez.com//tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1</id>
    <published>2010-09-18T07:37:07.000Z</published>
    <updated>2018-12-16T17:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Parts of the tutorial</p>
<ol>
<li> Introduction to BigPipe</li>
<li><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2">How ASP.Net MVC fits in the model. Registering and generating
 pagelets</a></li>
<li><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-3">Browser implementation of BigPipe. Loading pagelets and their
 resources effectively</a></li>
<li> <a href="https://github.com/JMPerez/BigPipe">Check out the demo Visual Studio solution</a></li>
</ol>
<p>Through a series of posts I will explain how we can implement BigPipe Facebook using ASP.Net MVC.</p>
<!-- more -->
<p>In this first post I will describe what BigPipe is and sketch how we can make a similar implementation using ASP.Net MVC.</p>
<p>You can clone the code from <a href="https://github.com/JMPerez/BigPipe">the BigPipe project on GitHub</a>  that includes all the source code needed to run the sample.</p>
<h2 id="What-is-BigPipe"><a href="#What-is-BigPipe" class="headerlink" title="What is BigPipe"></a>What is BigPipe</h2><p>BigPipe is a <a href="/techniques-optimize-web-sites">website performance technique</a> used and coined by Facebook to serve web pages improving user’s perceived load speed. In general, it consists of serving quickly the main content of the page, and then serve the content from other regions of the page called pagelets.</p>
<p>The implementation of these pagelets is performed in parallel on the server and served to the browser as soon as they are generated. This allows:</p>
<ol>
<li>Browser can start rendering the page content earlier (early
 flushing)</li>
<li>Pagelets are served as soon as they are ready and the browser can
 render them in their container.</li>
<li>If one pagelet takes longer to run, it will not delay the generation
 of the rest of pagelets.</li>
<li>Pagelets are generated in several concurrent asynchronous threads
 and when a thread finishes its execution, it flushes the content so
 the browser can start rendering.</li>
</ol>
<p>Sequence of the different stages during a pagelet generation:</p>
<p><img src="/assets/images/posts/bigpipe-sequence.svg" alt="Sequence of the different stages during a pagelet generation"></p>
<p>Apart from the pagelet generation, parallelism is also applied during the processing of the pagelet by the browser. Each pagelet can define a set of CSS and JS files that it needs to work properly. These files are requested in such a way that it keeps a good performance.</p>
<p>Graph showing how pagelets resources are requested:</p>
<p><img src="/assets/images/posts/bigpipe-pagelet-process.svg" alt="Graph showing how pagelets resources are requested"></p>
<ol>
<li> For each pagelet, request in parallel every necessary CSS resource</li>
<li>Once a pagelet has the necessary CSS files, inject the HTML code
 inside its container.</li>
<li>When every pagelet has finished request its CSS files and is
 inserted in the document, proceed to request in parallel the JS
 files needed by the whole set of pagelets.</li>
</ol>
<p>By keeping these steps we make sure that the pagelets are appended to
the document and set their style, avoiding a FUOC (Flash Of Unstyled
Content). By delaying the download of JS resources we are prioritizing
CSS requests for content be shown earlier, as well as other pagelets to
be downloaded.</p>
<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>Your browser must support Javascript, since the content is embedded
using Javascript. Our implementation takes into account progressive
enhancement to serve pages not using BigPipe for browsers without
Javascript or search engine bots (keeping SEO and accessibility).</p>
<h3 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h3><ul>
<li>Load time perceived by the user is better. Rendering earlier the
  main content of the page, browser starts making requests for
  resources CSS and Javascript earluer, as well as inerpreting the DOM
  tree.</li>
<li>We take advantage of the parallelism in the server side,  running
  simultaneously multiple pagelets.</li>
<li>In general, improving the parallelism of the system. As the browser
  renders a region, some others are being transmitted through the wire
  and some other being built in the server.</li>
<li>Everything is done in a single request by the client. You could
  implement BigPipe using Ajax calls from the browser to generate the
  pagelets, but at the expense of a greater number of requests (this
  will be covered in another post).</li>
</ul>
<h3 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h3><ul>
<li>When you flush each pagelet more packets are sent from server to
  client (however we can always decide to send more than one pagelet
  in each flushing).</li>
<li>Browser has to interpret the code and insert pagelets in their
  containers. This causes repaintings and reflows which can be
  annoying to the user.</li>
</ul>
<p><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2">In part 2 of the tutorial</a> I explain how to use ASP.Net MVC to implement BigPipe, using RenderActions and threads pool to execute the pagelets.</p>
<h4 id="Other-resources"><a href="#Other-resources" class="headerlink" title="Other resources"></a>Other resources</h4><p>Some other people have implemented the basics of this technique using Java (<a href="http://www.olympum.com/java/facebook-bigpipe-in-an-async-servlet">Bruno Fernandez-Ruiz</a> and <a href="http://codemonkeyism.com/facebook-bigpipe-java/">Stephan Schmidt</a>) and using Node.js (<a href="http://www.subbu.org/blog/2010/07/bigpipe-done-in-node-js">Subbu Allamaraju</a>).</p>
]]></content>
    
    <summary type="html">
    
      First part of the tutorial to implement Facebook&#39;s BigPipe using ASP.Net MVC. BigPipe improves pages loading time dividing them into regions that are generated on the server concurrently.
    
    </summary>
    
    
      <category term="optimization" scheme="https://jmperezperez.com/tags/optimization/"/>
    
      <category term="flush" scheme="https://jmperezperez.com/tags/flush/"/>
    
      <category term="bigpipe" scheme="https://jmperezperez.com/tags/bigpipe/"/>
    
      <category term="facebook" scheme="https://jmperezperez.com/tags/facebook/"/>
    
      <category term="performance" scheme="https://jmperezperez.com/tags/performance/"/>
    
  </entry>
  
</feed>
